{
	"functions": [
		{
			"name": "AI_ClearCaptureImportanceBonus",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false},
				{"name": "pEntity", "type": "Entity*", "optional": false}
			],
			"description": "This clears the importance bonus on this capture point "
		},
		{
			"name": "AI_ClearImportance",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false},
				{"name": "pEntity", "type": "Entity*", "optional": false}
			],
			"description": "This clears the importance override on this military point "
		},
		{
			"name": "AI_CreateObjective",
			"returnType": "AIObjective*",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false},
				{"name": "objectiveType", "type": "uint32_t", "optional": false}
			],
			"description": "Create a new objective for player "
		},
		{
			"name": "AI_DebugAttackEncounterPositionScoringEnable",
			"returnType": "void",
			"parameters": [
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enables/disables debugging of AI Attack Objective Encounter Position Scoring "
		},
		{
			"name": "AI_DebugAttackEncounterPositionScoringIsEnabled",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns true if AI Attack Objective Encounter Position Scoring is enabled "
		},
		{
			"name": "AI_DebugLuaEnable",
			"returnType": "void",
			"parameters": [
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enables/disables AI Lua Debugging "
		},
		{
			"name": "AI_DebugLuaIsEnabled",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns true if AI Lua Debugging is enabled "
		},
		{
			"name": "AI_DebugRatingEnable",
			"returnType": "void",
			"parameters": [
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enables/disables AI Construction Debugging "
		},
		{
			"name": "AI_DebugRatingIsEnabled",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns true if AI Construction Debugging is enabled "
		},
		{
			"name": "AI_DebugRenderAllTaskChildrenEnable",
			"returnType": "void",
			"parameters": [
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enables/disables AI Rendering of All Task Children "
		},
		{
			"name": "AI_DebugRenderAllTaskChildrenIsEnabled",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns true if AI Rendering of All Task Children is enabled "
		},
		{
			"name": "AI_DebugSkirmishCaptureEnable",
			"returnType": "void",
			"parameters": [
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enables/disables AI Skirmish Capture Debugging "
		},
		{
			"name": "AI_DebugSkirmishCaptureIsEnabled",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns true if AI Skirmish Capture Debugging is enabled "
		},
		{
			"name": "AI_DebugSkirmishCombatTargetEnable",
			"returnType": "void",
			"parameters": [
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enables/disables AI Skirmish Combat Target Debugging "
		},
		{
			"name": "AI_DebugSkirmishCombatTargetIsEnabled",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns true if AI Skirmish Combat Target Debugging is enabled "
		},
		{
			"name": "AI_DebugSkirmishObjectiveEnable",
			"returnType": "void",
			"parameters": [
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enables/disables AI Skirmish Objective Debugging "
		},
		{
			"name": "AI_DebugSkirmishObjectiveIsEnabled",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns true if AI Skirmish Objective Debugging is enabled "
		},
		{
			"name": "AI_DisableAllEconomyOverrides",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false}
			],
			"description": "Disable all of the economy overrides for the AI player "
		},
		{
			"name": "AI_Enable",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false},
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enables or Disables an AI player "
		},
		{
			"name": "AI_EnableAll",
			"returnType": "void",
			"parameters": [
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enables or Disables all AI players "
		},
		{
			"name": "AI_EnableEconomyOverride",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false},
				{"name": "overrideName", "type": "const char*", "optional": false},
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enable or disable the economy override for the AI player "
		},
		{
			"name": "AI_GetDifficulty",
			"returnType": "int",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false}
			],
			"description": "Gets the difficulty level of this AI player \nLevels can be one of: AD_Easy, AD_Standard, AD_Hard, AD_Hardest"
		},
		{
			"name": "AI_GetPersonality",
			"returnType": "const char*",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false}
			],
			"description": "Get the personality name of this AI player "
		},
		{
			"name": "AI_GetPersonalityLuaFileName",
			"returnType": "const char*",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false}
			],
			"description": "Get the personality lua file name of this AI player "
		},
		{
			"name": "AI_IsAIPlayer",
			"returnType": "bool",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false}
			],
			"description": "Returns true if player is an AI player "
		},
		{
			"name": "AI_IsEnabled",
			"returnType": "bool",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false}
			],
			"description": "Returns true if player is a AIPlayer and is enabled "
		},
		{
			"name": "AI_LockEntity",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false},
				{"name": "pEntity", "type": "Entity*", "optional": false}
			],
			"description": "Locks the entity and disables its tactics (if any) and the AI will no longer use this object "
		},
		{
			"name": "AI_LockSquad",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false},
				{"name": "pSquad", "type": "Squad*", "optional": false}
			],
			"description": "Locks the squad and disables its tactics (if any) and the AI will no longer use this object "
		},
		{
			"name": "AI_LockSquads",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false},
				{"name": "squads", "type": "SGroup*", "optional": false}
			],
			"description": "Locks the squads and disables its tactics (if any) and the AI will no longer use these objects "
		},
		{
			"name": "AI_RestoreDefaultPersonalitySettings",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false}
			],
			"description": "Restores the default personality and difficulty settings of this AI player "
		},
		{
			"name": "AI_SetCaptureImportanceBonus",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false},
				{"name": "pEntity", "type": "Entity*", "optional": false},
				{"name": "importanceBonus", "type": "float", "optional": false}
			],
			"description": "This sets importance bonus of the given capture point "
		},
		{
			"name": "AI_SetDifficulty",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false},
				{"name": "difficultyLevel", "type": "int", "optional": false}
			],
			"description": "Set the difficulty level of this AI player \nLevels can be one of: AD_Easy, AD_Standard, AD_Hard, AD_Hardest"
		},
		{
			"name": "AI_SetImportance",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false},
				{"name": "pEntity", "type": "Entity*", "optional": false},
				{"name": "importance", "type": "float", "optional": false}
			],
			"description": "This overrides the default importance of the given military point "
		},
		{
			"name": "AI_SetPersonality",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false},
				{"name": "personalityName", "type": "const char*", "optional": false}
			],
			"description": "Set the personality name of this AI player "
		},
		{
			"name": "AI_UnlockAll",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false}
			],
			"description": "Unlocks all designer locked squads for player "
		},
		{
			"name": "AI_UnlockEntity",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false},
				{"name": "pEntity", "type": "Entity*", "optional": false}
			],
			"description": "Unlocks this entity so that AI can use it again "
		},
		{
			"name": "AI_UnlockSquad",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false},
				{"name": "pSquad", "type": "Squad*", "optional": false}
			],
			"description": "Unlocks the given squad so the AI can use it again "
		},
		{
			"name": "AI_UnlockSquads",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false},
				{"name": "squads", "type": "SGroup*", "optional": false}
			],
			"description": "Locks the squads and disables its tactics (if any) and the AI will no longer use these objects "
		},
		{
			"name": "AI_UpdateStatics",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false}
			],
			"description": "Re-updates the AI in regards to all the static objects in the world (if SCAR creates new strategic points dynamically this will need to be called) "
		},
		{
			"name": "AIAbilityObjective_AbilityGuidance_SetAbilityPBG",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "abilityPBG", "type": "const PropertyBagGroup*", "optional": false}
			],
			"description": "Set ability for ability objective "
		},
		{
			"name": "AIObjective_Cancel",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false}
			],
			"description": "Ends the objective and deletes it. "
		},
		{
			"name": "AIObjective_CombatGuidance_EnableCombatGarrison",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enables/disables squads in combat garrisoning. "
		},
		{
			"name": "AIObjective_CombatGuidance_EnableRetaliateAttacks",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enables/disables allowing squads to retaliate against attacking enemies outside the allowed leash area "
		},
		{
			"name": "AIObjective_CombatGuidance_SetRetaliateAttackTargetAreaRadius",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "radius", "type": "float", "optional": false}
			],
			"description": "Sets the target area radius for the maximum range an enemy can be for a retaliate attack "
		},
		{
			"name": "AIObjective_DefenseGuidance_AddFacingPosition",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false}
			],
			"description": "Add facing position to objective; used to determine good defensive setup positions. "
		},
		{
			"name": "AIObjective_DefenseGuidance_EnableIdleGarrison",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enables/disables idle squads garrisoning. "
		},
		{
			"name": "AIObjective_DefenseGuidance_ResetFacingPositions",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false}
			],
			"description": "Remove all facing positions from objective. "
		},
		{
			"name": "AIObjective_EngagementGuidance_EnableAggressiveEngagementMove",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enable / disable aggressive move into engagement area "
		},
		{
			"name": "AIObjective_EngagementGuidance_SetAllowReturnToPreviousStages",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enable objective to return to previous stages if they fail to meet conditions for current stage. "
		},
		{
			"name": "AIObjective_EngagementGuidance_SetCoordinatedSetup",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enable coordinated arrival or setup of squads at engagement area. "
		},
		{
			"name": "AIObjective_EngagementGuidance_SetMaxEngagementTime",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "seconds", "type": "float", "optional": false}
			],
			"description": "Sets max time, in seconds, to accomplish objective, once the target is engaged. "
		},
		{
			"name": "AIObjective_EngagementGuidance_SetMaxIdleTime",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "seconds", "type": "float", "optional": false}
			],
			"description": "Sets max time, in seconds, to remain idle at objective target, once engaged. "
		},
		{
			"name": "AIObjective_FallbackGuidance_EnableRetreatOnPinned",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enable retreat to break supression. "
		},
		{
			"name": "AIObjective_FallbackGuidance_EnableRetreatOnSuppression",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enable retreat to break supression. "
		},
		{
			"name": "AIObjective_FallbackGuidance_SetEntitiesRemainingThreshold",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "value", "type": "float", "optional": false}
			],
			"description": "Set entities remaining threshold of encounter [0-N] to fallback at. "
		},
		{
			"name": "AIObjective_FallbackGuidance_SetFallbackCapacityPercentage",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "value", "type": "float", "optional": false}
			],
			"description": "Set health threshold [0-1] to fallback at. "
		},
		{
			"name": "AIObjective_FallbackGuidance_SetFallbackCombatRatingPercentage",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "value", "type": "float", "optional": false}
			],
			"description": "Set health threshold [0-1] to fallback at. "
		},
		{
			"name": "AIObjective_FallbackGuidance_SetFallbackSquadHealthPercentage",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "value", "type": "float", "optional": false}
			],
			"description": "Set combat rating threshold of area [0-1] to fallback at. "
		},
		{
			"name": "AIObjective_FallbackGuidance_SetFallbackVehicleHealthPercentage",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "value", "type": "float", "optional": false}
			],
			"description": "Set health threshold [0-1] to fallback at. "
		},
		{
			"name": "AIObjective_FallbackGuidance_SetGlobalFallbackPercentage",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "value", "type": "float", "optional": false}
			],
			"description": "Set global fallback threshold (0.0f for individual squad). "
		},
		{
			"name": "AIObjective_FallbackGuidance_SetGlobalFallbackRetreat",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "value", "type": "bool", "optional": false}
			],
			"description": "Set global retreat type (true for retreat; false for fallback). "
		},
		{
			"name": "AIObjective_FallbackGuidance_SetRetreatCapacityPercentage",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "value", "type": "float", "optional": false}
			],
			"description": "Set combat rating threshold of area [0-1] to fallback at. "
		},
		{
			"name": "AIObjective_FallbackGuidance_SetRetreatCombatRatingPercentage",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "value", "type": "float", "optional": false}
			],
			"description": "Set combat rating threshold of area [0-1] to fallback at. "
		},
		{
			"name": "AIObjective_FallbackGuidance_SetRetreatHealthPercentage",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "value", "type": "float", "optional": false}
			],
			"description": "Set combat rating threshold of area [0-1] to fallback at. "
		},
		{
			"name": "AIObjective_FallbackGuidance_SetTargetPosition",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false}
			],
			"description": "Set fallback target. "
		},
		{
			"name": "AIObjective_IsValid",
			"returnType": "bool",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false}
			],
			"description": "Determines if objective is still valid.  Must be true before calling any other of the AIObjective_* function.  Return true if valid, false otherwise. "
		},
		{
			"name": "AIObjective_MoveGuidance_EnableAggressiveMove",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enable / disable aggressive movements on way to engagement targets "
		},
		{
			"name": "AIObjective_MoveGuidance_ResetPathingLengthFactor",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false}
			],
			"description": "Reset preference for shorter paths on way to engagement targets, to defaults "
		},
		{
			"name": "AIObjective_MoveGuidance_ResetSafePathingWeight",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false}
			],
			"description": "Reset preference for safe movements on way to engagement targets, to defaults "
		},
		{
			"name": "AIObjective_MoveGuidance_SetPathingLengthFactor",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "weight", "type": "float", "optional": false}
			],
			"description": "Set preference for shorter paths on way to engagement targets "
		},
		{
			"name": "AIObjective_MoveGuidance_SetSafePathingWeight",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "weight", "type": "float", "optional": false}
			],
			"description": "Set preference for safe movements on way to engagement targets "
		},
		{
			"name": "AIObjective_MoveGuidance_SetSquadCoherenceRadius",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "radius", "type": "float", "optional": false}
			],
			"description": "Set radius (follow distance) for coordinated move phase (&lt;= 0 disables coordinated movement) "
		},
		{
			"name": "AIObjective_Notify_ClearCallbacks",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false}
			],
			"description": "Clears all notification callbacks for objective "
		},
		{
			"name": "AIObjective_Notify_SetPlayerEventObjectiveID",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "id", "type": "uint32_t", "optional": false}
			],
			"description": "Sets the ID for the notification event sent out by objective "
		},
		{
			"name": "AIObjective_ResourceGuidance_ClearSquads",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false}
			],
			"description": "Removes all resource squads from objective. "
		},
		{
			"name": "AIObjective_ResourceGuidance_SquadGroup",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "squads", "type": "SGroup*", "optional": false}
			],
			"description": "Sets the resource squads for objective. "
		},
		{
			"name": "AIObjective_SetName",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "name", "type": "const char*", "optional": false}
			],
			"description": "Set objective name for debugging. "
		},
		{
			"name": "AIObjective_TacticFilter_DisableAbility",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "ability", "type": "const PropertyBagGroup*", "optional": false}
			],
			"description": "Disable ability for all squads in objective "
		},
		{
			"name": "AIObjective_TacticFilter_DisableAbilityForSquadGroup",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "squads", "type": "SGroup*", "optional": false},
				{"name": "ability", "type": "const PropertyBagGroup*", "optional": false}
			],
			"description": "Disable ability for squads in objective "
		},
		{
			"name": "AIObjective_TacticFilter_EnableCloseGround",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "priority", "type": "float", "optional": false}
			],
			"description": "Enable close ground behaviour (3-stage TACTIC_RushAtTarget) for all squads in objective, running at priority (1..1000) "
		},
		{
			"name": "AIObjective_TacticFilter_Reset",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false}
			],
			"description": "Reset all tactic filters for objective "
		},
		{
			"name": "AIObjective_TacticFilter_ResetAbilityGuidance",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false}
			],
			"description": "Reset all tactic ability constraints for objective "
		},
		{
			"name": "AIObjective_TacticFilter_ResetPriority",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "tactic", "type": "<a href=\"enum_list.htm#AITacticType\">AITacticType</a>", "optional": false}
			],
			"description": "Reset tactic priority for all squads in objective "
		},
		{
			"name": "AIObjective_TacticFilter_ResetTacticGuidance",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false}
			],
			"description": "Reset all tactic constraints for objective "
		},
		{
			"name": "AIObjective_TacticFilter_ResetTargetGuidance",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false}
			],
			"description": "Reset all tactic target constraints for objective "
		},
		{
			"name": "AIObjective_TacticFilter_SetAbilityGuidance",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "ability", "type": "const PropertyBagGroup*", "optional": false},
				{"name": "maxCasters", "type": "int32_t", "optional": false},
				{"name": "retrySecs", "type": "float", "optional": false},
				{"name": "waitSecs", "type": "float", "optional": false},
				{"name": "timeoutSecs", "type": "float", "optional": false},
				{"name": "initialWait", "type": "bool", "optional": false},
				{"name": "maxRange", "type": "float", "optional": false}
			],
			"description": "Set tactic ability constraints for objective "
		},
		{
			"name": "AIObjective_TacticFilter_SetDefaultAbilityGuidance",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "maxCasters", "type": "int32_t", "optional": false},
				{"name": "retrySecs", "type": "float", "optional": false},
				{"name": "waitSecs", "type": "float", "optional": false},
				{"name": "timeoutSecs", "type": "float", "optional": false},
				{"name": "initialWait", "type": "bool", "optional": false},
				{"name": "maxRange", "type": "float", "optional": false}
			],
			"description": "Set default tactic ability constraints for objective (ability specific guidance takes priority over defaults) "
		},
		{
			"name": "AIObjective_TacticFilter_SetDefaultTacticGuidance",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "maxUsers", "type": "int32_t", "optional": false},
				{"name": "retrySecs", "type": "float", "optional": false},
				{"name": "waitSecs", "type": "float", "optional": false},
				{"name": "timeoutSecs", "type": "float", "optional": false},
				{"name": "initialWait", "type": "bool", "optional": false},
				{"name": "maxRange", "type": "float", "optional": false}
			],
			"description": "Set default tactic constraints for objective (tactic specific guidance takes priority over defaults) "
		},
		{
			"name": "AIObjective_TacticFilter_SetDefaultTargetGuidance",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "maxAttackers", "type": "int32_t", "optional": false}
			],
			"description": "Set default target constraints for objective (target specific guidance takes priority over defaults) "
		},
		{
			"name": "AIObjective_TacticFilter_SetPriority",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "tactic", "type": "<a href=\"enum_list.htm#AITacticType\">AITacticType</a>", "optional": false},
				{"name": "priority", "type": "float", "optional": false}
			],
			"description": "Set tactic priority for all squads in objective; negative priority disables "
		},
		{
			"name": "AIObjective_TacticFilter_SetPriorityForSquadGroup",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "squads", "type": "SGroup*", "optional": false},
				{"name": "tactic", "type": "<a href=\"enum_list.htm#AITacticType\">AITacticType</a>", "optional": false},
				{"name": "priority", "type": "float", "optional": false}
			],
			"description": "Set tactic priority for squads in objective "
		},
		{
			"name": "AIObjective_TacticFilter_SetTacticGuidance",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "tactic", "type": "<a href=\"enum_list.htm#AITacticType\">AITacticType</a>", "optional": false},
				{"name": "maxUsers", "type": "int32_t", "optional": false},
				{"name": "retrySecs", "type": "float", "optional": false},
				{"name": "waitSecs", "type": "float", "optional": false},
				{"name": "timeoutSecs", "type": "float", "optional": false},
				{"name": "initialWait", "type": "bool", "optional": false},
				{"name": "maxRange", "type": "float", "optional": false}
			],
			"description": "Set tactic constraints for objective "
		},
		{
			"name": "AIObjective_TacticFilter_SetTargetPolicy",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "policy", "type": "TargetPreference", "optional": false}
			],
			"description": "Set tactic target priority for objective "
		},
		{
			"name": "AIObjective_TargetGuidance_SetTargetArea",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "radius", "type": "float", "optional": false}
			],
			"description": "Sets engagement area radius around the target.   "
		},
		{
			"name": "AIObjective_TargetGuidance_SetTargetEntity",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Sets target Entity for objective "
		},
		{
			"name": "AIObjective_TargetGuidance_SetTargetLeash",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "radius", "type": "float", "optional": false}
			],
			"description": "Sets leash radius around target where squads should stay within.  "
		},
		{
			"name": "AIObjective_TargetGuidance_SetTargetPathByName",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "pathName", "type": "const char*", "optional": false},
				{"name": "delaySecs", "type": "float", "optional": false}
			],
			"description": "Sets target patrol path for objective "
		},
		{
			"name": "AIObjective_TargetGuidance_SetTargetPathWander",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "delaySecs", "type": "float", "optional": false}
			],
			"description": "Sets random wander target patrol for objective; delaySecs is the time in secs to pause at each random point "
		},
		{
			"name": "AIObjective_TargetGuidance_SetTargetPosition",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false}
			],
			"description": "Sets target position for objective "
		},
		{
			"name": "AIObjective_TargetGuidance_SetTargetSquad",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective*", "optional": false},
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Sets target Squad for objective "
		},
		{
			"name": "BeginnerHint_AddOpportunity",
			"returnType": "OpportunityID",
			"parameters": [
				{"name": "where", "type": "Pos/Group/Table", "optional": false},
				{"name": "ability[", "type": "AbilityID/Table", "optional": false},
				{"name": "repeating", "type": "Bool", "optional": false},
				{"name": "message", "type": "LocText", "optional": false},
				{"name": "icon", "type": "String", "optional": false},
				{"name": "arrow", "type": "HPAT", "optional": false},
				{"name": "max_difficulty", "type": "GD", "optional": false},
				{"name": "ignore_timers", "type": "Bool", "optional": false}
			],
			"description": "Add an opportunity that may get highlighted by the hint manager system on easier difficulty modes. THIS IS NOT MP-SAFE! "
		},
		{
			"name": "BeginnerHint_RemoveAllOpportunities",
			"returnType": "Void",
			"parameters": [
				{"name": "", "type": "", "optional": false}
			],
			"description": "Remove all opportunities in one fell swoop! "
		},
		{
			"name": "BeginnerHint_RemoveOpportunity",
			"returnType": "Void",
			"parameters": [
				{"name": "where", "type": "Pos/OpportunityID", "optional": false}
			],
			"description": "Remove an opportunity, either by ID or all opportunities at a location "
		},
		{
			"name": "BP_GetAbilityBlueprint",
			"returnType": "ScarAbilityPBG",
			"parameters": [
				{"name": "pbgShortname", "type": "const char*", "optional": false}
			],
			"description": "Returns an ability property bag group. "
		},
		{
			"name": "BP_GetCamouflageStanceBlueprint",
			"returnType": "ScarCamouflageStancePBG",
			"parameters": [
				{"name": "pbgShortname", "type": "const char*", "optional": false}
			],
			"description": "Returns a camouflage stance property bag group. "
		},
		{
			"name": "BP_GetCriticalBlueprint",
			"returnType": "ScarCriticalPBG",
			"parameters": [
				{"name": "pbgShortname", "type": "const char*", "optional": false}
			],
			"description": "Returns a critical property bag group. "
		},
		{
			"name": "BP_GetEntityBlueprint",
			"returnType": "ScarEntityPBG",
			"parameters": [
				{"name": "pbgShortname", "type": "const char*", "optional": false}
			],
			"description": "Returns an entity property bag group. "
		},
		{
			"name": "BP_GetID",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "pbg", "type": "const PropertyBagGroup*", "optional": false}
			],
			"description": "Returns an ID that uniquely identifies this pbg "
		},
		{
			"name": "BP_GetMoveTypeBlueprint",
			"returnType": "ScarMoveTypePBG",
			"parameters": [
				{"name": "pbgShortname", "type": "const char*", "optional": false}
			],
			"description": "Returns a move type property bag group. "
		},
		{
			"name": "BP_GetName",
			"returnType": "const char*",
			"parameters": [
				{"name": "pbg", "type": "const PropertyBagGroup*", "optional": false}
			],
			"description": "Return the short name of the group \nExample name would be \"ally_mad_minute_ability\""
		},
		{
			"name": "BP_GetPropertyBagGroupCount",
			"returnType": "int",
			"parameters": [
				{"name": "type", "type": "LuaBinding::StackVar", "optional": false}
			],
			"description": "Return the number of property bag groups of the same type \nExample type would be PBG_Critical"
		},
		{
			"name": "BP_GetPropertyBagGroupPathName",
			"returnType": "const char*",
			"parameters": [
				{"name": "type", "type": "LuaBinding::StackVar", "optional": false},
				{"name": "index", "type": "size_t", "optional": false}
			],
			"description": "Return the path name of the group at the specified index \nExample name would be \"abilities\\ally_mad_minute_ability\""
		},
		{
			"name": "BP_GetSlotItemBlueprint",
			"returnType": "ScarSlotItemPBG",
			"parameters": [
				{"name": "pbgShortname", "type": "const char*", "optional": false}
			],
			"description": "Returns a slot item property bag group. "
		},
		{
			"name": "BP_GetSquadBlueprint",
			"returnType": "ScarSquadPBG",
			"parameters": [
				{"name": "pbgShortname", "type": "const char*", "optional": false}
			],
			"description": "Returns a squad property bag group. "
		},
		{
			"name": "BP_GetUpgradeBlueprint",
			"returnType": "ScarUpgradePBG",
			"parameters": [
				{"name": "pbgShortname", "type": "const char*", "optional": false}
			],
			"description": "Returns an upgrade property bag group. "
		},
		{
			"name": "BP_GetWeaponBlueprint",
			"returnType": "ScarWeaponPBG",
			"parameters": [
				{"name": "pbgShortname", "type": "const char*", "optional": false}
			],
			"description": "Returns a weapon property bag group. "
		},
		{
			"name": "EBP_Exists",
			"returnType": "bool",
			"parameters": [
				{"name": "pbgShortname", "type": "const char*", "optional": false}
			],
			"description": "Returns true if an entity blueprint exists with the given name. "
		},
		{
			"name": "SBP_Exists",
			"returnType": "bool",
			"parameters": [
				{"name": "pbgShortname", "type": "const char*", "optional": false}
			],
			"description": "Returns true if a squad blueprint exists with the given name. "
		},
		{
			"name": "Camera_CyclePositions",
			"returnType": "Void",
			"parameters": [
				{"name": "list[", "type": "Table", "optional": false},
				{"name": "pan", "type": "Boolean", "optional": false},
				{"name": "panRate", "type": "Float", "optional": false},
				{"name": "callback", "type": "ScarFn", "optional": false}
			],
			"description": "Moves the camera through a list of positions. "
		},
		{
			"name": "Camera_Follow",
			"returnType": "Void",
			"parameters": [
				{"name": "var", "type": "Variable", "optional": false}
			],
			"description": "Set the camera to follow an sgroup/squad/egroup/entity. \nThe camera will follow them until the player takes control again."
		},
		{
			"name": "Camera_MoveTo",
			"returnType": "Void",
			"parameters": [
				{"name": "var[", "type": "Variable", "optional": false},
				{"name": "pan", "type": "Boolean", "optional": false},
				{"name": "panRate", "type": "Float", "optional": false},
				{"name": "keepInputLocked", "type": "Boolean", "optional": false},
				{"name": "resetToDefault", "type": "Boolean", "optional": false}
			],
			"description": "Move the camera to an entity/marker/pos/egroup/sgroup/squad \nThis function canNOT be called through a CTRL object in NISlets."
		},
		{
			"name": "Camera_MoveToIfClose",
			"returnType": "Void",
			"parameters": [
				{"name": "var", "type": "Variable", "optional": false}
			],
			"description": "Slightly refocus the camera to rest on an entity/squad/squad/sgroup/egroup/pos/marker if it's close by. \nThis function can be called through a CTRL object in NISlets."
		},
		{
			"name": "Camera_SetDefault",
			"returnType": "Void",
			"parameters": [
				{"name": "height", "type": "Float", "optional": false},
				{"name": "declination", "type": "Float", "optional": false},
				{"name": "angle", "type": "Float", "optional": false}
			],
			"description": "Helper function to set the default camera parameters \nIf the parameter is nil, the particular property is not modified"
		},
		{
			"name": "Cmd_AbandonTeamWeapon",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupid[", "type": "SGroupID", "optional": false},
				{"name": "preserveCrew", "type": "Boolean", "optional": false},
				{"name": "queued", "type": "Boolean", "optional": false}
			],
			"description": "Order a squad group to abandon their current team weapon if they have it and they could (tuning value in attribute editor) "
		},
		{
			"name": "Cmd_Ability",
			"returnType": "Void",
			"parameters": [
				{"name": "user", "type": "PlayerID/EGroupID/SGroupID", "optional": false},
				{"name": "blueprint", "type": "AbilityBlueprint", "optional": false},
				{"name": "target", "type": "Position/SGroupID/EGroupID", "optional": true},
				{"name": "direction", "type": "Position", "optional": true},
				{"name": "skipCostPrereq", "type": "Bool", "optional": true},
				{"name": "queued", "type": "Bool", "optional": true}
			],
			"description": "Sends an ability command to a player, egroup or sgroup. extra parameters are provided if the ability requires them. "
		},
		{
			"name": "Cmd_AttachSquads",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "sgroupAttachee", "type": "SGroupID", "optional": false}
			],
			"description": "Attach the squad from sgroupnameAttachee to sgroupname.  Both SGroups must contain only one squad. "
		},
		{
			"name": "Cmd_Attack",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "target[", "type": "SGroup/EGroup/Pos/Marker", "optional": false},
				{"name": "queued", "type": "Boolean", "optional": false},
				{"name": "stationary", "type": "Boolean", "optional": false},
				{"name": "plan", "type": "String", "optional": false}
			],
			"description": "Issues an attack command to an SGroup "
		},
		{
			"name": "Cmd_AttackMove",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "targetposition[", "type": "Position", "optional": false},
				{"name": "queued", "type": "Boolean", "optional": false},
				{"name": "plan", "type": "String", "optional": false},
				{"name": "coverSearchRadius", "type": "Real", "optional": false},
				{"name": "deleteWhenNearMarker", "type": "MarkerID", "optional": false}
			],
			"description": "Order a squad group to attack move to a position (anything whose position can be queried). can be queued, can follow a plan, can search for cover within a radius "
		},
		{
			"name": "Cmd_AttackMoveThenCapture",
			"returnType": "Void",
			"parameters": [
				{"name": "attacker", "type": "SGroupID", "optional": false},
				{"name": "target", "type": "EGroupID", "optional": false},
				{"name": "", "type": "!Boolean!queued", "optional": true}
			],
			"description": "Command attacker sgroup to attack move to strategic point target; when it is capturable, the sgroup would capture it "
		},
		{
			"name": "Cmd_CaptureTeamWeapon",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupid", "type": "SGroupID", "optional": false},
				{"name": "targetid", "type": "EGroupID", "optional": false},
				{"name": "queued", "type": "Boolean", "optional": true}
			],
			"description": "Order a squad group to capture team weapon entity group. "
		},
		{
			"name": "Cmd_Construct",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupid", "type": "SGroup", "optional": false},
				{"name": "blueprint", "type": "Entity", "optional": false},
				{"name": "targetid[", "type": "EGroupID/Position/Marker", "optional": false},
				{"name": "Facing", "type": "Position", "optional": false},
				{"name": "queued", "type": "Boolean", "optional": false}
			],
			"description": "Orders a squad to contruct a building at specified position, or to continue construction on an existing building. \nThe command also checks to see if a building already exists at the location, and the squad will continue building it, if it is of the correct type."
		},
		{
			"name": "Cmd_CriticalHit",
			"returnType": "Void ",
			"parameters": [
				{"name": "playerid", "type": "PlayerID", "optional": false},
				{"name": "target", "type": "SGroupID/EGroupID/Squad/Entity", "optional": false},
				{"name": "criticalid", "type": "CriticalID", "optional": false},
				{"name": "removeAtHealth", "type": "Real", "optional": false}
			],
			"description": "Applies critical hit to entity/squad/sgroup/egroup \nPlayer id doesn't have to be the owner as the applied entities but need to make sure the player is still alive"
		},
		{
			"name": "Cmd_DetonateDemolitions",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "target[", "type": "EGroupID", "optional": false},
				{"name": "queued", "type": "Boolean", "optional": false}
			],
			"description": "Detonates a building's demolitions "
		},
		{
			"name": "Cmd_EjectOccupants",
			"returnType": "Void",
			"parameters": [
				{"name": "fromgroupid[", "type": "EGroupID/SGroupID", "optional": false},
				{"name": "destination", "type": "Position", "optional": false},
				{"name": "queued", "type": "Boolean", "optional": false}
			],
			"description": "Orders an EGroup or SGroup to kick out its occupants. If no position is specified, the occupants stay at the exit. "
		},
		{
			"name": "Cmd_Garrison",
			"returnType": "EntityID or SquadID id of the destination",
			"parameters": [
				{"name": "fromsgroupid", "type": "SGroupID", "optional": false},
				{"name": "togroupid", "type": "EGroupID/SGroupID", "optional": false},
				{"name": "overload", "type": "Bool", "optional": true},
				{"name": "queued", "type": "Bool", "optional": true},
				{"name": "instant", "type": "Bool", "optional": true}
			],
			"description": "Order a squad group to load at a random entity or squad of the group \noverload is a flag that will allow the hold entity to ignore maximum slot check"
		},
		{
			"name": "Cmd_InstantReinforceUnit",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "count", "type": "Integer", "optional": false}
			],
			"description": "Sends a instant reinforce command to all squads in a group.  count represents the number of commands to send. \nNote: This function bypasses pre-reqs, costs and the production queue"
		},
		{
			"name": "Cmd_InstantReinforceUnitPos",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "count", "type": "Integer", "optional": false},
				{"name": "spawnlocation[", "type": "MarkerID/Pos", "optional": false},
				{"name": "checktype[", "type": "Integer", "optional": false},
				{"name": "failtype", "type": "Integer", "optional": false}
			],
			"description": "Sends a instant reinforce command to all squads in a group.  count represents the number of commands to send. spawnlocation is where the reinforced unit will spawn. You can optionally find a hidden position by specifying a checktype (CHECK_OFFCAMERA, CHECK_IN_FOW or CHECK_BOTH), and what to do if a hidden position can't be found (SPAWN_ATMARKER, SPAWN_ATSQUAD, or DO_NOTHING) - SPAWN_ATMARKER is the default. \nNote: This function bypasses pre-reqs and costs and the production queue"
		},
		{
			"name": "Cmd_InstantSetupTeamWeapon",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupid", "type": "SGroupID", "optional": false},
				{"name": "queued", "type": "Boolean", "optional": true}
			],
			"description": "Order a squad group to instant setup their team weapon "
		},
		{
			"name": "Cmd_InstantUpgrade",
			"returnType": "Void",
			"parameters": [
				{"name": "target", "type": "PlayerID/EGroupID/SGroupID", "optional": false},
				{"name": "blueprint[", "type": "UpgradeBlueprint/Table", "optional": false},
				{"name": "count", "type": "Integer", "optional": false}
			],
			"description": "Sends an instant upgrade command to a player, egroup or sgroup. accepts a single upgrade or table of upgrades. "
		},
		{
			"name": "Cmd_Move",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "position", "type": "Pos/SGroupID/EGroupID/MarkerID", "optional": false},
				{"name": "queued", "type": "Boolean", "optional": true},
				{"name": "deleteWhenNearMarker", "type": "MarkerID", "optional": true},
				{"name": "facing", "type": "Position", "optional": true},
				{"name": "offset", "type": "Integer", "optional": true},
				{"name": "distance", "type": "Real", "optional": true},
				{"name": "coverSearchRadius", "type": "Real", "optional": true}
			],
			"description": "Move a squad group to a given position. \nSupports facing, 'offset' movement, and can find cover. The sgroup can be deleted when in proximity of a marker (it assumes a proximity of 5 if you forget to set one on the marker)"
		},
		{
			"name": "Cmd_MoveAwayFromPos",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "position", "type": "Pos", "optional": false},
				{"name": "radius", "type": "Int", "optional": false},
				{"name": "queued", "type": "Boolean", "optional": true}
			],
			"description": "Move a squad group out of a position to a certain radius \nAll squads in the group will move away from the centre position from its current position"
		},
		{
			"name": "Cmd_MoveToAndDespawn",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "marker", "type": "MarkerID", "optional": false},
				{"name": "queued", "type": "boolean", "optional": false}
			],
			"description": "Moves a squad group to the indicated Marker and destroys it. "
		},
		{
			"name": "Cmd_MoveToClosestMarker",
			"returnType": "markerID",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "markertable", "type": "Table", "optional": false}
			],
			"description": "Moves a squad group to the closest marker in a list/table of MarkerIDs. "
		},
		{
			"name": "Cmd_MoveToThenCapture",
			"returnType": "Void",
			"parameters": [
				{"name": "attacker", "type": "SGroupID", "optional": false},
				{"name": "target", "type": "EGroupID", "optional": false},
				{"name": "", "type": "!Boolean!queued", "optional": true}
			],
			"description": "Command attacker sgroup to attack move to strategic point target; when it is capturable, the sgroup would capture it "
		},
		{
			"name": "Cmd_RecrewVehicle",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupid", "type": "SGroupID", "optional": false},
				{"name": "targetid", "type": "EGroupID", "optional": false},
				{"name": "queued", "type": "Boolean", "optional": true}
			],
			"description": "Order a squad group to recrew an abandoned vehicle. "
		},
		{
			"name": "Cmd_ReinforceUnit",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "count", "type": "Integer", "optional": false}
			],
			"description": "Sends a reinforce command to all squads in a group.  count represents the number of commands to send. \nNote: To reinforce squad bypassing the pre-reqs and costs use Cmd_InstantReinforceUnit."
		},
		{
			"name": "Cmd_ReinforceUnitPos",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "count", "type": "Integer", "optional": false},
				{"name": "spawnlocation[", "type": "MarkerID/Pos", "optional": false},
				{"name": "checktype[", "type": "Integer", "optional": false},
				{"name": "failtype", "type": "Integer", "optional": false}
			],
			"description": "Sends a reinforce command to all squads in a group.  count represents the number of commands to send. spawnlocation is where the reinforced unit will spawn. You can optionally find a hidden position by specifying a checktype (CHECK_OFFCAMERA, CHECK_IN_FOW or CHECK_BOTH), and what to do if a hidden position can't be found (SPAWN_ATMARKER, SPAWN_ATSQUAD, or DO_NOTHING) - SPAWN_ATMARKER is the default. \nTo reinforce squads bypassing the pre-reqs and costs use Cmd_InstantReinforceUnit "
		},
		{
			"name": "Cmd_Retreat",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup[", "type": "SGroupID", "optional": false},
				{"name": "location", "type": "Position", "optional": false},
				{"name": "deleteWhenNearMarker", "type": "MarkerID", "optional": false},
				{"name": "queued", "type": "Boolean", "optional": false},
				{"name": "saveEncountersk", "type": "Boolean", "optional": false},
				{"name": "vulnerableRetreat", "type": "Boolean", "optional": false}
			],
			"description": "Order a squad group to retreat, optionally to a specific location. The sgroup can be deleted when in proximity of a marker (it assumes a proximity of 5 if you forget to set one on the marker) \nvulnerableRetreat will make retreating squads take more damage"
		},
		{
			"name": "Cmd_RevertOccupiedBuilding",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupid", "type": "SGroupID", "optional": false},
				{"name": "targetid", "type": "EGroupID", "optional": false},
				{"name": "queued", "type": "Boolean", "optional": true}
			],
			"description": "Order a squad group to revert occupied building "
		},
		{
			"name": "Cmd_SetDemolitions",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupid", "type": "SGroupID", "optional": false},
				{"name": "targetid[", "type": "EGroupID", "optional": false},
				{"name": "skipCostPrereq", "type": "Boolean", "optional": false},
				{"name": "queued", "type": "Boolean", "optional": false}
			],
			"description": "Orders a squad group to place demolition charges on a building (egroup). Function does nothing if egroup cannot be detonated, or player can't afford the demolitions "
		},
		{
			"name": "Cmd_SquadCamouflageStance",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "stanceid", "type": "CamouflageStanceID", "optional": false}
			],
			"description": "Sends an camouflage stance command to all squads in a group.  stanceid should be the number returned by Util_GetCamouflageStanceID( stancename ) "
		},
		{
			"name": "Cmd_SquadPath",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "pathName", "type": "String", "optional": false},
				{"name": "bFromClosest", "type": "Boolean", "optional": false},
				{"name": "loop", "type": "Integer", "optional": false},
				{"name": "bAttackMove", "type": "Boolean", "optional": false},
				{"name": "pauseTime[", "type": "Float", "optional": false},
				{"name": "deleteWhenNearMarker", "type": "MarkerID", "optional": false},
				{"name": "queued", "type": "Boolean", "optional": false},
				{"name": "bMoveForward", "type": "Boolean", "optional": false}
			],
			"description": "Send a command to the squad to follow a path. Can wait at each waypoint. The sgroup can be deleted when in proximity of a marker if you pass in the marker as the 7th argument (it assumes a proximity of 5 if you forget to set one on the marker) \nloop can be: LOOP_NONE, LOOP_NORMAL, LOOP_TOGGLE_DIRECTION"
		},
		{
			"name": "Cmd_SquadPatrolMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "marker", "type": "MarkerID", "optional": false}
			],
			"description": "Causes a squad to patrol a marker attacking any enemies that come within its radius. If used on circular markers, the radius must be at least 5. To stop the squad from patrolling the marker, use Cmd_Stop. "
		},
		{
			"name": "Cmd_StaggeredRetreat",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "markers", "type": "Table", "optional": false},
				{"name": "maxTries", "type": "Integer", "optional": true},
				{"name": "vulnerableRetreat", "type": "Boolean", "optional": true}
			],
			"description": "Retreats large numbers of units in a staggered, realistic manner. \nvulnerableRetreat will make retreating squads take more damage"
		},
		{
			"name": "Cmd_Stop",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "EGroupID/SGroupID", "optional": false}
			],
			"description": "Sends a stop command to egroup or sgroup. "
		},
		{
			"name": "Cmd_Surrender",
			"returnType": "Void",
			"parameters": [
				{"name": "[", "type": "SGroup!sgroupid", "optional": false},
				{"name": "actionpoints", "type": "Integer", "optional": false},
				{"name": "exitpos", "type": "Position", "optional": false},
				{"name": "deleteAtExit", "type": "Boolean", "optional": false},
				{"name": "removeWeapon", "type": "Boolean", "optional": false}
			],
			"description": "Orders a squad to surrender and awards the local player with an appropriate number of action points \nThe command will also overwrite the exit position as well, if you do not want the squads to exit at the map entry point."
		},
		{
			"name": "Cmd_UngarrisonSquad",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupid[", "type": "SGroupID", "optional": false},
				{"name": "destination", "type": "Position", "optional": false},
				{"name": "queued", "type": "Boolean", "optional": false}
			],
			"description": "Orders an sgroup to exit the building or vehicle that it's in. If no position is specified, the sgroup stays at the exit. "
		},
		{
			"name": "Cmd_Upgrade",
			"returnType": "Void",
			"parameters": [
				{"name": "user", "type": "PlayerID/EGroupID/SGroupID", "optional": false},
				{"name": "blueprint[", "type": "UpgradeBlueprint/Table", "optional": false},
				{"name": "count", "type": "Integer", "optional": false},
				{"name": "instant", "type": "Boolean", "optional": false}
			],
			"description": "Sends an upgrade command to a player, egroup or sgroup. accepts a single upgrade or table of upgrades. "
		},
		{
			"name": "Command_Entity",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "entityCommand", "type": "<a href=\"enum_list.htm#EntityCommandType\">EntityCommandType</a>", "optional": false}
			],
			"description": " Send a entity command to a entity group(CMD_DefaultAction, CMD_Stop, CMD_Destroy, CMD_BuildSquad, CMD_CancelProduction, CMD_RallyPoint, CMD_AttackForced) \n Entity commands are mostly used for buildings etc.  If you need to issue commands to units, use the Squad_Command function."
		},
		{
			"name": "Command_EntityAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "abilityPBG", "type": "ScarAbilityPBG", "optional": false},
				{"name": "skipCostPrereq", "type": "bool", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send an entity ability command (CMD_Ability) to an entity "
		},
		{
			"name": "Command_EntityBuildSquad",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "squadPbg", "type": "ScarSquadPBG", "optional": false}
			],
			"description": " Send a squad command to a entity group with custom data "
		},
		{
			"name": "Command_EntityEntity",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "entityCommand", "type": "<a href=\"enum_list.htm#EntityCommandType\">EntityCommandType</a>", "optional": false},
				{"name": "target", "type": "EGroup*", "optional": false}
			],
			"description": "Send a entity-based command to an entity group. \n Use this function to issue orders that require a entity to an entity group (eg. order a building to attack another building)&lt;BR/&gt; See Command_Entity for a list of all the possible entityCommands."
		},
		{
			"name": "Command_EntityExt",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "entityCommand", "type": "<a href=\"enum_list.htm#EntityCommandType\">EntityCommandType</a>", "optional": false},
				{"name": "cmdparam", "type": "uint32_t", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": " Send a squad command to a squad group with custom data "
		},
		{
			"name": "Command_EntityPos",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "entityCommand", "type": "<a href=\"enum_list.htm#EntityCommandType\">EntityCommandType</a>", "optional": false},
				{"name": "target", "type": "ScarPosition", "optional": false}
			],
			"description": "Send a position command to an entity group. \n Use this function to issue orders that require a position to an entity group (eg. set a rally point for a building)&lt;BR/&gt; See Command_Entity for a list of all the possible entityCommands."
		},
		{
			"name": "Command_EntityPosAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "abilityPBG", "type": "ScarAbilityPBG", "optional": false},
				{"name": "skipCostPrereq", "type": "bool", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send a positional ability command (CMD_Ability) to an entity \n Use this function to issue ability orders that require a position to player"
		},
		{
			"name": "Command_EntityPosDirAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "dir", "type": "ScarPosition", "optional": false},
				{"name": "abilityPBG", "type": "ScarAbilityPBG", "optional": false},
				{"name": "skipCostPrereq", "type": "bool", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send a positional/directional ability command (CMD_Ability) to an entity \n Use this function to issue ability orders that require a position and a direction to player"
		},
		{
			"name": "Command_EntityPosSquad",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "entityCommand", "type": "<a href=\"enum_list.htm#EntityCommandType\">EntityCommandType</a>", "optional": false},
				{"name": "target", "type": "ScarPosition", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false}
			],
			"description": "Send a dual target (position and squad) command to an entity group. \n Use this function to issue orders that require a position and a squad to an entity group (eg. unloading squad from hold)&lt;BR/&gt; See Command_Entity for a list of all the possible entityCommands."
		},
		{
			"name": "Command_EntitySquad",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "entityCommand", "type": "<a href=\"enum_list.htm#EntityCommandType\">EntityCommandType</a>", "optional": false},
				{"name": "target", "type": "SGroup*", "optional": false}
			],
			"description": "Send a squad-based command to an entity group. \n Use this function to issue orders that require a squad to an entity group (eg. order a building to attack a squad)&lt;BR/&gt; See Command_Entity for a list of all the possible entityCommands."
		},
		{
			"name": "Command_EntityTargetEntityAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "entityTarget", "type": "Entity*", "optional": false},
				{"name": "abilityPBG", "type": "ScarAbilityPBG", "optional": false},
				{"name": "skipCostPrereq", "type": "bool", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send an entity-targeting ability command (CMD_Ability) to an entity \n Use this function to issue ability orders that require an entity target to an entity"
		},
		{
			"name": "Command_EntityTargetSquadAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "squadTarget", "type": "Squad*", "optional": false},
				{"name": "abilityPBG", "type": "ScarAbilityPBG", "optional": false},
				{"name": "skipCostPrereq", "type": "bool", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send an squad-targeting ability command (CMD_Ability) to an entity \n Use this function to issue ability orders that require an entity target to an entity"
		},
		{
			"name": "Command_EntityUpgrade",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "upgrade", "type": "ScarUpgradePBG", "optional": false},
				{"name": "instant", "type": "bool", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": " Send a squad command to a entity group with custom data "
		},
		{
			"name": "Command_Player",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "dest", "type": "Player*", "optional": false},
				{"name": "playerCommand", "type": "<a href=\"enum_list.htm#PlayerCommandType\">PlayerCommandType</a>", "optional": false}
			],
			"description": " Send a player command to a player \n PCMD_Ability"
		},
		{
			"name": "Command_PlayerAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "dest", "type": "Player*", "optional": false},
				{"name": "abilityPBG", "type": "ScarAbilityPBG", "optional": false},
				{"name": "skipCostPrereq", "type": "bool", "optional": false}
			],
			"description": "Send a player ability command (PCMD_Ability) to a player "
		},
		{
			"name": "Command_PlayerEntity",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "dest", "type": "Player*", "optional": false},
				{"name": "playerCommand", "type": "<a href=\"enum_list.htm#PlayerCommandType\">PlayerCommandType</a>", "optional": false},
				{"name": "target", "type": "EGroup*", "optional": false}
			],
			"description": "Send an entity command to a player. "
		},
		{
			"name": "Command_PlayerEntityCriticalHit",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "playerCommand", "type": "<a href=\"enum_list.htm#PlayerCommandType\">PlayerCommandType</a>", "optional": false},
				{"name": "criticalPBG", "type": "ScarCriticalPBG", "optional": false},
				{"name": "removeAtHealth", "type": "float", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": " Send a player command to itself to act upon single with custom parameter and index data (PCMD_CriticalHit) \n This is a special command for SCAR and debug feature"
		},
		{
			"name": "Command_PlayerExt",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "dest", "type": "Player*", "optional": false},
				{"name": "playerCommand", "type": "<a href=\"enum_list.htm#PlayerCommandType\">PlayerCommandType</a>", "optional": false},
				{"name": "cmdparam", "type": "uint32_t", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": " Send a player command to a player with a custom flag "
		},
		{
			"name": "Command_PlayerPos",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "dest", "type": "Player*", "optional": false},
				{"name": "playerCommand", "type": "<a href=\"enum_list.htm#PlayerCommandType\">PlayerCommandType</a>", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false}
			],
			"description": "Send a position command to a player. \n Use this function to issue orders that require a position to player)&lt;BR/&gt; See Command_Player for a list of all the possible playerCommands."
		},
		{
			"name": "Command_PlayerPosAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "dest", "type": "Player*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "abilityPBG", "type": "ScarAbilityPBG", "optional": false},
				{"name": "skipCostPrereq", "type": "bool", "optional": false}
			],
			"description": "Send a positional ability command (PCMD_Ability) to a player \n Use this function to issue ability orders that require a position to player"
		},
		{
			"name": "Command_PlayerPosDirAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "dest", "type": "Player*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "dir", "type": "ScarPosition", "optional": false},
				{"name": "abilityPBG", "type": "ScarAbilityPBG", "optional": false},
				{"name": "skipCostPrereq", "type": "bool", "optional": false}
			],
			"description": "Send a positional/directional ability command (PCMD_Ability) to a player \n Use this function to issue ability orders that require a position and a direction to player"
		},
		{
			"name": "Command_PlayerPosExt",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "dest", "type": "Player*", "optional": false},
				{"name": "playerCommand", "type": "<a href=\"enum_list.htm#PlayerCommandType\">PlayerCommandType</a>", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "cmdparam", "type": "uint32_t", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send a position command to a player with extra info \n Use this function to issue orders that require a position to player&lt;BR/&gt; See Command_Player for a list of all the possible playerCommands."
		},
		{
			"name": "Command_PlayerSquadConstructBuilding",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "ebp", "type": "ScarEntityPBG", "optional": false},
				{"name": "position", "type": "ScarPosition", "optional": false},
				{"name": "facing", "type": "ScarPosition", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": " Send a player command to itself to order squads in the sgroup to construct the building at specific position and facing \nstructureBlueprint must be a valid building that can be constructed by the sgroup. This building would cost nothing and does not effect population and availability This is a special command for SCAR use"
		},
		{
			"name": "Command_PlayerSquadConstructFence",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "ebp", "type": "ScarEntityPBG", "optional": false},
				{"name": "posStart", "type": "ScarPosition", "optional": false},
				{"name": "posEnd", "type": "ScarPosition", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": " Send a player command to itself to order squads in the sgroup to construct fences from posStart to posEnd \nstructureBlueprint must be a valid building that can be constructed by the sgroup. This building would cost nothing and does not effect population and availability This is a special command for SCAR use"
		},
		{
			"name": "Command_PlayerSquadConstructField",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "ebp", "type": "ScarEntityPBG", "optional": false},
				{"name": "posStart", "type": "ScarPosition", "optional": false},
				{"name": "posEnd", "type": "ScarPosition", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": " Send a player command to itself to order squads in the sgroup to construct a field ranging from posStart to posEnd \nstructureBlueprint must be a valid building that can be constructed by the sgroup. This building would cost nothing and does not effect population and availability This is a special command for SCAR use"
		},
		{
			"name": "Command_PlayerSquadCriticalHit",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "playerCommand", "type": "<a href=\"enum_list.htm#PlayerCommandType\">PlayerCommandType</a>", "optional": false},
				{"name": "criticalPBG", "type": "ScarCriticalPBG", "optional": false},
				{"name": "removeAtHealth", "type": "float", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": " Send a player command to itself to act upon all entities in the sgroup with custom parameter and index data (PCMD_CriticalHit) \n This is a special command for SCAR &amp; debug use"
		},
		{
			"name": "Command_PlayerUpgrade",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "upgrade", "type": "ScarUpgradePBG", "optional": false},
				{"name": "instant", "type": "bool", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Sends an upgrade command to a player "
		},
		{
			"name": "Command_Squad",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "squadCommand", "type": "<a href=\"enum_list.htm#SquadCommandType\">SquadCommandType</a>", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": " Send a squad command to a squad group \n SCMD_DefaultAction, SCMD_Move, SCMD_Stop, SCMD_Destroy, SCMD_BuildStructure, SCMD_Capture, SCMD_Attack, SCMD_ReinforceUnit,  SCMD_Upgrade, SCMD_CancelProduction SCMD_AttackMove, SCMD_Ability SCMD_Load,SCMD_UnloadSquads, SCMD_DoPlan SCMD_SlotItemRemove, SCMD_InstantReinforceUnit, SCMD_InstantUpgrade"
		},
		{
			"name": "Command_SquadAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "abilityPBG", "type": "ScarAbilityPBG", "optional": false},
				{"name": "skipCostPrereq", "type": "bool", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send a ability command (SCMD_Ability) to a squad "
		},
		{
			"name": "Command_SquadAttackMovePos",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "squadCommand", "type": "<a href=\"enum_list.htm#SquadCommandType\">SquadCommandType</a>", "optional": false},
				{"name": "target", "type": "ScarPosition", "optional": false},
				{"name": "planName", "type": "const char*", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send a position ATTACK MOVE command to a squad group with custom data "
		},
		{
			"name": "Command_SquadDoCustomPlan",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "planFile", "type": "const char*", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send a custom squad AI plan command to the squad to execute the plan specified towards the position "
		},
		{
			"name": "Command_SquadDoCustomPlanTarget",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "planFile", "type": "const char*", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send a custom squad AI plan command to the squad to execute the plan specified towards the position "
		},
		{
			"name": "Command_SquadEntity",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "squadCommand", "type": "<a href=\"enum_list.htm#SquadCommandType\">SquadCommandType</a>", "optional": false},
				{"name": "target", "type": "EGroup*", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send an entity command to a squad group. \n Use this function to isssue an entity-based command to a squad group.&lt;BR/&gt; See Command_Squad for a list of all the possible squadCommands"
		},
		{
			"name": "Command_SquadEntityAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "target", "type": "EGroup*", "optional": false},
				{"name": "abilityPBG", "type": "ScarAbilityPBG", "optional": false},
				{"name": "skipCostPrereq", "type": "bool", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send a entity ability command (SCMD_Ability) to a squad "
		},
		{
			"name": "Command_SquadEntityAttack",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "target", "type": "EGroup*", "optional": false},
				{"name": "bCheckFOW", "type": "bool", "optional": false},
				{"name": "bStationary", "type": "bool", "optional": false},
				{"name": "planName", "type": "const char*", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send an entity command ATTACK to a squad group. \n Use this function to issue an entity-based command to a squad group with custom FOW check flag. (eg. order a squad to attack a building)&lt;BR/&gt; planName is the name of the custom plan file to execute. Pass in empty string to use the default&lt;BR/&gt; stationary flag uses SCMD_StationaryAttack instead where plan file is ignored and squad does not pursue its target See Command_Squad for a list of all the possible squadCommands"
		},
		{
			"name": "Command_SquadEntityBool",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "squadCommand", "type": "<a href=\"enum_list.htm#SquadCommandType\">SquadCommandType</a>", "optional": false},
				{"name": "target", "type": "EGroup*", "optional": false},
				{"name": "cmdparam", "type": "bool", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send a entity command to a squad group with custom BOOLEAN data "
		},
		{
			"name": "Command_SquadEntityExt",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "squadCommand", "type": "<a href=\"enum_list.htm#SquadCommandType\">SquadCommandType</a>", "optional": false},
				{"name": "target", "type": "EGroup*", "optional": false},
				{"name": "cmdparam", "type": "uint32_t", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send a entity command to a squad group with custom data "
		},
		{
			"name": "Command_SquadEntityLoad",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "squadCommand", "type": "<a href=\"enum_list.htm#SquadCommandType\">SquadCommandType</a>", "optional": false},
				{"name": "target", "type": "EGroup*", "optional": false},
				{"name": "bOverLoad", "type": "bool", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send special squad command to a squad group with squad load parameters \n This is a special command for loading squads into building (entity) holds (SCMD_Load, SCMD_InstantLoad)"
		},
		{
			"name": "Command_SquadExt",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "squadCommand", "type": "<a href=\"enum_list.htm#SquadCommandType\">SquadCommandType</a>", "optional": false},
				{"name": "cmdparam", "type": "uint32_t", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": " Send a squad command to a squad group with custom data "
		},
		{
			"name": "Command_SquadMovePos",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "target", "type": "ScarPosition", "optional": false},
				{"name": "queued", "type": "bool", "optional": false},
				{"name": "reverseMove", "type": "bool", "optional": false}
			],
			"description": "Send a move to position command for a squad group. \n Use this function to issue move orders that require a position to a squad group"
		},
		{
			"name": "Command_SquadMovePosFacing",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "target", "type": "ScarPosition", "optional": false},
				{"name": "facing", "type": "ScarPosition", "optional": false},
				{"name": "queued", "type": "bool", "optional": false},
				{"name": "reverseMove", "type": "bool", "optional": false}
			],
			"description": "Send a move-facing command to a squad group "
		},
		{
			"name": "Command_SquadPos",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "squadCommand", "type": "<a href=\"enum_list.htm#SquadCommandType\">SquadCommandType</a>", "optional": false},
				{"name": "target", "type": "ScarPosition", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send a position command to a squad group. \n Use this function to issue orders that require a position to a squad group (eg. order a squad to move to position, or attack position)&lt;BR/&gt; See Command_Squad for a list of all the possible squadCommands."
		},
		{
			"name": "Command_SquadPosAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "abilityPBG", "type": "ScarAbilityPBG", "optional": false},
				{"name": "skipCostPrereq", "type": "bool", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send a positional ability command (SCMD_Ability) to a squad "
		},
		{
			"name": "Command_SquadPosExt",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "squadCommand", "type": "<a href=\"enum_list.htm#SquadCommandType\">SquadCommandType</a>", "optional": false},
				{"name": "target", "type": "ScarPosition", "optional": false},
				{"name": "cmdparam", "type": "uint32_t", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send a position command to a squad group with custom data "
		},
		{
			"name": "Command_SquadPositionAttack",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "target", "type": "ScarPosition", "optional": false},
				{"name": "bCheckFOW", "type": "bool", "optional": false},
				{"name": "bStationary", "type": "bool", "optional": false},
				{"name": "planName", "type": "const char*", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send an position command ATTACK to a squad group. \n Use this function to issue an position-based command to a squad group with custom FOW check flag. (eg. order a squad to attack a building)&lt;BR/&gt; planName is the name of the custom plan file to execute. Pass in empty string to use the default&lt;BR/&gt; stationary flag uses SCMD_StationaryAttack instead where plan file is ignored and squad does not pursue its target See Command_Squad for a list of all the possible squadCommands"
		},
		{
			"name": "Command_SquadSquad",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "squadCommand", "type": "<a href=\"enum_list.htm#SquadCommandType\">SquadCommandType</a>", "optional": false},
				{"name": "target", "type": "SGroup*", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send an squad-based command to a squad group. \n Use this function to issue a squad-based command to a squad group. &lt;BR/&gt; See Command_Squad for a list of all the possible squadCommands"
		},
		{
			"name": "Command_SquadSquadAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "target", "type": "SGroup*", "optional": false},
				{"name": "abilityPBG", "type": "ScarAbilityPBG", "optional": false},
				{"name": "skipCostPrereq", "type": "bool", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send a squad ability command (SCMD_Ability) to a squad "
		},
		{
			"name": "Command_SquadSquadAttack",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "target", "type": "SGroup*", "optional": false},
				{"name": "bCheckFOW", "type": "bool", "optional": false},
				{"name": "bStationary", "type": "bool", "optional": false},
				{"name": "planName", "type": "const char*", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send an squad-based command to a squad group. \n Use this function to issue a squad-based command to a squad group with special boolean flag. (eg. order a squad to attack another squad)&lt;BR/&gt; If bCheckFOW is set to false, the squad would be able to attack other squads hidden in FOW &lt;BR/&gt; planName is the name of the custom plan file to execute. Pass in empty string to use the default&lt;BR/&gt; stationary flag uses SCMD_StationaryAttack instead where plan file is ignored and squad does not pursue its target See Command_Squad for a list of all the possible squadCommands"
		},
		{
			"name": "Command_SquadSquadExt",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "squadCommand", "type": "<a href=\"enum_list.htm#SquadCommandType\">SquadCommandType</a>", "optional": false},
				{"name": "target", "type": "SGroup*", "optional": false},
				{"name": "cmdparam", "type": "uint32_t", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send a squad command to a squad group with custom data "
		},
		{
			"name": "Command_SquadSquadLoad",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "squadCommand", "type": "<a href=\"enum_list.htm#SquadCommandType\">SquadCommandType</a>", "optional": false},
				{"name": "target", "type": "SGroup*", "optional": false},
				{"name": "bOverLoad", "type": "bool", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Send special squad command to a squad group with squad load parameters \n This is a special command for loading squads into vehicle (squad) holds (SCMD_Load, SCMD_InstantLoad)"
		},
		{
			"name": "Command_SquadUpgrade",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "upgrade", "type": "ScarUpgradePBG", "optional": false},
				{"name": "instant", "type": "bool", "optional": false},
				{"name": "queued", "type": "bool", "optional": false}
			],
			"description": "Sends an upgrade command to a squad group. "
		},
		{
			"name": "AutoCinematic",
			"returnType": "Void",
			"parameters": [
				{"name": "in/out", "type": "Boolean", "optional": false},
				{"name": "seconds", "type": "Real", "optional": false}
			],
			"description": "Toggles all cinematic related settings. true = go to cinematic, false = go back to normal "
		},
		{
			"name": "AutoReinforce_AddSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "origin", "type": "Variable", "optional": false}
			],
			"description": "Adds an SGroup to the auto-reinforce functions "
		},
		{
			"name": "AutoReinforce_RemoveAll",
			"returnType": "Void",
			"parameters": [
				{"name": "", "type": "", "optional": false}
			],
			"description": "Stops monitoring all squads from the auto-reinforce functions "
		},
		{
			"name": "AutoReinforce_RemoveSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false}
			],
			"description": "Removes an SGroup from the auto-reinforce functions "
		},
		{
			"name": "AutoRetreat_AddSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "destination[", "type": "MarkerID/Position/EGroupID", "optional": false},
				{"name": "threshold", "type": "Real", "optional": false},
				{"name": "onTrigger", "type": "LuaFunction", "optional": false}
			],
			"description": "Sets an sgroup to retreat to the given destination or building once pinned for a certain duration, or reduced to a third of it's original size \nThe optional threshold value should be a percentage (between 0.0 and 1.0) - when the member count drops below this, they retreat"
		},
		{
			"name": "AutoRetreat_RemoveAll",
			"returnType": "Void",
			"parameters": [
				{"name": "", "type": "", "optional": false}
			],
			"description": "Stops monitoring all squads from the auto-retreat functions "
		},
		{
			"name": "AutoRetreat_RemoveSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false}
			],
			"description": "Removes a squad from being monitored by the auto-retreat functions "
		},
		{
			"name": "BridgeTerritory_Add",
			"returnType": "Void",
			"parameters": [
				{"name": "bridge_egroup", "type": "EGroupID", "optional": false},
				{"name": "bridgepoint", "type": "EGroupID", "optional": false},
				{"name": "bank1point", "type": "EGroupID", "optional": false},
				{"name": "bank2point", "type": "EGroupID", "optional": false}
			],
			"description": "Add a bridge to the Bridge Territory Manager.  \nbridgepoint, bank1point and bank2point should be egroups each containing one territory flag\n<em>References: </em><a href=\"http://relicjira.thqinc.com/confluence/display/COHXP/Bridge+Territory+Manager\" target=\"_blank\">[Bridge+Territory+Manager]</a>"
		},
		{
			"name": "Ceasefire_AddSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup[", "type": "SGroupID", "optional": false},
				{"name": "function", "type": "LuaFunction", "optional": false}
			],
			"description": "Stops an SGroup from auto-targetting, until one of their members is explicity given an attack order or Ceasefire_RemoveSGroup() is called (at which point they all start firing again) \nYou can optionally specify a function that will be called when the ceasefire is broken by the game (rather than by calling Ceasefire_RemoveSGroup)"
		},
		{
			"name": "Ceasefire_RemoveSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false}
			],
			"description": "Removes the ceasefire effect from an sgroup. This may already have been removed by issuing an attack order directly to the group. "
		},
		{
			"name": "FireTargettingArtillery",
			"returnType": "Void",
			"parameters": [
				{"name": "caster", "type": "SGroupID/Player", "optional": false},
				{"name": "target", "type": "SGroupID", "optional": false},
				{"name": "targettingData", "type": "Table", "optional": false}
			],
			"description": "Uses targettingData to determine if a target has moved or not and progressively homes-in on it. \nSee DesignerLib.scar for details on targettingData values."
		},
		{
			"name": "Game_DefaultGameRestore",
			"returnType": "Void",
			"parameters": [
				{"name": "", "type": "", "optional": false}
			],
			"description": "Restores various aspects of the single player game after loading a mission from a save game "
		},
		{
			"name": "Game_GetGameRestoreCallbackExists",
			"returnType": "Void",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false}
			],
			"description": "Checks whether a callback  "
		},
		{
			"name": "Game_RemoveGameRestoreCallback",
			"returnType": "Void",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false}
			],
			"description": "Removes a callback from being called on game restore "
		},
		{
			"name": "Game_SetGameRestoreCallback",
			"returnType": "Void",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false}
			],
			"description": "Adds a function and set of arguments to be automatically called during restore from a saved game. Maxiumum of 9 parameters. Callback will be called like this: Callback(arg[1], arg[2], ...) "
		},
		{
			"name": "Resources_Disable",
			"returnType": "Void",
			"parameters": [
				{"name": "", "type": "", "optional": false}
			],
			"description": "Disables any resource income - useful to stop resources accruing during the opening movie "
		},
		{
			"name": "Resources_Enable",
			"returnType": "Void",
			"parameters": [
				{"name": "", "type": "", "optional": false}
			],
			"description": "Re-enables resource income.  "
		},
		{
			"name": "ShootTheSky_AddSyncWeapon",
			"returnType": "Void",
			"parameters": [
				{"name": "syncweapon", "type": "SyncWeaponID", "optional": false},
				{"name": "player", "type": "PlayerID", "optional": false}
			],
			"description": "Forces a sync weapon to shoot at the sky, so long as it's manned by a given player. "
		},
		{
			"name": "ShootTheSky_RemoveAll",
			"returnType": "Void",
			"parameters": [
				{"name": "", "type": "", "optional": false}
			],
			"description": "Stops all sync weapons from going through their \"shooting at the sky\" routine. "
		},
		{
			"name": "ShootTheSky_RemoveSyncWeapon",
			"returnType": "Void",
			"parameters": [
				{"name": "syncweapon", "type": "SyncWeaponID", "optional": false}
			],
			"description": "Removes a sync weapon from the \"shoot at the sky\" system. It can then target people again. "
		},
		{
			"name": "SmokeEntrance_Do",
			"returnType": "Void",
			"parameters": [
				{"name": "marker", "type": "MarkerID", "optional": false}
			],
			"description": "Triggers smoke to come in from the map edge, at the position and direction of the given marker "
		},
		{
			"name": "Table_Contains",
			"returnType": "Boolean",
			"parameters": [
				{"name": "OriginalTable", "type": "LuaTable", "optional": false},
				{"name": "item", "type": "Item", "optional": false}
			],
			"description": "Checks if a table contains the specified item  "
		},
		{
			"name": "Table_Copy",
			"returnType": "LuaTable",
			"parameters": [
				{"name": "OriginalTable", "type": "LuaTable", "optional": false}
			],
			"description": "Copies the contents of the original table returns a new table with the contents of that table  "
		},
		{
			"name": "Table_GetRandomItem",
			"returnType": "Item/Table",
			"parameters": [
				{"name": "table[", "type": "Table", "optional": false},
				{"name": "numberofitems", "type": "Integer", "optional": false}
			],
			"description": "Returns a random item from a table. You can return multiple items (without duplicates) by passing in an optional number parameter. "
		},
		{
			"name": "TeamWeapon_AddGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID", "optional": false},
				{"name": "facingdirections", "type": "Table", "optional": false},
				{"name": "currentfacing", "type": "Integer", "optional": false},
				{"name": "threatarrow", "type": "Boolean", "optional": false},
				{"name": "turnTime", "type": "Integer", "optional": false},
				{"name": "totalResponses", "type": "Integer", "optional": false}
			],
			"description": "Add a gun to the gun manager. The manager will take care of turning it around to attack units.  Turntime is how often the weapon can turn (default 10 seconds), Total Responses is how many times he will adjust before stopping. \nIf you pass in an EGroup, it will automatically find or create a corresponding SGroup with sg_ instead of the eg_ prefix.\n<em>References: </em><a href=\"http://relicjira.thqinc.com/confluence/display/COHXP/AT+Gun+Manager\" target=\"_blank\">[AT+Gun+Manager]</a>"
		},
		{
			"name": "TeamWeapon_RemoveDirections",
			"returnType": "Void",
			"parameters": [
				{"name": "gun", "type": "SGroupID/EGroupID/SyncWeaponID", "optional": false}
			],
			"description": "Remove's the direction settings for a gun, turning it into a fire-at-anything type.  \nUse this if you are relocating a gun. Also removes any special first-trigger speech if you have any hooked up, as it may no longer be suitable if you're moving it.\n<em>References: </em><a href=\"http://relicjira.thqinc.com/confluence/display/COHXP/AT+Gun+Manager\" target=\"_blank\">[AT+Gun+Manager]</a>"
		},
		{
			"name": "TeamWeapon_RemoveGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "gun", "type": "SGroupID/EGroupID/SyncWeaponID", "optional": false}
			],
			"description": "Remove a gun from the gun manager. \n<em>References: </em><a href=\"http://relicjira.thqinc.com/confluence/display/COHXP/AT+Gun+Manager\" target=\"_blank\">[AT+Gun+Manager]</a>"
		},
		{
			"name": "EGroup_Add",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "EGroup*", "optional": false},
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Adds an entity to the end of a group if the group doesnt already have it. "
		},
		{
			"name": "EGroup_AddEGroup",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "EGroup*", "optional": false},
				{"name": "grouptoadd", "type": "EGroup*", "optional": false}
			],
			"description": "Appends the entities in one group to another group.   \n All entities from 'grouptoadd' will be added to 'group'.&lt;BR/&gt; If 'group' already contains an entity from 'grouptoadd' it will not be added.&lt;BR/&gt; This function does not clear the contents of 'grouptoadd'.&lt;BR/&gt; Example: Add group2 (0, 10, 11, 22) to group1 (1, 11, 20) --&gt; group1 would now be (1, 11, 20, 0, 10, 22)&lt;BR/&gt;"
		},
		{
			"name": "EGroup_CanSeeEGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "targetegroup", "type": "EGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ALL or ANY entities in a group can see ALL or ANY entities in a given egroup. "
		},
		{
			"name": "EGroup_CanSeeSGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "targetsgroup", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ALL or ANY entities in a group can see ALL or ANY squads in a given sgroup. "
		},
		{
			"name": "EGroup_Clear",
			"returnType": "void",
			"parameters": [
				{"name": "egroup", "type": "EGroup*", "optional": false}
			],
			"description": "Removes all entities from a group "
		},
		{
			"name": "EGroup_Compare",
			"returnType": "bool",
			"parameters": [
				{"name": "group1", "type": "EGroup*", "optional": false},
				{"name": "group2", "type": "EGroup*", "optional": false}
			],
			"description": "Returns true if the contents of the two groups are equal. Order of the entities does not matter. "
		},
		{
			"name": "EGroup_ContainsBlueprints",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "blueprint", "type": "BP/Table", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Check if a group contains ALL or ANY of the blueprints. "
		},
		{
			"name": "EGroup_ContainsEGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup1", "type": "EGroupID", "optional": false},
				{"name": "egroup2", "type": "EGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if EGroup1 contains ANY or ALL of EGroup2 "
		},
		{
			"name": "EGroup_ContainsEntity",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "entity", "type": "EntityID", "optional": false}
			],
			"description": "Returns true if EGroup contains a particular EntityID "
		},
		{
			"name": "EGroup_Count",
			"returnType": "int",
			"parameters": [
				{"name": "egroup", "type": "EGroup*", "optional": false}
			],
			"description": "Returns the total number of spawned and despawned entities in a group. "
		},
		{
			"name": "EGroup_CountAlive",
			"returnType": "int",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false}
			],
			"description": "Get the number of alive entities (both spawned and despawned) "
		},
		{
			"name": "EGroup_CountDeSpawned",
			"returnType": "int",
			"parameters": [
				{"name": "egroup", "type": "EGroup*", "optional": false}
			],
			"description": "Returns the number of despawned entities in a group. "
		},
		{
			"name": "EGroup_CountSpawned",
			"returnType": "int",
			"parameters": [
				{"name": "egroup", "type": "EGroup*", "optional": false}
			],
			"description": "Returns the number of spawned entities in a group. "
		},
		{
			"name": "EGroup_Create",
			"returnType": "EGroup*",
			"parameters": [
				{"name": "name", "type": "const char*", "optional": false}
			],
			"description": "Returns a new entity group with the given name. \n Entity groups are used for buildings and objects such as rocks and trees.&lt;BR/&gt; If you need to issue orders to a group vehicles or units you must use a SquadGroupObs."
		},
		{
			"name": "EGroup_CreateIfNotFound",
			"returnType": "EGroupID",
			"parameters": [
				{"name": "egroupname", "type": "String", "optional": false}
			],
			"description": "Find a entity group from name.  Creates a new one with given name if it doesnt exist. "
		},
		{
			"name": "EGroup_CreateKickerMessage",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "EGroupID", "optional": false},
				{"name": "textid", "type": "LocString", "optional": false}
			],
			"description": "Create and display kicker message on the each entity in the egroup to the player "
		},
		{
			"name": "EGroup_DeSpawn",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false}
			],
			"description": "Despawn all spawned entities in a group. "
		},
		{
			"name": "EGroup_Destroy",
			"returnType": "void",
			"parameters": [
				{"name": "egroup", "type": "EGroup*", "optional": false}
			],
			"description": "Manually destroy a group that you dont need anymore. "
		},
		{
			"name": "EGroup_DestroyAllEntities",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false}
			],
			"description": "Destroys all spawned and despawned entities in a group. \n Be careful not to confuse this with EGroup_Destroy which destroys the group and NOT the items it contains.  This function will destroy spawned and despawned items in a group"
		},
		{
			"name": "EGroup_Duplicate",
			"returnType": "Void",
			"parameters": [
				{"name": "egroupid1", "type": "EGroupID", "optional": false},
				{"name": "egroupid2", "type": "EGroupID", "optional": false}
			],
			"description": "Duplicates an EGroup \n Creates a copy of egroup1 in egroup2. The function will clear egroup2 beforehand if necessary."
		},
		{
			"name": "EGroup_EnableMinimapIndicator",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "enable", "type": "Boolean", "optional": false}
			],
			"description": "Enables or disables the minimap indicator for all entities in a group "
		},
		{
			"name": "EGroup_EnableUIDecorator",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID", "optional": false},
				{"name": "enable", "type": "Boolean", "optional": false},
				{"name": "enableSelection", "type": "Boolean", "optional": false}
			],
			"description": "Enable or disable decorators on all entities in the egroup. Sets selection visuals as well unless enableSelection is specified. "
		},
		{
			"name": "EGroup_Exists",
			"returnType": "bool",
			"parameters": [
				{"name": "name", "type": "const char*", "optional": false}
			],
			"description": "Returns true if the entity group with the given name exists "
		},
		{
			"name": "EGroup_Filter",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "blueprint", "type": "String/ID/Table", "optional": false},
				{"name": "filtertype", "type": "Integer", "optional": false}
			],
			"description": "Filters an EGroup by blueprint. \n Blueprints can be provided by name or by ID, and in a table if you want to filter on more than one type. Setting filtertype to FILTER_KEEP results in the group only containing entities of the types listed in the blueprint table. Setting filtertype to FILTER_REMOVE will strip those same entities out and leave those that aren't of the types listed."
		},
		{
			"name": "EGroup_FilterUnderConstruction",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "filtertype", "type": "Integer", "optional": false}
			],
			"description": "Filters an EGroup by construction status. \n Setting filtertype to FILTER_KEEP results in the group only containing those entities that are in the process of being built. Setting filtertype to FILTER_REMOVE will strip those same entities out and leave those that are complete."
		},
		{
			"name": "EGroup_ForEach",
			"returnType": "bool",
			"parameters": [
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "f", "type": "LuaBinding::StackVarFunction", "optional": false}
			],
			"description": "Call a lua function for each item in a group. Function will recieve (groupid, itemindex, itemid) and should return true to break or false to continue. \n function Rule_Test( )&lt;BR/&gt; &lt;TAB/&gt;local DespawnEntity = function( egroupid, itemindex, entityID )&lt;BR/&gt; &lt;TAB/&gt;&lt;TAB/&gt;Entity_Despawn( entityID )&lt;BR/&gt; &lt;TAB/&gt;end&lt;BR/&gt;&lt;BR/&gt; &lt;TAB/&gt;EGroup_ForEach( EGroup_FromName(\"eg_PlayersHQ\"), DespawnEntity )&lt;BR/&gt; end&lt;BR/&gt; Note: This function iterates over SPAWNED ENTITIES ONLY."
		},
		{
			"name": "EGroup_ForEachAllOrAny",
			"returnType": "bool",
			"parameters": [
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "all", "type": "bool", "optional": false},
				{"name": "f", "type": "LuaBinding::StackVarFunction", "optional": false}
			],
			"description": "Call a lua function for each item in a group. Function will receive (groupid, itemindex, itemid) and should return a bool. \n Only use this to TEST conditions on entities. DO NOT use this to perform operations on all entities, since it may not call your function on all entities (due to short circuit evaluation). This is used for checking if ALL or ANY items in a group match a given predicate. (eg. Are all items in a group chaos marines)&lt;BR/&gt; Note: This function iterates over SPAWNED ENTITIES ONLY."
		},
		{
			"name": "EGroup_ForEachAllOrAnyEx",
			"returnType": "bool",
			"parameters": [
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "all", "type": "bool", "optional": false},
				{"name": "f", "type": "LuaBinding::StackVarFunction", "optional": false},
				{"name": "spawned", "type": "bool", "optional": false},
				{"name": "despawned", "type": "bool", "optional": false}
			],
			"description": "Same as EGroup_ForEachAllOrAny except you have a choice to iterate over spawned entities, despawned entities, or both. "
		},
		{
			"name": "EGroup_ForEachEx",
			"returnType": "bool",
			"parameters": [
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "f", "type": "LuaBinding::StackVarFunction", "optional": false},
				{"name": "spawned", "type": "bool", "optional": false},
				{"name": "despawned", "type": "bool", "optional": false}
			],
			"description": "Same as EGroup_ForEach except you have a choice to iterate over spawned entities, despawned entities, or both. "
		},
		{
			"name": "EGroup_FromName",
			"returnType": "EGroup*",
			"parameters": [
				{"name": "name", "type": "const char*", "optional": false}
			],
			"description": "Find an entity group with a given name. "
		},
		{
			"name": "EGroup_GetAvgHealth",
			"returnType": "Real",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false}
			],
			"description": "Returns the average health of all units in a entity group. \nThis uses the \"proper\" measure of health for panel buildings, so should accurately reflect what the user sees."
		},
		{
			"name": "EGroup_GetDeSpawnedEntityAt",
			"returnType": "Entity*",
			"parameters": [
				{"name": "group", "type": "EGroup*", "optional": false},
				{"name": "index", "type": "unsigned int", "optional": false}
			],
			"description": "Returns the despawned entity at the given index. \n Use EGroup_GetSpawnedEntityAt if you want the spawned items in the group&lt;BR/&gt; Use index 1 to get the first entity in the group.&lt;BR/&gt; It is an error if index &gt; EGroup_GetCountDeSpawned()&lt;BR/&gt;"
		},
		{
			"name": "EGroup_GetInvulnerable",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Check invulnerablity state for ALL or ANY entity in an entity group. \n Set all param to true to check for ALL or set to false to check for ANY."
		},
		{
			"name": "EGroup_GetLastAttacker",
			"returnType": "Void",
			"parameters": [
				{"name": "EGroupVictim", "type": "EGroup", "optional": false},
				{"name": "SGroupAttacker", "type": "SGroup", "optional": false}
			],
			"description": "Gets the last attacker(s) for all the entities in an EGroup Gets the last attacker for all the squads in an SGroup and stores that in SGroupAttacker "
		},
		{
			"name": "EGroup_GetName",
			"returnType": "const char*",
			"parameters": [
				{"name": "egroup", "type": "EGroup*", "optional": false}
			],
			"description": "Returns the name of a given entity group. "
		},
		{
			"name": "EGroup_GetOffsetPosition",
			"returnType": "Position",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "offset", "type": "Integer", "optional": false},
				{"name": "value", "type": "Real", "optional": false}
			],
			"description": "Returns a position (a certain distance away) relative to an entity's current position/orientation. see LuaConsts.scar for explanation of 'offset' parameter "
		},
		{
			"name": "EGroup_GetPosition",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "group", "type": "EGroup*", "optional": false}
			],
			"description": "Returns the center position of an entity group. "
		},
		{
			"name": "EGroup_GetRandomSpawnedEntity",
			"returnType": "EntityID",
			"parameters": [
				{"name": "egroupid", "type": "EGroup", "optional": false}
			],
			"description": "Get a random spawned entity from egroup "
		},
		{
			"name": "EGroup_GetSequence",
			"returnType": "Table",
			"parameters": [
				{"name": "name", "type": "String", "optional": false}
			],
			"description": "Builds a table of EGroupIDs that are named in a sequence. i.e. a name of \"eg_building\" will find groups \"eg_building1\", \"eg_building2\" and so on, up until it looks for a group that isn't there. "
		},
		{
			"name": "EGroup_GetSpawnedEntityAt",
			"returnType": "Entity*",
			"parameters": [
				{"name": "group", "type": "EGroup*", "optional": false},
				{"name": "index", "type": "unsigned int", "optional": false}
			],
			"description": "Returns the spawned entity at the given index. \n Use EGroup_GetDeSpawnedEntityAt if you want the despawned items in the group&lt;BR/&gt; Use index 1 to get the first entity in the group.&lt;BR/&gt; It is an error if index &gt; EGroup_GetCountSpawned()&lt;BR/&gt;"
		},
		{
			"name": "EGroup_GetSpawnedEntityFilter",
			"returnType": "EntityID or NIL if none met condition",
			"parameters": [
				{"name": "egroupid", "type": "EGroup", "optional": false},
				{"name": "condition(entity", "type": "function", "optional": false}
			],
			"description": "Get the first spawned entity from egroup that meets the condition (a function that takes an entity) "
		},
		{
			"name": "EGroup_GetSpread",
			"returnType": "Real",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false}
			],
			"description": "Returns the distance from the centre of the group of the entity that furthest out.  "
		},
		{
			"name": "EGroup_GetSquadsHeld",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "sgroupRecipient", "type": "SGroupID", "optional": false}
			],
			"description": "Returns an sgroup containing all squads held by any entities in an egroup "
		},
		{
			"name": "EGroup_HasUpgrade",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "upgrade", "type": "UpgradeID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns whether ANY or ALL entities in an EGroup have the specified upgrade "
		},
		{
			"name": "EGroup_Hide",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "hide", "type": "Bool", "optional": false}
			],
			"description": "Hide or show all entities in an EGroup \nBool should be true to hide, false to show"
		},
		{
			"name": "EGroup_InstantCaptureStrategicPoint",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "player", "type": "PlayerID", "optional": false}
			],
			"description": "Change the ownership of a Strategic Point "
		},
		{
			"name": "EGroup_InstantRevertOccupiedBuilding",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false}
			],
			"description": "Reverts an occupied building "
		},
		{
			"name": "EGroup_Intersection",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "EGroup*", "optional": false},
				{"name": "grouptointersect", "type": "EGroup*", "optional": false}
			],
			"description": "Performs a group intersection.  \n Only entities that are in both groups will be added to 'group'.&lt;BR/&gt; The contents of 'grouptointersect' will not be changed.&lt;BR/&gt; Example: group = (1,2,3,4,5,6)  grouptointersect = (2,4,6,8,10)   --&gt; group will now equal (2,4,6)"
		},
		{
			"name": "EGroup_IsBurning",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "ALL", "type": "Boolean", "optional": false}
			],
			"description": "Checks if ANY or ALL entities in an egroup are on fire (ignition threshold exceeded) "
		},
		{
			"name": "EGroup_IsCapturedByPlayer",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "playerId", "type": "PlayerID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if all or any strategic points in a group have been captured. Use ANY or ALL. \nThis function will ignore all entities that cannot be captured and will return false if no entities in the group can be captured."
		},
		{
			"name": "EGroup_IsCapturedByTeam",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "teamId", "type": "TeamID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if all or any strategic points in a group have been captured. Use ANY or ALL. \nThis function will ignore all entities that cannot be captured and will return false if no entities in the group can be captured."
		},
		{
			"name": "EGroup_IsDoingAttack",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false},
				{"name": "time", "type": "Float", "optional": false}
			],
			"description": "Returns true if ALL or ANY entities are attacking within the time "
		},
		{
			"name": "EGroup_IsEmpty",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false}
			],
			"description": "Returns true if a named entity group contains no spawned or despawned entities "
		},
		{
			"name": "EGroup_IsHoldingAny",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false}
			],
			"description": "Returns whether any entity in an EGroup has a hold on anything "
		},
		{
			"name": "EGroup_IsInCover",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ALL or ANY entities are in cover. "
		},
		{
			"name": "EGroup_IsMoving",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroupid", "type": "EGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ANY or ALL entities in an EGroup are moving. "
		},
		{
			"name": "EGroup_IsOnScreen",
			"returnType": "Bool",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "group", "type": "EGroupID", "optional": false},
				{"name": "all[", "type": "Bool", "optional": false},
				{"name": "percent", "type": "Float", "optional": false}
			],
			"description": "Returns true if ANY or ALL (use those keywords) of the enities in the group are present onscreen. You can pass in a percentage of the screen to check, so 0.8 would be a centered rectangle occupying 80% of the screen. "
		},
		{
			"name": "EGroup_IsProducingSquads",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ALL or ANY entities in a group are currently producing squads \nSet all to true to check for ALL or set to false to check for ANY"
		},
		{
			"name": "EGroup_IsSpawned",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "ALL", "type": "Boolean", "optional": false}
			],
			"description": "Checks if ANY or ALL entities in an group are currently spawned or not. "
		},
		{
			"name": "EGroup_IsUnderAttack",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false},
				{"name": "time", "type": "Float", "optional": false}
			],
			"description": "Returns true if ALL or ANY entities are under attack within the time "
		},
		{
			"name": "EGroup_IsUnderAttackByPlayer",
			"returnType": "Bool",
			"parameters": [
				{"name": "group", "type": "EGroupID", "optional": false},
				{"name": "attackerplayer", "type": "PlayerID", "optional": false},
				{"name": "duration", "type": "Float", "optional": false}
			],
			"description": "Check if the entities are attacked by the player "
		},
		{
			"name": "EGroup_IsUnderAttackFromDirection",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false},
				{"name": "offset", "type": "Integer/Table", "optional": false},
				{"name": "time", "type": "Float", "optional": false}
			],
			"description": "Returns true if ALL or ANY entities are under attack from a direction within the time. see LuaConsts.scar for types of directions. you can pass in a table of offsets "
		},
		{
			"name": "EGroup_IsUsingAbility",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "ALL", "type": "Boolean", "optional": false}
			],
			"description": "Checks if ANY or ALL squads within an EGroup are using an ability \nalso used for emplacements/entities that are built but function through the use of squads.  Does not check WHAT ability a squad is using. "
		},
		{
			"name": "EGroup_Kill",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false}
			],
			"description": "Kill all entities in an EGroup "
		},
		{
			"name": "EGroup_NotifyOnPlayerDemolition",
			"returnType": "Void",
			"parameters": [
				{"name": "id", "type": "EGroupID", "optional": false},
				{"name": "function", "type": "LuaFunction", "optional": false}
			],
			"description": "Calls a function when any entity in an EGroup gets destroyed by the player clicking the \"Detonate me\" button "
		},
		{
			"name": "EGroup_Remove",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "EGroup*", "optional": false},
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Removes an entity from a group. "
		},
		{
			"name": "EGroup_RemoveDemolitions",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false}
			],
			"description": "Removes all demolition charges on an egroup "
		},
		{
			"name": "EGroup_RemoveGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID", "optional": false},
				{"name": "grouptoremove", "type": "SGroupID", "optional": false}
			],
			"description": "Remove from the first SGroup all squads contained in the second SGroup. SGroup2 remains untouched. "
		},
		{
			"name": "EGroup_RemoveUpgrade",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "upgrade", "type": "UpgradeBlueprint/Table", "optional": false}
			],
			"description": "Removes upgrade(s) from an egroup "
		},
		{
			"name": "EGroup_ReSpawn",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false}
			],
			"description": "Respawn all despawned entities in a group. "
		},
		{
			"name": "EGroup_SetAnimatorAction",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "actionName", "type": "String", "optional": false}
			],
			"description": "Trigger animation action for an EGroup. Please only use this for simple animations "
		},
		{
			"name": "EGroup_SetAnimatorEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "eventName", "type": "String", "optional": false}
			],
			"description": "Set animation event for an EGroup. Please only use this for simple animations "
		},
		{
			"name": "EGroup_SetAnimatorState",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "stateMachineName", "type": "String", "optional": false},
				{"name": "stateName", "type": "String", "optional": false}
			],
			"description": "Set animation state of a state machine for an EGroup. Please only use this for simple animations "
		},
		{
			"name": "EGroup_SetAnimatorVariable",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "variableName", "type": "String", "optional": false},
				{"name": "value", "type": "Real", "optional": false}
			],
			"description": "Set animation variable value for an EGroup. Please only use this for simple animations "
		},
		{
			"name": "EGroup_SetAutoTargetting",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "EGroupID", "optional": false},
				{"name": "hardpoint", "type": "String", "optional": false},
				{"name": "enable", "type": "Bool", "optional": false}
			],
			"description": "Sets whether a weapon to auto-target things or not "
		},
		{
			"name": "EGroup_SetAvgHealth",
			"returnType": "Real",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "healthPercent", "type": "Real", "optional": false}
			],
			"description": "Sets the health of each unit in an entity group to a given percent [0.0, 1.0]. "
		},
		{
			"name": "EGroup_SetCrushable",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "crushable", "type": "Boolean", "optional": false}
			],
			"description": "Overrides crushable behavior for an egroup "
		},
		{
			"name": "EGroup_SetDemolitions",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "egroupid[", "type": "EGroupID", "optional": false},
				{"name": "numcharges", "type": "Integer", "optional": false}
			],
			"description": "Instantly wires a building for demolitions "
		},
		{
			"name": "EGroup_SetHealthMinCap",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "minhealth", "type": "float", "optional": false}
			],
			"description": "Set the minimum health for this entity \nThis is usually set to zero, any higher value prevents the entity from having its health reduced below this given value"
		},
		{
			"name": "EGroup_SetInvulnerable",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "enabled[", "type": "Boolean", "optional": false},
				{"name": "reset_time", "type": "Float", "optional": false}
			],
			"description": "Enable/Disable invulnerablity for an entire entity group. Use true and false for simple on/off, or use a number between 0.0 and 1.0 for more precise control on how much damage an entity can take before it takes no more. \nThe optional reset_time is used to automatically remove invulnerability after a set time. If invulnerable, both health and critical damage are disabled."
		},
		{
			"name": "EGroup_SetPlayerOwner",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroup", "optional": false},
				{"name": "owner", "type": "PlayerID", "optional": false}
			],
			"description": "Changes the player owner for all spawned and despawned entities of an EGroup. \nStrategic/capturable point does not support setting player owner directly"
		},
		{
			"name": "EGroup_SetRallyPoint",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "target", "type": "Position", "optional": false}
			],
			"description": "Set the rally point for this entity \nThis is usually set to zero, any higher value prevents the entity from having its health reduced below this given value"
		},
		{
			"name": "EGroup_SetRecrewable",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "EGroupID", "optional": false},
				{"name": "recrewable", "type": "Boolean", "optional": false}
			],
			"description": "Sets all entities in an egroup to be recrewable or not when abandoned "
		},
		{
			"name": "EGroup_SetSelectable",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "selectable", "type": "Bool", "optional": false}
			],
			"description": "Set player selectable state of entities in the egroup "
		},
		{
			"name": "EGroup_SetSharedProductionQueue",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "enable", "type": "Boolean", "optional": false}
			],
			"description": "Enables shared team production on a building (teammates can build using THEIR resources) "
		},
		{
			"name": "EGroup_SetStrategicPointNeutral",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false}
			],
			"description": "Sets a strategic point to neutral (not owned by any team)  "
		},
		{
			"name": "EGroup_SetWorldOwned",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false}
			],
			"description": "Makes an egroup neutral "
		},
		{
			"name": "EGroup_Single",
			"returnType": "EGroupID",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "entity", "type": "entityID", "optional": false}
			],
			"description": "Creates an entity group containing a single entity \n Creates an EGroup containing just one entity, creating the group if it doesn't exist and clearing it if it does. It returns the name of the EGroup."
		},
		{
			"name": "SGroup_HasEntityUpgrade",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "upgrade", "type": "UpgradeID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ANY or ALL of the squad's entities have the specified upgrade "
		},
		{
			"name": "Ai\\:GetEncountersBySGroup",
			"returnType": "Table",
			"parameters": [
				{"name": "sgroup", "type": "SGroup", "optional": false},
				{"name": "all", "type": "ANY/ALL", "optional": false}
			],
			"description": "Finds all encounters that contain ANY or ALL squads within the given sgroup. "
		},
		{
			"name": "Ai\\:GetEncountersBySquad",
			"returnType": "Table",
			"parameters": [
				{"name": "sgroup", "type": "SGroup", "optional": false},
				{"name": "all", "type": "ANY/ALL", "optional": false}
			],
			"description": "Finds all encounters that contain ANY or ALL squads within the given sgroup. "
		},
		{
			"name": "AI_DisableAllEncounters",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Disables all encounters "
		},
		{
			"name": "AI_EnableAllEncounters",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Enables all encounters "
		},
		{
			"name": "AI_GetActiveEncounters",
			"returnType": "Table",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns a table with all active (not dead) encounters. "
		},
		{
			"name": "AI_GetNumEncounters",
			"returnType": "Int",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns the number of alive encounters currently managed by the AI manager. "
		},
		{
			"name": "AI_IsMatchingDifficulty",
			"returnType": "Boolean",
			"parameters": [
				{"name": "difficultyList", "type": "Int/Table", "optional": false}
			],
			"description": "Returns True if the current AI_Manager difficulty matches any in a given list. "
		},
		{
			"name": "AI_OverrideDifficulty",
			"returnType": "Void",
			"parameters": [
				{"name": "level", "type": "Int", "optional": false}
			],
			"description": "Overrides the current difficulty setting (only for the AI Manager). Pass 'nil' to reset to Game_GetSPDifficulty() value "
		},
		{
			"name": "AI_RemoveAllEncounters",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Disables all encounters, then clears out the encounter list "
		},
		{
			"name": "AI_SetDebugLevel",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Set the level of debug information shown but Ai:Print(). "
		},
		{
			"name": "AI_SetStaggeredSpawnDelay",
			"returnType": "Void",
			"parameters": [
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Sets the delay to use when using staggeredSpawn for encounters. The new interval will take effect immediately. "
		},
		{
			"name": "AI_ToggleDebugData",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Toggle encounter/goal debug information on screen. "
		},
		{
			"name": "AI_ToggleDebugPrint",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Toggle printing console debug information for encounters. "
		},
		{
			"name": "AIAbilityGoal_AdjustDefaultGoalData",
			"returnType": "Void",
			"parameters": [
				{"name": "additionalDefaultGoalData", "type": "Table", "optional": false}
			],
			"description": "Adjust default goal data for ability goals.  Sets the default GoalData to the current defaults plus additionalDefaultGoalData; any values specified are used for unspecified encounter ability goal values. "
		},
		{
			"name": "AIAbilityGoal_SetDefaultGoalData",
			"returnType": "Void",
			"parameters": [
				{"name": "defaultGoalData", "type": "Table", "optional": false}
			],
			"description": "Set default goal data for ability goals.  defaultGoalData is cloned; any values specified are used for unspecified encounter ability goal values. "
		},
		{
			"name": "AIAbilityGoal_SetModifyGoalData",
			"returnType": "Void",
			"parameters": [
				{"name": "modifyGoalData", "type": "Table", "optional": false}
			],
			"description": "Set modify goal data for ability goals.  modifyGoalData is cloned; values specified via keyname_Multiplier are used for the numeric keyname encounter ability goal value. "
		},
		{
			"name": "AIAbilityGoal_SetOverrideGoalData",
			"returnType": "Void",
			"parameters": [
				{"name": "overrideGoalData", "type": "Table", "optional": false}
			],
			"description": "Set override goal data for ability goals.  overrideGoalData is cloned; any values specified are used for encounter ability goal values. "
		},
		{
			"name": "AIAttackGoal_AdjustDefaultGoalData",
			"returnType": "Void",
			"parameters": [
				{"name": "additionalDefaultGoalData", "type": "Table", "optional": false}
			],
			"description": "Adjust default goal data for attack goals.  Sets the default GoalData to the current defaults plus additionalDefaultGoalData; any values specified are used for unspecified encounter attack goal values. "
		},
		{
			"name": "AIAttackGoal_SetDefaultGoalData",
			"returnType": "Void",
			"parameters": [
				{"name": "defaultGoalData", "type": "Table", "optional": false}
			],
			"description": "Set default goal data for attack goals.  defaultGoalData is cloned; any values specified are used for unspecified encounter attack goal values. "
		},
		{
			"name": "AIAttackGoal_SetModifyGoalData",
			"returnType": "Void",
			"parameters": [
				{"name": "modifyGoalData", "type": "Table", "optional": false}
			],
			"description": "Set modify goal data for attack goals.  modifyGoalData is cloned; values specified via keyname_Multiplier are used for the numeric keyname encounter attack goal value. "
		},
		{
			"name": "AIAttackGoal_SetOverrideGoalData",
			"returnType": "Void",
			"parameters": [
				{"name": "overrideGoalData", "type": "Table", "optional": false}
			],
			"description": "Set override goal data for attack goals.  overrideGoalData is cloned; any values specified are used for encounter attack goal values. "
		},
		{
			"name": "AIBaseGoal_AdjustDefaultGoalData",
			"returnType": "Void",
			"parameters": [
				{"name": "additionalDefaultGoalData", "type": "Table", "optional": false}
			],
			"description": "Adjust default goal data.  Sets the default GoalData to the current defaults plus additionalDefaultGoalData; any values specified are used for unspecified encounter goal values. "
		},
		{
			"name": "AIBaseGoal_SetDefaultGoalData",
			"returnType": "Void",
			"parameters": [
				{"name": "defaultGoalData", "type": "Table", "optional": false}
			],
			"description": "Set default goal data.  defaultGoalData is cloned; any values specified are used for unspecified encounter goal values. "
		},
		{
			"name": "AIBaseGoal_SetModifyGoalData",
			"returnType": "Void",
			"parameters": [
				{"name": "modifyGoalData", "type": "Table", "optional": false}
			],
			"description": "Set modify goal data.  modifyGoalData is cloned; values specified via keyname_Multiplier are used for the numeric keyname encounter goal value. "
		},
		{
			"name": "AIBaseGoal_SetOverrideGoalData",
			"returnType": "Void",
			"parameters": [
				{"name": "overrideGoalData", "type": "Table", "optional": false}
			],
			"description": "Set override goal data.  overrideGoalData is cloned; any values specified are used for encounter goal values. "
		},
		{
			"name": "AIDefendGoal_AdjustDefaultGoalData",
			"returnType": "Void",
			"parameters": [
				{"name": "additionalDefaultGoalData", "type": "Table", "optional": false}
			],
			"description": "Adjust default goal data for defend goals.  Sets the default GoalData to the current defaults plus additionalDefaultGoalData; any values specified are used for unspecified encounter defend goal values. "
		},
		{
			"name": "AIDefendGoal_SetDefaultGoalData",
			"returnType": "Void",
			"parameters": [
				{"name": "defaultGoalData", "type": "Table", "optional": false}
			],
			"description": "Set default goal data for defend goals.  defaultGoalData is cloned; any values specified are used for unspecified encounter defend goal values. "
		},
		{
			"name": "AIDefendGoal_SetModifyGoalData",
			"returnType": "Void",
			"parameters": [
				{"name": "modifyGoalData", "type": "Table", "optional": false}
			],
			"description": "Set modify goal data for defend goals.  modifyGoalData is cloned; values specified via keyname_Multiply are used for the numeric keyname encounter defend goal value. "
		},
		{
			"name": "AIDefendGoal_SetOverrideGoalData",
			"returnType": "Void",
			"parameters": [
				{"name": "overrideGoalData", "type": "Table", "optional": false}
			],
			"description": "Set override goal data for defend goals.  overrideGoalData is cloned; any values specified are used for encounter defend goal values. "
		},
		{
			"name": "AIMoveGoal_AdjustDefaultGoalData",
			"returnType": "Void",
			"parameters": [
				{"name": "additionalDefaultGoalData", "type": "Table", "optional": false}
			],
			"description": "Adjust default goal data for move goals.  Sets the default GoalData to the current defaults plus additionalDefaultGoalData; any values specified are used for unspecified encounter move goal values. "
		},
		{
			"name": "AIMoveGoal_SetDefaultGoalData",
			"returnType": "Void",
			"parameters": [
				{"name": "defaultGoalData", "type": "Table", "optional": false}
			],
			"description": "Set default goal data for move goals.  defaultGoalData is cloned; any values specified are used for unspecified encounter move goal values. "
		},
		{
			"name": "AIMoveGoal_SetModifyGoalData",
			"returnType": "Void",
			"parameters": [
				{"name": "modifyGoalData", "type": "Table", "optional": false}
			],
			"description": "Set modify goal data for move goals.  modifyGoalData is cloned; values specified via keyname_Multiply are used for the numeric keyname encounter move goal value. "
		},
		{
			"name": "AIMoveGoal_SetOverrideGoalData",
			"returnType": "Void",
			"parameters": [
				{"name": "overrideGoalData", "type": "Table", "optional": false}
			],
			"description": "Set override goal data for move goals.  overrideGoalData is cloned; any values specified are used for encounter move goal values. "
		},
		{
			"name": "Encounter\\:AddSgroup",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Adds an sgroup to an encounter "
		},
		{
			"name": "Encounter\\:ClearGoal",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Clears the current goal. "
		},
		{
			"name": "Encounter\\:ConvertSgroup",
			"returnType": "Encounter",
			"parameters": [
				{"name": "squadgroup", "type": "SGroup", "optional": false}
			],
			"description": "Create a new encounter from an SGroup, with default encounter data \nEncounter player is derived from sgroup; all squads in sgroup must be owned by same player."
		},
		{
			"name": "Encounter\\:Create",
			"returnType": "Encounter",
			"parameters": [
				{"name": "data[", "type": "EncounterData", "optional": false},
				{"name": "spawnNow", "type": "Bool", "optional": false},
				{"name": "spawnStaggered", "type": "Bool", "optional": false}
			],
			"description": "Create a new encounter from encounter data. If spawnNow is true, spawns specified units immediately. \nSee: http://relicwiki/display/REL/Ai+Encounters"
		},
		{
			"name": "Encounter\\:CreateAbility",
			"returnType": "Encounter",
			"parameters": [
				{"name": "name", "type": "String", "optional": false},
				{"name": "encUnits", "type": "SBP/Table", "optional": false},
				{"name": "spawnLoc", "type": "Marker/Pos", "optional": false},
				{"name": "encTarget[", "type": "EGroup/SGeoup/Marker/Pos", "optional": false},
				{"name": "dynamicSpawn", "type": "Marker/Pos", "optional": false},
				{"name": "moveRange", "type": "INT", "optional": false}
			],
			"description": "Create a new encounter with a generic Ability goal. "
		},
		{
			"name": "Encounter\\:CreateAttack",
			"returnType": "Encounter",
			"parameters": [
				{"name": "name", "type": "String", "optional": false},
				{"name": "encUnits", "type": "SBP/Table", "optional": false},
				{"name": "spawnLoc", "type": "Marker/Pos", "optional": false},
				{"name": "encTarget[", "type": "EGroup/SGeoup/Marker/Pos", "optional": false},
				{"name": "dynamicSpawn", "type": "Marker/Pos", "optional": false},
				{"name": "encRange", "type": "Marker/INT", "optional": false},
				{"name": "encLeash", "type": "Marker/INT", "optional": false}
			],
			"description": "Create a new encounter with a generic Attack goal. "
		},
		{
			"name": "Encounter\\:CreateBasic",
			"returnType": "Encounter",
			"parameters": [
				{"name": "name", "type": "String", "optional": false},
				{"name": "spawnLoc", "type": "Marker/Pos", "optional": false},
				{"name": "encUnits[", "type": "SBP/Table", "optional": false},
				{"name": "dynamicSpawn", "type": "Marker/Pos", "optional": false}
			],
			"description": "Create a new basic encounter. "
		},
		{
			"name": "Encounter\\:CreateDefend",
			"returnType": "Encounter",
			"parameters": [
				{"name": "name", "type": "String", "optional": false},
				{"name": "encUnits", "type": "SBP/Table", "optional": false},
				{"name": "spawnLoc", "type": "Marker/Pos", "optional": false},
				{"name": "encTarget[", "type": "EGroup/SGeoup/Marker/Pos", "optional": false},
				{"name": "dynamicSpawn", "type": "Marker/Pos", "optional": false},
				{"name": "encRange", "type": "Marker/INT", "optional": false},
				{"name": "encLeash", "type": "Marker/INT", "optional": false}
			],
			"description": "Create a new encounter with a generic Defend goal. "
		},
		{
			"name": "Encounter\\:CreateMove",
			"returnType": "Encounter",
			"parameters": [
				{"name": "name", "type": "String", "optional": false},
				{"name": "encUnits", "type": "SBP/Table", "optional": false},
				{"name": "spawnLoc", "type": "Marker/Pos", "optional": false},
				{"name": "encTarget[", "type": "EGroup/SGeoup/Marker/Pos", "optional": false},
				{"name": "dynamicSpawn", "type": "Marker/Pos", "optional": false},
				{"name": "moveRange", "type": "INT", "optional": false}
			],
			"description": "Create a new encounter with a generic Move goal. "
		},
		{
			"name": "Encounter\\:CreatePatrol",
			"returnType": "Encounter",
			"parameters": [
				{"name": "name", "type": "String", "optional": false},
				{"name": "encUnits", "type": "SBP/Table", "optional": false},
				{"name": "spawnLoc", "type": "Marker/Pos", "optional": false},
				{"name": "encPath[", "type": "Marker/String", "optional": false},
				{"name": "dynamicSpawn", "type": "Marker/Pos", "optional": false},
				{"name": "pathWait", "type": "INT", "optional": false},
				{"name": "pathLoop", "type": "INT", "optional": false}
			],
			"description": "Create a new encounter with a generic Patrol goal.  \npathLoop can be: LOOP_NONE, LOOP_NORMAL, LOOP_TOGGLE_DIRECTION"
		},
		{
			"name": "Encounter\\:Disable",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Stops running the encounter and clears the current goal. "
		},
		{
			"name": "Encounter\\:Enable",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Starts encounter running (encounters are enabled by default) if it was disabled previously. "
		},
		{
			"name": "Encounter\\:GetGoalData",
			"returnType": "GoalData",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Gets clone of current goal data.  May be nil. "
		},
		{
			"name": "Encounter\\:GetSgroup",
			"returnType": "SGroup sgroup",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Gets the encounter's sgroup. Caution: sgroup may be empty "
		},
		{
			"name": "Encounter\\:RemoveOnDeath",
			"returnType": "Void",
			"parameters": [
				{"name": "includeUnits", "type": "Bool", "optional": false}
			],
			"description": "Clears the encounter's onDeath callback. If includeUnits is set to true, it clears onDeath callbacks for units as well. "
		},
		{
			"name": "Encounter\\:RestartGoal",
			"returnType": "Bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "If encounter has a goal, but no currently running objective, restarts the goal. \nReturns true if goal was restarted, false otherwise."
		},
		{
			"name": "Encounter\\:SetGoal",
			"returnType": "Void",
			"parameters": [
				{"name": "goalData", "type": "GoalData", "optional": false}
			],
			"description": "Creates encounter goal from goal data; goals determine unit objectives and behaviours. \nSee: http://relicwiki/display/REL/Ai+Goal"
		},
		{
			"name": "Encounter\\:SetGoalOnSuccess",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Set the goal's OnSuccess callback. "
		},
		{
			"name": "Encounter\\:SetOnDeath",
			"returnType": "Void",
			"parameters": [
				{"name": "func", "type": "ScarFn", "optional": false}
			],
			"description": "Sets a new onDeath callback for the encounter "
		},
		{
			"name": "Encounter\\:Spawn",
			"returnType": "Void",
			"parameters": [
				{"name": "spawnStaggered", "type": "Bool", "optional": false}
			],
			"description": "Spawns the units within an. Does nothing if the encounter has already been spawned. "
		},
		{
			"name": "Encounter\\:UpdateGoal",
			"returnType": "Void",
			"parameters": [
				{"name": "goalData", "type": "GoalData", "optional": false}
			],
			"description": "Sets the goal data for the encounter. If encounter has a goal with a running objective, updates the goal. \nUse GetGoalData() to get "
		},
		{
			"name": "MergeClone",
			"returnType": "Table ",
			"parameters": [
				{"name": "defaultTable", "type": "Table", "optional": false},
				{"name": "overrideTable", "type": "Table", "optional": false}
			],
			"description": "Merge clones two table (recursively) into a single table combining into a new table allowing for unadulterated use of the data "
		},
		{
			"name": "Entity_ApplyCritical",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false},
				{"name": "criticalPBG", "type": "ScarCriticalPBG", "optional": false},
				{"name": "removeAtHealth", "type": "float", "optional": false}
			],
			"description": "Trigger a critical hit on an entity "
		},
		{
			"name": "Entity_BuildingPanelInfo",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false},
				{"name": "cam", "type": "ScarPosition", "optional": false},
				{"name": "terrain", "type": "ScarPosition", "optional": false}
			],
			"description": "Displays info about the panel that is intersected by the passed in ray "
		},
		{
			"name": "Entity_CanAttackNow",
			"returnType": "bool",
			"parameters": [
				{"name": "attacker", "type": "Entity*", "optional": false},
				{"name": "target", "type": "ScarPosition", "optional": false}
			],
			"description": "Returns whether an entity can attack a target without moving or turning. "
		},
		{
			"name": "Entity_CancelProductionQueueItem",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "index", "type": "uint32_t", "optional": false}
			],
			"description": "Cancels an item in a production queue.  Index 0 is the currently producing item. "
		},
		{
			"name": "Entity_CanLoadSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "bCheckSquadState", "type": "bool", "optional": false},
				{"name": "bOverload", "type": "bool", "optional": false}
			],
			"description": "Check if the entity can load squad or not "
		},
		{
			"name": "Entity_CanLoadSquadAndAttackCurrentTarget",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "bCheckSquadState", "type": "bool", "optional": false},
				{"name": "bOverload", "type": "bool", "optional": false}
			],
			"description": "Check if the entity can load squad and shoot its target after loading (This function should only be called by AI) "
		},
		{
			"name": "Entity_CanSeeEntity",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "target", "type": "Entity*", "optional": false}
			],
			"description": "Returns true if the distance between a target entity and the source entity is less than it entity's sight distance.  There is no LOS or FOW check. \nTry Player_CanSeeEntity() if you care about LOS or FOW."
		},
		{
			"name": "Entity_CanSeeSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "target", "type": "Squad*", "optional": false}
			],
			"description": "Returns true if the distance between a target squad and the source entity is less than it entity's sight distance.  There is no LOS or FOW check. \nTry Player_CanSeeSquad() if you care about LOS or FOW."
		},
		{
			"name": "Entity_ClearPostureSuggestion",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Clears any previous posture suggestions made to an entity "
		},
		{
			"name": "Entity_ClearTagDebug",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Clears the tagged entity used for debugging "
		},
		{
			"name": "Entity_CompleteUpgrade",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false},
				{"name": "upgradePBG", "type": "ScarUpgradePBG", "optional": false}
			],
			"description": "Instantly adds an upgrade to a given entity "
		},
		{
			"name": "Entity_Create",
			"returnType": "Entity*",
			"parameters": [
				{"name": "ebp", "type": "ScarEntityPBG", "optional": false},
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "toward", "type": "ScarPosition", "optional": false}
			],
			"description": "Creates an entity at a given position and assigns it to a given player.  'blueprint' is a string value containing the name of the entity blueprint. This function does not spawn the entity so you will need to call Entity_Spawn to see this entity "
		},
		{
			"name": "Entity_CreateENV",
			"returnType": "Entity*",
			"parameters": [
				{"name": "ebp", "type": "ScarEntityPBG", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "toward", "type": "ScarPosition", "optional": false}
			],
			"description": "Creates an entity at a given position and assigns it to a given player.  'blueprint' is a string value containing the name of the entity blueprint. This function spawns the entity so there is no need to call Entity_Spawn "
		},
		{
			"name": "Entity_DeSpawn",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "DeSpawn the entity at its current position "
		},
		{
			"name": "Entity_Destroy",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Remove an entity from the world and destroy it. "
		},
		{
			"name": "Entity_DisableBuildingDeath",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false},
				{"name": "bDisableDeath", "type": "bool", "optional": false}
			],
			"description": "Disables the death of the given entity building, only works for panel based destructible buldings \n"
		},
		{
			"name": "Entity_DoBuildingDamageRay",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false},
				{"name": "cam", "type": "ScarPosition", "optional": false},
				{"name": "terrain", "type": "ScarPosition", "optional": false},
				{"name": "dmgType", "type": "size_t", "optional": false},
				{"name": "isDestory", "type": "bool", "optional": false},
				{"name": "radius", "type": "float", "optional": false}
			],
			"description": "Damages this entity but only if its a destructible building \ndmgType of 0 is damage accessory, 1 is damage panel, 2 is destroy panel and 3 is destroy radius"
		},
		{
			"name": "Entity_EnableAttention",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "attentive", "type": "bool", "optional": false}
			],
			"description": "Sets whether an entity pays attention to its surroundings "
		},
		{
			"name": "Entity_EnableProductionQueue",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Sets whether an entity can produce anything (including upgrades) "
		},
		{
			"name": "Entity_EnableStrategicPoint",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Sets whether an strategic point is active "
		},
		{
			"name": "Entity_ForceConstruct",
			"returnType": "void",
			"parameters": [
				{"name": "e", "type": "Entity*", "optional": false}
			],
			"description": "Force constructs this entity but only if its a building "
		},
		{
			"name": "Entity_FromWorldID",
			"returnType": "Entity*",
			"parameters": [
				{"name": "id", "type": "uint32_t", "optional": false}
			],
			"description": "Get an entity from a mission editor ID. "
		},
		{
			"name": "Entity_GetActiveCommand",
			"returnType": "<a href=\"enum_list.htm#EntityStateID\">EntityStateID</a>",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns the active entity command. "
		},
		{
			"name": "Entity_GetBlueprint",
			"returnType": "ScarEntityPBG",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns the entity's blueprint "
		},
		{
			"name": "Entity_GetBuildingProgress",
			"returnType": "float",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false}
			],
			"description": "Returns the construction progress (with range [0.0, 1.0] for a given entity.  Returns 0.0 if the entity is not a building. "
		},
		{
			"name": "Entity_GetCoverValue",
			"returnType": "float",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Get cover safety value from the where the entity is standing. The safety value is number from -.5 to .5. \nHigher value means better cover. If the entity doesn't have cover_ext, value of 0 would be returned"
		},
		{
			"name": "Entity_GetGameID",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns the entities unique id in the world "
		},
		{
			"name": "Entity_GetHeading",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns the heading of the entity.  The heading is currently a lua table with three entries (x, y, z) "
		},
		{
			"name": "Entity_GetHealth",
			"returnType": "float",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns the health of an entity. \nHealth will be zero for entities with no health extension."
		},
		{
			"name": "Entity_GetHealthMax",
			"returnType": "float",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns the max health of an entity. \nMax health will be zero for entities with no health extension."
		},
		{
			"name": "Entity_GetHealthPercentage",
			"returnType": "float",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns the percentage health, taking into account destructible buildings \nHealth will be zero for entities with no health extension nor building destruction"
		},
		{
			"name": "Entity_GetInvulnerable",
			"returnType": "Bool",
			"parameters": [
				{"name": "squad", "type": "SquadID", "optional": false}
			],
			"description": "Check if the entity is invulnerable or not "
		},
		{
			"name": "Entity_GetInvulnerableMinCap",
			"returnType": "float",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns the invulnerable point in terms of percentage \nFor buildings, retrieve the percentage value of healthy below which no more panels could be destroyed"
		},
		{
			"name": "Entity_GetInvulnerableToCritical",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "get if an entity is invulnerable to critical effects "
		},
		{
			"name": "Entity_GetLastAttacker",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "group", "type": "SGroup*", "optional": false}
			],
			"description": "Find the last squad attacker on this entity. If found, the squad is added to the sgroup "
		},
		{
			"name": "Entity_GetLastAttackers",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "group", "type": "SGroup*", "optional": false},
				{"name": "timeSeconds", "type": "float", "optional": false}
			],
			"description": "Find the squad attackers on this entity from the last seconds specified. If found, the squads are added to the sgroup. Building attackers are ignored "
		},
		{
			"name": "Entity_GetMaxCaptureCrewSize",
			"returnType": "int",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Gets the maximum capture crew size from a recrewable entity "
		},
		{
			"name": "Entity_GetOffsetPosition",
			"returnType": "Position",
			"parameters": [
				{"name": "entity", "type": "EntityID", "optional": false},
				{"name": "offset", "type": "Integer", "optional": false},
				{"name": "distance", "type": "Real", "optional": false}
			],
			"description": "Returns a position relative to an entity's current position and orientation. see LuaConsts.scar for explanation of 'offset' parameter. "
		},
		{
			"name": "Entity_GetPlayerOwner",
			"returnType": "Player*",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns the Player owner of the given entity. Entity MUST NOT be owned by the world. \nUse World_OwnsEntity to make sure entity is not owned by the world before calling this function"
		},
		{
			"name": "Entity_GetPosition",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns the position of the entity.  The position is currently a lua table with three entries (x, y, z) "
		},
		{
			"name": "Entity_GetProductionQueueItem",
			"returnType": "const PropertyBagGroup*",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "index", "type": "uint32_t", "optional": false}
			],
			"description": "Returns the blueprint for a production queue item with index. "
		},
		{
			"name": "Entity_GetProductionQueueItemType",
			"returnType": "<a href=\"enum_list.htm#ProductionItemType\">ProductionItemType</a>",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "index", "type": "uint32_t", "optional": false}
			],
			"description": "Returns the production type (PITEM_Upgrade, PITEM_Spawn, PITEM_SquadUpgrade, PITEM_SquadReinforce, PITEM_PlayerUpgrade) for a production queue item with index. "
		},
		{
			"name": "Entity_GetProductionQueueSize",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns the number of items in the entities production queue. \nIt is an error to call this function on an entity that does not have a production queue.&lt;BR/&gt; Use Entity_HasProductionQueue to check that the entity has a queue."
		},
		{
			"name": "Entity_GetResourceType",
			"returnType": "ResourceAmount::ResourceType",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns the resource type of this point \nreturns RT_Fuel, RT_Munition, RT_Action, RT_Command, RT_Popcap, RT_Invalid.  NOTE: only works on player owned points"
		},
		{
			"name": "Entity_GetSightInnerHeight",
			"returnType": "float",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns the inner sight radius for this entity \nRadius will be zero for entities without a sight extension"
		},
		{
			"name": "Entity_GetSightInnerRadius",
			"returnType": "float",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns the inner sight radius for this entity \nRadius will be zero for entities without a sight extension"
		},
		{
			"name": "Entity_GetSightOuterHeight",
			"returnType": "float",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns the outer sight radius for this entity \nRadius will be zero for entities without a sight extension"
		},
		{
			"name": "Entity_GetSightOuterRadius",
			"returnType": "float",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns the outer sight radius for this entity \nRadius will be zero for entities without a sight extension"
		},
		{
			"name": "Entity_GetSquad",
			"returnType": "Squad*",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false}
			],
			"description": "Returns the Squad for the passed Entity. (May be nullptr) "
		},
		{
			"name": "Entity_GetSquadsHeld",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false}
			],
			"description": "Adds squads held by an entity to an SGroup "
		},
		{
			"name": "Entity_GetTotalPanelCount",
			"returnType": "size_t",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false}
			],
			"description": "Gets the total number of panels in a building (returns 0 for anything but panel based destructible buldings) "
		},
		{
			"name": "Entity_GetUndestroyedPanelCount",
			"returnType": "size_t",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false}
			],
			"description": "Gets the current number of undestroyed panels in a building (returns 0 for anything but panel based destructible buldings) "
		},
		{
			"name": "Entity_GetWeaponBlueprint",
			"returnType": "ScarWeaponPBG",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "hardPointIndex", "type": "int", "optional": false}
			],
			"description": "Returns a weapon hardpoint  ( 0 indexed ) "
		},
		{
			"name": "Entity_GetWeaponHardpointCount",
			"returnType": "size_t",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns how many hardpoints an entity has "
		},
		{
			"name": "Entity_HasAnyCritical",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false}
			],
			"description": "Return true if the entity has any critical applied to it "
		},
		{
			"name": "Entity_HasCritical",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false},
				{"name": "criticalPBG", "type": "ScarCriticalPBG", "optional": false}
			],
			"description": "Return true if the entity has the given criticalID applied to it "
		},
		{
			"name": "Entity_HasProductionQueue",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns true if an entity has a production queue. "
		},
		{
			"name": "Entity_HasUpgrade",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false},
				{"name": "upgradePBG", "type": "ScarUpgradePBG", "optional": false}
			],
			"description": "Return true if the entity has purchased the specified upgrade. "
		},
		{
			"name": "Entity_InstantCaptureStrategicPoint",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "player", "type": "Player*", "optional": false}
			],
			"description": "Strategic point will be captured instantly by the team of the supplied player "
		},
		{
			"name": "Entity_InstantRevertOccupiedBuilding",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Reverts an occupied building "
		},
		{
			"name": "Entity_IsAlive",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false}
			],
			"description": "Returns true if entity is still alive "
		},
		{
			"name": "Entity_IsAttacking",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "time", "type": "float", "optional": false}
			],
			"description": "Returns true if the entity is attacking within the time \nTime is in seconds"
		},
		{
			"name": "Entity_IsBuilding",
			"returnType": "bool",
			"parameters": [
				{"name": "e", "type": "Entity*", "optional": false}
			],
			"description": "Returns true if the given entity is a building "
		},
		{
			"name": "Entity_IsBurning",
			"returnType": "bool",
			"parameters": [
				{"name": "e", "type": "Entity*", "optional": false}
			],
			"description": "Returns true if the given entity is burning (buildings on fire or non-buildings with burn_exts) "
		},
		{
			"name": "Entity_IsCamouflaged",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns whether the entity is camouflaged. "
		},
		{
			"name": "Entity_IsCapturableBuilding",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns true if the entity is a capturable building "
		},
		{
			"name": "Entity_IsCasualty",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns true if entity is a casualty else false "
		},
		{
			"name": "Entity_IsCuttable",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns whether this entity is cuttable "
		},
		{
			"name": "Entity_IsDemolitionReady",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns whether this entity's demolition charges are ready to be detonated "
		},
		{
			"name": "Entity_IsEBPBuilding",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "ebp", "type": "ScarEntityPBG", "optional": false}
			],
			"description": "Returns true if the given blueprint is a building "
		},
		{
			"name": "Entity_IsEBPObjCover",
			"returnType": "bool",
			"parameters": [
				{"name": "ebp", "type": "ScarEntityPBG", "optional": false}
			],
			"description": "Returns true if the given blueprint is objcover "
		},
		{
			"name": "Entity_IsHardpointActive",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "hardPointIndex", "type": "int", "optional": false}
			],
			"description": "Returns whether a hardpoint is active ( 0 indexed ) "
		},
		{
			"name": "Entity_IsHoldingAny",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Check if the entity has a hold on anything "
		},
		{
			"name": "Entity_IsInCover",
			"returnType": "Boolean",
			"parameters": [
				{"name": "entityId", "type": "EntityID", "optional": false}
			],
			"description": "Returns true if entity is in cover. "
		},
		{
			"name": "Entity_IsMoving",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false}
			],
			"description": "Returns whether an entity is moving. "
		},
		{
			"name": "Entity_IsOfType",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "type", "type": "const char*", "optional": false}
			],
			"description": "Determines if this entity is of the given type. Types are defined in type_ext/unit_type_list "
		},
		{
			"name": "Entity_IsPartOfSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false}
			],
			"description": "Returns true if the entity is part of a squad "
		},
		{
			"name": "Entity_IsPlane",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false}
			],
			"description": "Returns whether an entity is a plane (has a flight extension) "
		},
		{
			"name": "Entity_IsSlotItem",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Return true if the entity is a slot item "
		},
		{
			"name": "Entity_IsSoldier",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false}
			],
			"description": "Returns whether an entity is a soldier "
		},
		{
			"name": "Entity_IsSpawned",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "if entity is spawned return true "
		},
		{
			"name": "Entity_IsStartingPosition",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns true if the entity is a starting position "
		},
		{
			"name": "Entity_IsStrategicPoint",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns true if the entity is a strategic point. "
		},
		{
			"name": "Entity_IsStrategicPointCapturedBy",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "player", "type": "Player*", "optional": false}
			],
			"description": "Returns true if strategic point is captured by the team of the player provided. "
		},
		{
			"name": "Entity_IsSyncWeapon",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Return true if the entity is a team weapon "
		},
		{
			"name": "Entity_IsUnderAttack",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "time", "type": "float", "optional": false}
			],
			"description": "Returns true if the entity is under attack.  "
		},
		{
			"name": "Entity_IsUnderAttackByPlayer",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "pAttackerOwner", "type": "Player*", "optional": false},
				{"name": "time", "type": "float", "optional": false}
			],
			"description": "Returns true if the entity is under attack by a certain player "
		},
		{
			"name": "Entity_IsUnderAttackFromDirection",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "offset", "type": "int", "optional": false},
				{"name": "timeSeconds", "type": "float", "optional": false}
			],
			"description": "Returns true if the entity was under attack from a certain direction (8 offset types, see LuaConsts.scar) "
		},
		{
			"name": "Entity_IsValid",
			"returnType": "bool",
			"parameters": [
				{"name": "id", "type": "uint32_t", "optional": false}
			],
			"description": "Check if an entity with the given ID can be found in the world "
		},
		{
			"name": "Entity_IsVaultable",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false}
			],
			"description": "Returns whether an entity can be vaulted "
		},
		{
			"name": "Entity_IsVehicle",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false}
			],
			"description": "Returns whether an entity is a vehicle "
		},
		{
			"name": "Entity_IsVictoryPoint",
			"returnType": "bool",
			"parameters": [
				{"name": "*pEntity", "type": "Entity", "optional": false}
			],
			"description": "Returns true if entityID is a victory point "
		},
		{
			"name": "Entity_Kill",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Kill the entity.  Sets health to 0, and triggers death effects. "
		},
		{
			"name": "Entity_NotifyOnPlayerDemolition",
			"returnType": "Void",
			"parameters": [
				{"name": "entity", "type": "Entity", "optional": false},
				{"name": "function", "type": "LuaFunction", "optional": false}
			],
			"description": "Calls a function when an entity gets destroyed by the player clicking the \"Detonate me\" button next to an entity. "
		},
		{
			"name": "Entity_RemoveBoobyTraps",
			"returnType": "void",
			"parameters": [
				{"name": "pEntityTarget", "type": "Entity*", "optional": false}
			],
			"description": "Removes all booby-traps on this entity "
		},
		{
			"name": "Entity_RemoveCritical",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false},
				{"name": "criticalPBG", "type": "ScarCriticalPBG", "optional": false}
			],
			"description": "Remove a critical from a given entity "
		},
		{
			"name": "Entity_RemoveDemolitions",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Removes all demolition charges on an entity "
		},
		{
			"name": "Entity_RemoveUpgrade",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "upgrade", "type": "ScarUpgradePBG", "optional": false}
			],
			"description": "Removes an upgrade from an entity "
		},
		{
			"name": "Entity_SetAnimatorAction",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false},
				{"name": "actionName", "type": "const char*", "optional": false}
			],
			"description": "Trigger animation action for an entity. Please only use this for simple animations "
		},
		{
			"name": "Entity_SetAnimatorActionParameter",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false},
				{"name": "actionParameterName", "type": "const char*", "optional": false},
				{"name": "actionParameterValue", "type": "const char*", "optional": false}
			],
			"description": "Set animation action parameter for an entity. Please only use this for simple animations "
		},
		{
			"name": "Entity_SetAnimatorEvent",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false},
				{"name": "eventName", "type": "const char*", "optional": false}
			],
			"description": "Set animation event for an entity. Please only use this for simple animations "
		},
		{
			"name": "Entity_SetAnimatorState",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false},
				{"name": "stateMachineName", "type": "const char*", "optional": false},
				{"name": "stateName", "type": "const char*", "optional": false}
			],
			"description": "Set animation state of a state machine for an entity. Please only use this for simple animations "
		},
		{
			"name": "Entity_SetAnimatorVariable",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false},
				{"name": "variableName", "type": "const char*", "optional": false},
				{"name": "value", "type": "float", "optional": false}
			],
			"description": "Set animation variable value for an entity. Please only use this for simple animations "
		},
		{
			"name": "Entity_SetBuildingVisualFireState",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false},
				{"name": "newFireState", "type": "BuildingDestructionExt::BuildingFireState", "optional": false}
			],
			"description": "Set the visual fire state of a building (doesn't actually set the building on fire) "
		},
		{
			"name": "Entity_SetCrushable",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "crushable", "type": "bool", "optional": false}
			],
			"description": "Overrides crushable behavior for an entity "
		},
		{
			"name": "Entity_SetCrushMode",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "mode", "type": "CrushExtInfo::CrushMode", "optional": false}
			],
			"description": "Changes the crush mode of a given entity.  Entity must have a crush extension. "
		},
		{
			"name": "Entity_SetDemolitions",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "numcharges", "type": "int", "optional": false}
			],
			"description": "Fully wires this entity for demolitions, if it's set up to be demolishable. 'player' is the one that owns the demolitions and can detonate them. "
		},
		{
			"name": "Entity_SetEnableCasualty",
			"returnType": "void",
			"parameters": [
				{"name": "enable", "type": "bool", "optional": false},
				{"name": "pEntity", "type": "Entity*", "optional": false}
			],
			"description": ""
		},
		{
			"name": "Entity_SetHeading",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "bInterpolate", "type": "bool", "optional": false}
			],
			"description": "Sets the heading of the entity.  The position is currently a lua table with three entries (x, y, z) "
		},
		{
			"name": "Entity_SetHealth",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "healthPercent", "type": "float", "optional": false}
			],
			"description": "Set the health of an entity.  healthPercent must be in the range [0.0, 1.0]. "
		},
		{
			"name": "Entity_SetInvulnerable",
			"returnType": "Void",
			"parameters": [
				{"name": "entity", "type": "EntityID", "optional": false},
				{"name": "enable", "type": "Bool", "optional": false},
				{"name": "reset_time", "type": "Float", "optional": false}
			],
			"description": "Set invulnerability on the entity. Reset time is in seconds. If it it set, the invulnerability will expire after this time. "
		},
		{
			"name": "Entity_SetInvulnerableMinCap",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "minHealthPercentage", "type": "float", "optional": false},
				{"name": "resetTime", "type": "float", "optional": false}
			],
			"description": "Make an entity invulnerable to physical damage when health is below the minimum health percentage \nresetTime is the time in seconds that vulnerability will be restored.; zero time for reset time means the buff will last forever"
		},
		{
			"name": "Entity_SetInvulnerableToCritical",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "invulnerable", "type": "bool", "optional": false}
			],
			"description": "set an entity invulnerable to critical effects. Invulnerable to critical also means that kills a entity will not have effect "
		},
		{
			"name": "Entity_SetOnFire",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false}
			],
			"description": "Sets an object on fire (also works on buildings) "
		},
		{
			"name": "Entity_SetPlayerOwner",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "owner", "type": "Player*", "optional": false}
			],
			"description": "Changes the owner of the given squad. \nThis function doesn't work with strategic/capturable point"
		},
		{
			"name": "Entity_SetPosition",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false}
			],
			"description": "Sets the position of the entity.  The position is currently a lua table with three entries (x, y, z) "
		},
		{
			"name": "Entity_SetProjectileCanExplode",
			"returnType": "void",
			"parameters": [
				{"name": "projectile", "type": "Entity*", "optional": false},
				{"name": "canExplode", "type": "bool", "optional": false}
			],
			"description": "Sets whether or not a projectile can explode.  "
		},
		{
			"name": "Entity_SetRecrewable",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "capturable", "type": "bool", "optional": false}
			],
			"description": "Sets an entity to be recrewable or not when it becomes abandoned "
		},
		{
			"name": "Entity_SetSharedProductionQueue",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "shared", "type": "bool", "optional": false}
			],
			"description": "Enables shared team production on a building (teammates can build using THEIR resources) "
		},
		{
			"name": "Entity_SetStrategicPointNeutral",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Sets a strategic point to neutral (not owned by any team) "
		},
		{
			"name": "Entity_SetWorldOwned",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Makes an entity neutral "
		},
		{
			"name": "Entity_SimHide",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "hide", "type": "bool", "optional": false}
			],
			"description": "Shows/hides the entity in the simulation "
		},
		{
			"name": "Entity_Spawn",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Spawn the entity at its current position "
		},
		{
			"name": "Entity_StopAbility",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "ability", "type": "ScarAbilityPBG", "optional": false},
				{"name": "bEarlyExit", "type": "bool", "optional": false}
			],
			"description": "Abruptly stops an active ability "
		},
		{
			"name": "Entity_SuggestPosture",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "posture", "type": "unsigned", "optional": false},
				{"name": "duration", "type": "float", "optional": false}
			],
			"description": "Suggests a posture to an entity, lasting the passed duration \nPosture of 0 is prone, 1 is kneel/crouch, and 2 is standing.  Duration is in seconds, negative means indefinate."
		},
		{
			"name": "Entity_SupportsDemolition",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns whether this entity is set up to have demolitions placed on it "
		},
		{
			"name": "Entity_TagDebug",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Tags the entity to be used for debugging "
		},
		{
			"name": "Entity_VisHide",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false},
				{"name": "bHide", "type": "bool", "optional": false}
			],
			"description": "Hides or shows an entity visually. "
		},
		{
			"name": "Misc_DoWeaponHitEffectOnPosition",
			"returnType": "void",
			"parameters": [
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "weaponPBG", "type": "ScarWeaponPBG", "optional": false},
				{"name": "penetrated", "type": "bool", "optional": false}
			],
			"description": "Do weapon hit effect on the ground \nWeaponID is the property bag group id; if penetrated is set to false, deflection effect would be played instead"
		},
		{
			"name": "Misc_GetTerrainHeight",
			"returnType": "float",
			"parameters": [
				{"name": "p", "type": "ScarPosition", "optional": false}
			],
			"description": "Returns the terrain height at the top-down co-ordinate specified (for terrain entities can walk on only) "
		},
		{
			"name": "Misc_ToggleEntities",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Hide all world entities for NIS performance debugging. "
		},
		{
			"name": "ModMisc_MakeCasualtyAction",
			"returnType": "void",
			"parameters": [
				{"name": "pTargetEntity", "type": "Entity*", "optional": false}
			],
			"description": "Make the passed entity a casualty by triggering the MakeCasualtyAction "
		},
		{
			"name": "ModMisc_MakeWreckAction",
			"returnType": "void",
			"parameters": [
				{"name": "pTargetEntity", "type": "Entity*", "optional": false}
			],
			"description": "Make the passed entity a wreck by triggering the MakeWreckAction "
		},
		{
			"name": "ModMisc_OOCAction",
			"returnType": "void",
			"parameters": [
				{"name": "pTargetEntity", "type": "Entity*", "optional": false}
			],
			"description": "Make the passed entity go out of control \nTriggers an OutOfControlAction on the unit.  Does not trigger any actions associated with an OOC weapon hit critical, just the OOC action."
		},
		{
			"name": "UI_EnableEntityDecorator",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "enabled", "type": "bool", "optional": false}
			],
			"description": "Turn on or off entity decorator. The default is decorator enabled. "
		},
		{
			"name": "UI_EnableEntityMinimapIndicator",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "enabled", "type": "bool", "optional": false}
			],
			"description": "Turn on or off entity minimap indicator. The default is enabled. "
		},
		{
			"name": "UI_EnableEntitySelectionVisuals",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "enabled", "type": "bool", "optional": false}
			],
			"description": "Turn on or off entity selection visuals. The default is visuals enabled. "
		},
		{
			"name": "UI_EnableSquadDecorator",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "enabled", "type": "bool", "optional": false}
			],
			"description": "Turn on or off squad decorator. The default is decorator enabled. "
		},
		{
			"name": "UI_EnableSquadMinimapIndicator",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "enabled", "type": "bool", "optional": false}
			],
			"description": "Turn on or off squad minimap indicator. The default is enabled. "
		},
		{
			"name": "UI_GetAbilityIconName",
			"returnType": "const char*",
			"parameters": [
				{"name": "abilityBag", "type": "ScarAbilityPBG", "optional": false}
			],
			"description": "Returns the icon name for a given ability "
		},
		{
			"name": "Event_CreateAND",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "events", "type": "Table", "optional": false},
				{"name": "delay", "type": "Float", "optional": true}
			],
			"description": "Creates a Callback Event that triggers when ALL of the specified events are triggered. \nOriginal events are removed."
		},
		{
			"name": "Event_CreateOR",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "events", "type": "Table", "optional": false},
				{"name": "delay", "type": "Float", "optional": true}
			],
			"description": "Creates a Callback Event that triggers when ANY of the specified events are triggered. \nOriginal events are removed."
		},
		{
			"name": "Event_ElementOnScreen",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "element", "type": "Marker/Pos/SGroup/EGroup", "optional": false},
				{"name": "all", "type": "ANY/ALL", "optional": true},
				{"name": "percent", "type": "Float", "optional": true},
				{"name": "canSee", "type": "bool", "optional": true},
				{"name": "delay", "type": "Float", "optional": true}
			],
			"description": "Callback given callback function with data, when the given squad/entity/position is on screen.  \nCallback data parameter is agumented with: _player = PlayerID player, _element = SGroup/EGroup element"
		},
		{
			"name": "Event_EncounterIsDead",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "[", "type": "Table!encID", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Trigger a Callback when an encounter is killed.  \nCallback parameter data augmented with: _encounterID, the encounter's reference"
		},
		{
			"name": "Event_Exists",
			"returnType": "BOOL",
			"parameters": [
				{"name": "eventID", "type": "EventID", "optional": false}
			],
			"description": "checks to see if the given event currently exists "
		},
		{
			"name": "Event_GroupBurning",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "group/entityID[", "type": "EGroup/Entity", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given callback function with data, when the egroup is burning  \nCallback parameter data augmented with: _group = EGroup/Entity group/entityID"
		},
		{
			"name": "Event_GroupIsDead",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "group[", "type": "EGroup/SGroup", "optional": false},
				{"name": "delay", "type": "Float", "optional": false},
				{"name": "retreating", "type": "Boolean", "optional": false}
			],
			"description": "Callback given callback function with data, when group is dead (empty).  \nCallback parameter data augmented with: _group = EGroup/SGroup group. Optional Retreating param will check if the unit is retreating as an alternate (for team weapons)"
		},
		{
			"name": "Event_GroupIsNotPinned",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "group[", "type": "SGroup", "optional": false},
				{"name": "ANY/ALL", "type": "bool", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given callback function with data, when group is not pinned  \nCallback parameter data augmented with: _group = SGroup group. Note: being suppressed counts as not being pinned"
		},
		{
			"name": "Event_GroupIsNotSuppressed",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "group[", "type": "SGroup", "optional": false},
				{"name": "ANY/ALL", "type": "bool", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given callback function with data, when group is not suppressed.  \nCallback parameter data augmented with: _group = SGroup group. Note: being pinned counts as not being suppressed."
		},
		{
			"name": "Event_GroupIsPinned",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "group[", "type": "SGroup", "optional": false},
				{"name": "ANY/ALL", "type": "bool", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given callback function with data, when group is pinned  \nCallback parameter data augmented with: _group = SGroup group. "
		},
		{
			"name": "Event_GroupIsSuppressed",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "group[", "type": "SGroup", "optional": false},
				{"name": "ANY/ALL", "type": "bool", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given callback function with data, when group is suppressed.  \nCallback parameter data augmented with: _group = SGroup group. "
		},
		{
			"name": "Event_GroupLeftAlive",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "group", "type": "EGroup/SGroup", "optional": false},
				{"name": "amount[", "type": "Int", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given callback function with data, when the amount of entities left in a group drops below amount.  \nCallback parameter data augmented with: _group = EGroup/SGroup group, _amount = Int amount"
		},
		{
			"name": "Event_IsDoingAttack",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "group", "type": "EGroup/SGroup", "optional": false},
				{"name": "all", "type": "ANY/ALL", "optional": false},
				{"name": "attackTime[", "type": "Float", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given callback function with data, when group is doing an attack in the last attackTime seconds.  \nCallback parameter data augmented with: _group = EGroup/SGroup group, _attackTime = Float attackTime"
		},
		{
			"name": "Event_IsEngaged",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "group", "type": "EGroup/SGroup", "optional": false},
				{"name": "all", "type": "ANY/ALL", "optional": false},
				{"name": "attackTime[", "type": "Float", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given callback function with data, when group is doing an attack or is under attack in the last attackTime seconds.  \nCallback parameter data augmented with: _group = EGroup/SGroup group, _attackTime = Float attackTime"
		},
		{
			"name": "Event_IsHoldingAny",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "target", "type": "EGroup/SGroup/Entity/Squad", "optional": false},
				{"name": "empty[", "type": "Boolean", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given callback function with data, when an element is holding anything or nothing.  \nCallback parameter data augmented with: _target = EGroup/SGroup/Entity/Squad target, _empty = Bool isEmpty"
		},
		{
			"name": "Event_IsInHold",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "target", "type": "SGroup/Squad", "optional": false},
				{"name": "inHold", "type": "Boolean", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given callback function with data, when a target element is in a hold or not.  \nCallback parameter data augmented with: _target = SGroup/Squad target, _inHold = Bool inHold"
		},
		{
			"name": "Event_IsSelected",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "target", "type": "SGroup/Squad/EGroup/entity", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback when a target element is selected.  \nCallback parameter data augmented with: _target = EGroup/Entity/SGroup/Squad target, _all = Bool ANY/ALL"
		},
		{
			"name": "Event_IsUnderAttack",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "group", "type": "EGroup/SGroup", "optional": false},
				{"name": "ANY/ALL", "type": "bool", "optional": false},
				{"name": "attackTime[", "type": "Float", "optional": false},
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given callback function with data, when group is under attack in the last attackTime seconds.  \nCallback parameter data augmented with: _group = EGroup/SGroup group, _attackTime = Float attackTime"
		},
		{
			"name": "Event_NarrativeEventsNotRunning",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "delay", "type": "Float", "optional": true}
			],
			"description": "Callback given callback function with data, a narrative event is running.  "
		},
		{
			"name": "Event_NarrativeEventsRunning",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "delay", "type": "Float", "optional": true}
			],
			"description": "Callback given callback function with data, when no narrative events are running.  "
		},
		{
			"name": "Event_OnHealth",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "target", "type": "EGroup/SGroup/Entity/Squad", "optional": false},
				{"name": "threshold", "type": "Float", "optional": false},
				{"name": "higher[", "type": "Boolean", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given callback function with data, when an element's health falls below (or above if higher is true) given threshold.  "
		},
		{
			"name": "Event_PlayerBuildingCount",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "[", "type": "Int!amountOfBuilding", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given function with data, when player has greater than or equal to amountOfBuildings  \nCallback parameter data augmented with: _player = PlayerID player, _amountOfBuildings = Int amountOfBuildings"
		},
		{
			"name": "Event_PlayerCanNotSeeElement",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "element[", "type": "SquadID/SGroupID/EntityID/EGroupID/Marker/Position!Table", "optional": false},
				{"name": "all", "type": "ANY/ALL", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given callback function with data, when the given player can not see the element.  \nCallback data parameter is augmented with: _player = PlayerID player, _elements = Table inputElements, _seenElements = Table allSeenElements"
		},
		{
			"name": "Event_PlayerCanSeeElement",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "player/team", "type": "PlayerID/TeamID", "optional": false},
				{"name": "element[", "type": "SquadID/SGroupID/EntityID/EGroupID/Marker/Position!Table", "optional": false},
				{"name": "all", "type": "ANY/ALL", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given callback function with data, when the given player can see the element.  \nCallback data parameter is augmented with: _player = PlayerID player, _elements = Table inputElements, _seenElements = Table allSeenElements"
		},
		{
			"name": "Event_PlayerDoesntOwnTerritory",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "sectorID/group/entity[", "type": "Int/Table/EGroup/Entity", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given callback function with data, when player owns none of the given territories.  \nCallback parameter data augmented with: _player = PlayerID player, _territory = Int/Table sectorID OR EGroup/Entity of a capture point"
		},
		{
			"name": "Event_PlayerOwnsElement",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "[", "type": "Entity/EGroup/Squad/SGroup!element", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given  function with data, when player owns the given element \nCallback parameter data augmented with: _player = PlayerID player, _element = Entity/EGroup/Squad/SGroup element"
		},
		{
			"name": "Event_PlayerOwnsTerritory",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "territory[", "type": "SectorID/EGroup/Entity/Table", "optional": false},
				{"name": "all", "type": "ANY/ALL", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given callback function with data, when player owns all given territories.  \nCallback parameter data augmented with: _player = PlayerID player, _territory = sectorID/EGroup/Entity/Table of a capture point"
		},
		{
			"name": "Event_PlayerResourceLevel",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "resourceType", "type": "<a href=\"enum_list.htm#ResourceType\">ResourceType</a>", "optional": false},
				{"name": "amount", "type": "Int", "optional": false},
				{"name": "delay", "type": "Float", "optional": true}
			],
			"description": "Callback given callback function with data, when player has more than amount of resourceType.  \nCallback data parameter is augmented with: _player = PlayerID player, _resourceType = ResourceType resourceType, _amount = Int amount"
		},
		{
			"name": "Event_PlayerSquadCount",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "false", "type": "Bool!areRunning!=", "optional": true},
				{"name": "delay", "type": "Float", "optional": true}
			],
			"description": "Callback given callback function with data, when no narrative events are running.  "
		},
		{
			"name": "Event_Proximity",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "target", "type": "PlayerID/Squad/Table/TeamID", "optional": false},
				{"name": "location", "type": "Marker/Pos/SectorID/Table/SGroup/EGroup", "optional": false},
				{"name": "range", "type": "REAL", "optional": false},
				{"name": "all", "type": "ANY/ALL", "optional": true},
				{"name": "delay", "type": "Float", "optional": true}
			],
			"description": "Callback given callback function with data when target enters location. \nCallback data parameter augmented with (could be nil): _result_location = Pos/Marker/Table/SGroup/EGroup/SectorID proximity position."
		},
		{
			"name": "Event_Remove",
			"returnType": "Void",
			"parameters": [
				{"name": "eventID", "type": "EventID", "optional": false}
			],
			"description": "Remove the given callback "
		},
		{
			"name": "Event_RemoveAll",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Remove all existing callback events. "
		},
		{
			"name": "Event_TeamBuildingCount",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "[", "type": "Int!amountOfBuilding", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given function with data, when player has greater than or equal to amountOfBuildings  \nCallback parameter data augmented with: _player = PlayerID player, _amountOfBuildings = Int amountOfBuildings"
		},
		{
			"name": "Event_TeamCanNotSeeElement",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "element[", "type": "SquadID/SGroupID/EntityID/EGroupID/Marker/Position!Table", "optional": false},
				{"name": "all", "type": "ANY/ALL", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given callback function with data, when the given team can not see the element.  \nCallback data parameter is augmented with: _team = TeamID team, _elements = Table inputElements, _seenElements = Table allSeenElements"
		},
		{
			"name": "Event_TeamCanSeeElement",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "element[", "type": "SquadID/SGroupID/EntityID/EGroupID/Marker/Position!Table", "optional": false},
				{"name": "all", "type": "ANY/ALL", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given callback function with data, when the given team can see the element.  \nCallback data parameter is augmented with: _team = TeamID team, _elements = Table inputElements, _seenElements = Table allSeenElements"
		},
		{
			"name": "Event_TeamDoesntOwnTerritory",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "sectorID/group/entity[", "type": "Int/Table/EGroup/Entity", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given callback function with data, when a team owns none of the given territories.  \nCallback parameter data augmented with: _team = TeamID team, _territory = Int/Table sectorID OR EGroup/Entity of a capture point"
		},
		{
			"name": "Event_TeamOwnsElement",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "[", "type": "Entity/EGroup/Squad/SGroup!element", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given  function with data, when a team owns the given element \nCallback parameter data augmented with: _team = TeamID team, _element = Entity/EGroup/Squad/SGroup element"
		},
		{
			"name": "Event_TeamOwnsTerritory",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "sectorID/group/entity[", "type": "Int/Table/EGroup/Entity", "optional": false},
				{"name": "all", "type": "ANY/ALL", "optional": false},
				{"name": "delay", "type": "Float", "optional": false}
			],
			"description": "Callback given callback function with data, when a team owns all given territories.  \nCallback parameter data augmented with: _team = TeamID team, _territory = Int/Table sectorID OR EGroup/Entity of a capture point"
		},
		{
			"name": "Event_TeamResourceLevel",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "resourceType", "type": "<a href=\"enum_list.htm#ResourceType\">ResourceType</a>", "optional": false},
				{"name": "amount", "type": "Int", "optional": false},
				{"name": "delay", "type": "Float", "optional": true}
			],
			"description": "Callback given callback function with data, when a team has a combined amount more than amount of resourceType.  \nCallback data parameter is augmented with: _team = TeamID team, _resourceType = ResourceType resourceType, _amount = Int amount"
		},
		{
			"name": "Event_TeamSquadCount",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "false", "type": "Bool!areRunning!=", "optional": true},
				{"name": "delay", "type": "Float", "optional": true}
			],
			"description": "Callback given callback function with data, when no narrative events are running.  "
		},
		{
			"name": "Event_Timer",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function", "optional": false},
				{"name": "data", "type": "Table", "optional": false},
				{"name": "delay", "type": "INT/Table", "optional": false}
			],
			"description": "Callback given callback function with data, after a specified delay.  \nDelay can be a table containing two numbers and will randomly select a delay from between the two"
		},
		{
			"name": "Event_ToggleDebug",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Toggles the ScarEvent debugger ON and OFF "
		},
		{
			"name": "Event_View",
			"returnType": "Void",
			"parameters": [
				{"name": "eventID", "type": "INT", "optional": false}
			],
			"description": "Calls the view_manager on a ScarEvent with a specific ID. "
		},
		{
			"name": "EventHandler_AssignEncounterGoal",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table", "optional": false}
			],
			"description": "Callback helper function for assigning a goal to an Encounter. Name of \"parameters\": 'goalData', 'encounter'. \nExample usage: Event_*(EventHandler_AssignEncounterGoal, {encounter = myEncounter, goalData = myGoalData}, ..."
		},
		{
			"name": "EventHandler_ObjectiveComplete",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table", "optional": false}
			],
			"description": "Callback helper function for completing an objective. Received \"parameters\": Table objective, Bool showTitle, Bool skipIntel \nExample usage: Event_*(EventHandler_ObjectiveComplete, {objective = objectiveID}, ..."
		},
		{
			"name": "EventHandler_ObjectiveStart",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table", "optional": false}
			],
			"description": "Callback helper function for starting an objective, name of objective parameter is objective, additional \"parameters\": Bool showTitle, Bool skipIntel \nExample usage: Event_*(EventHandler_ObjectiveStart, {objective = objectiveID, showTitle = true, skipIntel = true}, ..."
		},
		{
			"name": "EventHandler_RemoveHint",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table", "optional": false}
			],
			"description": "Callback helper function for removing in-game hints. Name of hintpointID parameter is 'hint'. Can receive a table of ID's. \nExample usage: Event_*(EventHandler_RemoveHint, {hint = hp_hintPointID}, ..."
		},
		{
			"name": "EventHandler_RemoveMinimapBlip",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table", "optional": false}
			],
			"description": "Callback helper function for removing in minimap blips, name of blipID parameter is blip \nExample usage: Event_*(EventHandler_RemoveMinimapBlip, {blip = blipID}, ..."
		},
		{
			"name": "EventHandler_RemoveObjectiveUI",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table", "optional": false}
			],
			"description": "Callback helper function that removes objective UI elements, name of \"parameters\": objective, element \nExample usage: Event_*(Objective_RemoveUIElements, {element = elementID, objective = objectiveID}, ..."
		},
		{
			"name": "EventHandler_Retreat",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table", "optional": false}
			],
			"description": "Callback helper function that causes the input group to retreat, name of \"parameters\": group, location, deleteAtMarker, queued \nExample usage: Event_*(EventHandler_Retreat, {group = sg_group, location = mkr_option, deleteAtMarker = true, queued = false}, ..."
		},
		{
			"name": "EventHandler_StaggeredRetreat",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table", "optional": false}
			],
			"description": "Callback helper function that causes the input group to retreat, name of \"parameters\": group, location, maxTries \nExample usage: Event_*(EventHandler_Retreat, {group = sg_group, location = mkr_option, maxTries = 8}, ..."
		},
		{
			"name": "EventHandler_StartIntel",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table", "optional": false}
			],
			"description": "Callback helper function for Intel events, name of intel parameter is intel \nExample usage: Event_*(EventHandler_StartIntel, {intel = EVENTS.Speech01}, ..."
		},
		{
			"name": "EventHandler_StartNislet",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table", "optional": false}
			],
			"description": "Callback helper function for Intel Nislet events, name of intel parameter is intel \nExample usage: Event_*(EventHandler_StartIntel, {intel = EVENTS.Nislet01}, ..."
		},
		{
			"name": "EventHandler_StopFlashing",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table", "optional": false}
			],
			"description": "Callback helper function for removing UI flashing. Name of ID parameter is flashID \nExample usage: Event_*(EventHandler_StopFlashing, {flashID = myFlashID}, ..."
		},
		{
			"name": "FOW_PlayerExploreAll",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false}
			],
			"description": "Explores entire map for one player "
		},
		{
			"name": "FOW_PlayerRevealAll",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false}
			],
			"description": "Reveal FOW for specified player "
		},
		{
			"name": "FOW_PlayerRevealArea",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "radius", "type": "float", "optional": false},
				{"name": "durationSecs", "type": "float", "optional": false}
			],
			"description": "Reveals a circular area for the given player over a given duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA. \nPass in a duration of -1 for indefinite duration ( until unreveal is called )"
		},
		{
			"name": "FOW_PlayerUnExploreAll",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false}
			],
			"description": "Unexplores entire map for one player "
		},
		{
			"name": "FOW_PlayerUnRevealAll",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false}
			],
			"description": "Use to undo a FOW_RevealAll for specified player "
		},
		{
			"name": "FOW_PlayerUnRevealArea",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "radius", "type": "float", "optional": false}
			],
			"description": "UnReveals a circular area for a given player. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA. "
		},
		{
			"name": "FOW_RevealAll",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Reveal FOW for all players "
		},
		{
			"name": "FOW_RevealArea",
			"returnType": "void",
			"parameters": [
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "radius", "type": "float", "optional": false},
				{"name": "durationSecs", "type": "float", "optional": false}
			],
			"description": "Reveals a circular area for all alive players over a given duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA. \nPass in a duration of -1 for indefinite duration ( until unreveal is called )"
		},
		{
			"name": "FOW_RevealEGroup",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "EGroup*", "optional": false},
				{"name": "durationSecs", "type": "float", "optional": false}
			],
			"description": "Reveals an entity groups line of sight(LOS) for all alive players over a given duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA. \nPass in a duration of -1 for indefinite duration ( until the entities are dead )"
		},
		{
			"name": "FOW_RevealEGroupOnly",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "EGroup*", "optional": false},
				{"name": "durationSecs", "type": "float", "optional": false}
			],
			"description": "Reveals an entity groups in FOW for all alive players over a given duration. \nPass in a duration of -1 for indefinite duration ( until the entities are dead )"
		},
		{
			"name": "FOW_RevealEntity",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "durationSecs", "type": "float", "optional": false}
			],
			"description": "Reveals an entities line of sight (LOS) for all alive players over a given duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA. \nPass in a duration of -1 for indefinite duration ( until the entity is dead )"
		},
		{
			"name": "FOW_RevealMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "marker", "type": "MarkerID", "optional": false},
				{"name": "duration", "type": "Real", "optional": false}
			],
			"description": "Reveals an area the size of a given markers proximity at that markers position for a given amount of time. Pass in a duration of 1 for indefinite duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA.  \nThis function will reveal the FOW for ALL alive players. This does not work with markers with rectangular proximity type"
		},
		{
			"name": "FOW_RevealSGroup",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "SGroup*", "optional": false},
				{"name": "durationSecs", "type": "float", "optional": false}
			],
			"description": "Reveals a squad groups line of sight(LOS) for all alive players over a given duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA. \nPass in a duration of -1 for indefinite duration ( until the squads are dead )"
		},
		{
			"name": "FOW_RevealSGroupOnly",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "SGroup*", "optional": false},
				{"name": "durationSecs", "type": "float", "optional": false}
			],
			"description": "Reveals a squad groups in fow for all alive players over a given duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA. \nPass in a duration of -1 for indefinite duration ( until the squads are dead )"
		},
		{
			"name": "FOW_RevealSquad",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "durationSecs", "type": "float", "optional": false}
			],
			"description": "Reveals a squads line if sight(LOS) for all alive players over a given duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA. \nPass in a duration of -1 for indefinite duration ( until the entity is dead )"
		},
		{
			"name": "FOW_RevealTerritory",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "sectorID", "type": "int", "optional": false},
				{"name": "durationSecs", "type": "float", "optional": false},
				{"name": "mustOwn", "type": "bool", "optional": false}
			],
			"description": "Reveals a territory to a player "
		},
		{
			"name": "FOW_UnRevealAll",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Use to undo a FOW_RevealAll "
		},
		{
			"name": "FOW_UnRevealArea",
			"returnType": "void",
			"parameters": [
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "radius", "type": "float", "optional": false}
			],
			"description": "UnReveals a circular area for all alive players. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA. "
		},
		{
			"name": "FOW_UnRevealMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "marker", "type": "MarkerID", "optional": false}
			],
			"description": "Unreveals an area the size of a given markers proximity at that markers position. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA.  \nThis does not work with markers with rectangular proximity type"
		},
		{
			"name": "FOW_UnRevealTerritory",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "sectorID", "type": "int", "optional": false}
			],
			"description": "Unreveals a territory sector "
		},
		{
			"name": "EGroup_CreateTable",
			"returnType": "LuaTable",
			"parameters": [
				{"name": "format", "type": "String", "optional": false},
				{"name": "size", "type": "Integer", "optional": false}
			],
			"description": "Returns a table of egroups NOT in the world builder \nSee Marker_GetTable for more info on format parameter"
		},
		{
			"name": "EGroup_GetWBTable",
			"returnType": "LuaTable",
			"parameters": [
				{"name": "format", "type": "String", "optional": false}
			],
			"description": "Returns a table of egroups from the world builder \nSee Marker_GetTable for more info on format parameter"
		},
		{
			"name": "Marker_GetNonSequentialTable",
			"returnType": "LuaTable",
			"parameters": [
				{"name": "format", "type": "String", "optional": false},
				{"name": "size", "type": "Integer", "optional": false}
			],
			"description": "Returns a fixed size table of markers from the world builder.  Markers that do not exist in the WB, will be nil in the table.  This is why we call it 'non-sequential' "
		},
		{
			"name": "Marker_GetTable",
			"returnType": "LuaTable",
			"parameters": [
				{"name": "format", "type": "String", "optional": false}
			],
			"description": "Returns a table of markers from the world builder. Creates as many as it finds \nmkr_table = Marker_GetTable( 'mkr_%d' ) -- creates a table with 3 markers named 'mkr_1', 'mkr_2', and 'mkr_3' (and so on) from the WB&lt;BR/&gt;&lt;BR/&gt; mkr_table2 = Marker_GetTable( 'mkr_%02d' )  -- creates a table with 3 markers named 'mkr_01', 'mkr_02', 'mkr_03' (and so on) from the WB&lt;BR/&gt;&lt;BR/&gt; mkr_table3 = Marker_GetTable( 'mkr_%03d_patrol' )  -- creates a table with 3 markers named 'mkr_001_patrol', 'mkr_002_patrol' (and so on) from the WB&lt;BR/&gt;&lt;BR/&gt;"
		},
		{
			"name": "SGroup_CreateTable",
			"returnType": "LuaTable",
			"parameters": [
				{"name": "format", "type": "String", "optional": false},
				{"name": "size", "type": "Integer", "optional": false}
			],
			"description": "Returns a table of sgroups NOT in the world builder \nSee Marker_GetTable for more info on format parameter"
		},
		{
			"name": "SGroup_GetWBTable",
			"returnType": "LuaTable",
			"parameters": [
				{"name": "format", "type": "String", "optional": false}
			],
			"description": "Returns a table of sgroups from the world builder \nSee Marker_GetTable for more info on format parameter"
		},
		{
			"name": "Marker_DoesNumberAttributeExist",
			"returnType": "bool",
			"parameters": [
				{"name": "marker", "type": "ScarMarker", "optional": false},
				{"name": "attrname", "type": "const char*", "optional": false}
			],
			"description": "Returns true if a generic number attribute exists for the marker type. "
		},
		{
			"name": "Marker_DoesStringAttributeExist",
			"returnType": "bool",
			"parameters": [
				{"name": "marker", "type": "ScarMarker", "optional": false},
				{"name": "attrname", "type": "const char*", "optional": false}
			],
			"description": "Returns true if a generic string attribute exists for the marker type. "
		},
		{
			"name": "Marker_Exists",
			"returnType": "bool",
			"parameters": [
				{"name": "name", "type": "const char*", "optional": false},
				{"name": "type", "type": "const char*", "optional": false}
			],
			"description": "Returns true if marker exists. If you don't care about the type, pass in an empty string ( \"\" ) "
		},
		{
			"name": "Marker_FromName",
			"returnType": "ScarMarker",
			"parameters": [
				{"name": "name", "type": "const char*", "optional": false},
				{"name": "type", "type": "const char*", "optional": false}
			],
			"description": "Returns a ScarMarker from the Mission Editor. If you don't care about the type, pass in an empty string ( \"\" ) \n  The type is defined in the markers list of the mission editor when placing markers.&lt;BR/&gt;  You will need the result of this function to call any functions that start with Marker_"
		},
		{
			"name": "Marker_GetDirection",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "marker", "type": "ScarMarker", "optional": false}
			],
			"description": "Returns a vector for the marker direction "
		},
		{
			"name": "Marker_GetName",
			"returnType": "const char*",
			"parameters": [
				{"name": "marker", "type": "ScarMarker", "optional": false}
			],
			"description": "Returns the name of a given marker.  This value gets set in the Mission Editor. "
		},
		{
			"name": "Marker_GetNumberAttribute",
			"returnType": "float",
			"parameters": [
				{"name": "marker", "type": "ScarMarker", "optional": false},
				{"name": "attrname", "type": "const char*", "optional": false}
			],
			"description": "Returns a generic number attribute defined in a marker. \n  Different marker types have different attributes. Note: All marker types have Name and Proximity.  Do not use this function to retrieve these values, use Marker_GetName and Marker_GetProximity instead."
		},
		{
			"name": "Marker_GetPosition",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "marker", "type": "ScarMarker", "optional": false}
			],
			"description": "Returns the position of a given marker. "
		},
		{
			"name": "Marker_GetProximityRadius",
			"returnType": "float",
			"parameters": [
				{"name": "marker", "type": "ScarMarker", "optional": false}
			],
			"description": "Returns the proximity radius of a given marker.  Only for marker with proximity type PT_Circle. This value gets set in the Mission Editor. "
		},
		{
			"name": "Marker_GetProximityType",
			"returnType": "MarkerObj::ProximityType",
			"parameters": [
				{"name": "marker", "type": "ScarMarker", "optional": false}
			],
			"description": "Returns the proximity type of a given marker.  The possible results are PT_Circle and PT_Rectangle "
		},
		{
			"name": "Marker_GetSequence",
			"returnType": "Table",
			"parameters": [
				{"name": "name", "type": "String", "optional": false},
				{"name": "type", "type": "String", "optional": false}
			],
			"description": "Builds a table of MarkerIDs that are named in a sequence. i.e. a name of \"spot\" will find markers \"spot1\", \"spot2\" and so on, up until it looks for a marker that isn't there. "
		},
		{
			"name": "Marker_GetStringAttribute",
			"returnType": "std::string",
			"parameters": [
				{"name": "marker", "type": "ScarMarker", "optional": false},
				{"name": "attrname", "type": "const char*", "optional": false}
			],
			"description": "Returns a generic string attribute defined in a marker. Different marker types can have different attributes.  Note: All marker types have Name and Proximity.  Do not use this function to retrieve these values, use Marker_GetName and Marker_GetProximity instead. See markertypes.lua for a listing of all the marker types."
		},
		{
			"name": "Marker_GetType",
			"returnType": "const char*",
			"parameters": [
				{"name": "marker", "type": "ScarMarker", "optional": false}
			],
			"description": "Returns the typename of a given marker.  This is the typename from the Mission Editor (name displayed when placing markers) "
		},
		{
			"name": "Marker_InProximity",
			"returnType": "bool",
			"parameters": [
				{"name": "marker", "type": "ScarMarker", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false}
			],
			"description": "Returns true if the given position is in the markers proximity radius or proximity rectangle (depending on the type). "
		},
		{
			"name": "Modifier_IsEnabledOnEGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "modifier", "type": "String", "optional": false},
				{"name": "modtype", "type": "String", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false},
				{"name": "bEnabledByDefault", "type": "Boolean", "optional": false}
			],
			"description": "Checks if a modifier is enabled on all or any entities in an egroup "
		},
		{
			"name": "Modifier_Remove",
			"returnType": "Void",
			"parameters": [
				{"name": "modifier", "type": "ModID", "optional": false}
			],
			"description": "Remove an applied modifier.  "
		},
		{
			"name": "Modifier_RemoveAllFromEGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false}
			],
			"description": "Removes all SCAR-applied modifiers for a specific EGroup.  "
		},
		{
			"name": "Modifier_RemoveAllFromSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false}
			],
			"description": "Removes all SCAR-applied modifiers for a specific SGroup.  "
		},
		{
			"name": "Modify_AbilityDelayTime",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "ability", "type": "AbilityID", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies the initial delay time of an ability "
		},
		{
			"name": "Modify_AbilityDurationTime",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "ability", "type": "AbilityID", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies the duration of an ability "
		},
		{
			"name": "Modify_AbilityManpowerCost",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "ability", "type": "AbilityID", "optional": false},
				{"name": "scalefactor[", "type": "Real", "optional": false},
				{"name": "mathtype", "type": "Integer", "optional": false}
			],
			"description": "Modifies the manpower cost of an ability "
		},
		{
			"name": "Modify_AbilityMaxCastRange",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "ability", "type": "AbilityID", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies the maximum casting range of an ability. NOTE: it assumes that the actions that the ability executes can also handle the modified range "
		},
		{
			"name": "Modify_AbilityMinCastRange",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "ability", "type": "AbilityID", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies the minimum casting range of an ability. NOTE: it assumes that the actions that the ability executes can also handle the modified range "
		},
		{
			"name": "Modify_AbilityMunitionsCost",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "ability", "type": "AbilityID", "optional": false},
				{"name": "scalefactor[", "type": "Real", "optional": false},
				{"name": "mathtype", "type": "Integer", "optional": false}
			],
			"description": "Modifies the munitions cost of an ability "
		},
		{
			"name": "Modify_AbilityRechargeTime",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "ability", "type": "AbilityID", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies the recharge time of an ability "
		},
		{
			"name": "Modify_Armor",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID", "optional": false},
				{"name": "scalefactor[", "type": "Real", "optional": false},
				{"name": "exclusive", "type": "Boolean", "optional": false}
			],
			"description": "Modifies a squad or entity's armor "
		},
		{
			"name": "Modify_CaptureTime",
			"returnType": "ModID",
			"parameters": [
				{"name": "sgroup", "type": "EGroupID", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies the capture time of all strategic points in an EGroup. DO NOT USE THIS FUNCTION. "
		},
		{
			"name": "Modify_DisableHold",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "EGroupID", "optional": false},
				{"name": "disable", "type": "Boolean", "optional": false}
			],
			"description": "Enable or disable hold (garrisoning) for an egroup or sgroup "
		},
		{
			"name": "Modify_Enable_ParadropReinforcements",
			"returnType": "Void",
			"parameters": [
				{"name": "playerId", "type": "PlayerID", "optional": false},
				{"name": "enable", "type": "Boolean", "optional": false}
			],
			"description": "Allows paratroopers to reinforce from the sky.  Set to true to enable, false to disable. "
		},
		{
			"name": "Modify_EntityBuildTime",
			"returnType": "ModID",
			"parameters": [
				{"name": "playerId", "type": "PlayerID", "optional": false},
				{"name": "ebp", "type": "String", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies the time taken to build a particular EBP. This only affects the given player.  "
		},
		{
			"name": "Modify_EntityCost",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "blueprint", "type": "String", "optional": false},
				{"name": "resourcetype", "type": "Integer", "optional": false},
				{"name": "addition", "type": "Integer", "optional": false}
			],
			"description": "Modifies the cost of an entity for a particular player. Possible resource types are RT_Manpower, RT_Munition, RT_Fuel, RT_Action  "
		},
		{
			"name": "Modify_PlayerExperienceReceived",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "factor", "type": "Real", "optional": false}
			],
			"description": "Modifies the veterancy experience received by a player "
		},
		{
			"name": "Modify_PlayerProductionRate",
			"returnType": "ModID",
			"parameters": [
				{"name": "sgroup", "type": "PlayerID", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies the production rate of a player. "
		},
		{
			"name": "Modify_PlayerResourceCap",
			"returnType": "ModID",
			"parameters": [
				{"name": "playerId", "type": "PlayerID", "optional": false},
				{"name": "resourceType", "type": "Integer", "optional": false},
				{"name": "scalefactor[", "type": "Real", "optional": false},
				{"name": "mathtype", "type": "Integer", "optional": false}
			],
			"description": "Modifies a player's resource cap. Possible resource types are RT_Manpower, RT_Munition, RT_Fuel. Possible math types are MUT_Multiplication, MUT_Addition. "
		},
		{
			"name": "Modify_PlayerResourceGift",
			"returnType": "ModID",
			"parameters": [
				{"name": "playerId", "type": "PlayerID", "optional": false},
				{"name": "resourceType", "type": "Integer", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies a player's resource bonus received (ie. one-time resource gifts) Possible resource types are RT_Manpower, RT_Munition, RT_Fuel, RT_Action  "
		},
		{
			"name": "Modify_PlayerResourceRate",
			"returnType": "ModID",
			"parameters": [
				{"name": "playerId", "type": "PlayerID", "optional": false},
				{"name": "resourceType", "type": "Integer", "optional": false},
				{"name": "scalefactor[", "type": "Real", "optional": false},
				{"name": "mathtype", "type": "Integer", "optional": false}
			],
			"description": "Modifies a player's incoming resource rate. Possible resource types are RT_Manpower, RT_Munition, RT_Fuel, RT_Action. Possible math types are MUT_Multiplication, MUT_Addition. "
		},
		{
			"name": "Modify_PlayerSightRadius",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies the sight radius for a player. "
		},
		{
			"name": "Modify_ProductionRate",
			"returnType": "ModID",
			"parameters": [
				{"name": "sgroup", "type": "EGroupID", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies the production rate of all factories in an EGroup "
		},
		{
			"name": "Modify_ProjectileDelayTime",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "entityBP", "type": "PBG", "optional": false},
				{"name": "factor", "type": "Real", "optional": false}
			],
			"description": "Modifies a projectile's delay_detonate_time. "
		},
		{
			"name": "Modify_ReceivedAccuracy",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID", "optional": false},
				{"name": "scalefactor[", "type": "Real", "optional": false},
				{"name": "exclusive", "type": "Boolean", "optional": false}
			],
			"description": "Modifies the chance of a squad/entity being hit "
		},
		{
			"name": "Modify_ReceivedDamage",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID", "optional": false},
				{"name": "scalefactor[", "type": "Real", "optional": false},
				{"name": "exclusive", "type": "Boolean", "optional": false}
			],
			"description": "Modifies the damage a squad/entity receives. "
		},
		{
			"name": "Modify_ReceivedSuppression",
			"returnType": "ModID",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies the rate at which a squad gets suppressed "
		},
		{
			"name": "Modify_SetUpgradeCost",
			"returnType": "ModID",
			"parameters": [
				{"name": "playerId", "type": "PlayerID", "optional": false},
				{"name": "upgrade", "type": "UpgradeID", "optional": false},
				{"name": "resourceType", "type": "Integer", "optional": false},
				{"name": "newCost", "type": "Real", "optional": false}
			],
			"description": "Sets the cost of an upgrade. This only affects the given player "
		},
		{
			"name": "Modify_SightRadius",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies the sight radius for an egroup or an sgroup. "
		},
		{
			"name": "Modify_SquadAvailability",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "blueprint", "type": "String", "optional": false},
				{"name": "addition", "type": "Integer", "optional": false}
			],
			"description": "Modifies the availability limit of a squad type for any given player "
		},
		{
			"name": "Modify_SquadCaptureRate",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies a squad's rate at which it will capture a strategic point. "
		},
		{
			"name": "Modify_SquadTypeSightRadius",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "blueprint", "type": "String", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies the sight radius of a squad type for any given player "
		},
		{
			"name": "Modify_TargetPriority",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID", "optional": false},
				{"name": "addition", "type": "Integer", "optional": false}
			],
			"description": "Modifies the target priority of a squad or entity group from the attacker. The value is an addition "
		},
		{
			"name": "Modify_TeamWeapon",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID", "optional": false},
				{"name": "modifier", "type": "String", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false},
				{"name": "hardpoint", "type": "String", "optional": true}
			],
			"description": "Modifies a sync weapon only.  \nThe hardpoint defaults to \"hardpoint_01\""
		},
		{
			"name": "Modify_TerritoryRadius",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "EGroupID", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies the territory radius for an egroup or an sgroup. "
		},
		{
			"name": "Modify_UnitSpeed",
			"returnType": "ModID",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies the maximum speed for a vehicle. This has no effect on infantry. "
		},
		{
			"name": "Modify_UnitVeterancyValue",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroup/EGroup", "optional": false},
				{"name": "scalefactor[", "type": "Real", "optional": false},
				{"name": "mathtype", "type": "Integer", "optional": false}
			],
			"description": "Modifies the Veterancy Experience value of the target SGroup, EGroup, Entity, or Squad. Mathtype is Multiplication by default "
		},
		{
			"name": "Modify_UpgradeBuildTime",
			"returnType": "ModID",
			"parameters": [
				{"name": "playerId", "type": "PlayerID", "optional": false},
				{"name": "upgrade", "type": "UpgradeID", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies the build time for a particular upgrade. This only affects the given player.  "
		},
		{
			"name": "Modify_Upkeep",
			"returnType": "ModID",
			"parameters": [
				{"name": "playerId", "type": "PlayerID", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies the upkeep for a player  "
		},
		{
			"name": "Modify_VehicleRepairRate",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "factor", "type": "Real", "optional": false},
				{"name": "engineer_entity_blueprint", "type": "String", "optional": false}
			],
			"description": "Modifies the vehicle repair rate of all a player's engineers "
		},
		{
			"name": "Modify_VehicleRotationSpeed",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "EGroupID/SGroupID", "optional": false},
				{"name": "factor", "type": "Real", "optional": false}
			],
			"description": "Modifies the vehicle rotation speed "
		},
		{
			"name": "Modify_VehicleTurretRotationSpeed",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID", "optional": false},
				{"name": "hardpoint", "type": "String", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies the turret rotation speed of a vehicle squad \nThe hardpoint should be specified as a string - i.e. \"hardpoint_01\""
		},
		{
			"name": "Modify_Vulnerability",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "EGroupID/SGroupID", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Increases the received accuracy, penetration, and damage on a squad by the scalefactor.  For example, a scalefactor of 2 means that the squad gets 2x the received accuracy, 2x the received penetration, and 2x the received damage. "
		},
		{
			"name": "Modify_WeaponAccuracy",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID", "optional": false},
				{"name": "hardpoint", "type": "String", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies a squad's weapon accuracy. \nThe hardpoint should be specified as a string - i.e. \"hardpoint_01\""
		},
		{
			"name": "Modify_WeaponBurstLength",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID", "optional": false},
				{"name": "hardpoint", "type": "String", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies a squad's weapon burst length (time). \nThe hardpoint should be specified as a string - i.e. \"hardpoint_01\""
		},
		{
			"name": "Modify_WeaponBurstRateOfFire",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID", "optional": false},
				{"name": "hardpoint", "type": "String", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies a squad's weapon rate of fire. \nThe hardpoint should be specified as a string - i.e. \"hardpoint_01\""
		},
		{
			"name": "Modify_WeaponCooldown",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID", "optional": false},
				{"name": "hardpoint", "type": "String", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies a squad's weapon cooldown time. \nThe hardpoint should be specified as a string - i.e. \"hardpoint_01\""
		},
		{
			"name": "Modify_WeaponDamage",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID", "optional": false},
				{"name": "hardpoint", "type": "String", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies a squad's weapon damage. \nThe hardpoint should be specified as a string - i.e. \"hardpoint_01\""
		},
		{
			"name": "Modify_WeaponEnabled",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID", "optional": false},
				{"name": "hardpoint", "type": "String", "optional": false},
				{"name": "enabled", "type": "Boolean", "optional": false}
			],
			"description": "Enables or disables a weapon hardpoint \nThe hardpoint should be specified as a string - i.e. \"hardpoint_01\""
		},
		{
			"name": "Modify_WeaponPenetration",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID", "optional": false},
				{"name": "hardpoint", "type": "String", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies a squad's weapon penetration. Does not work on artillery (mortar, nebelwerfer, etc.) \nThe hardpoint should be specified as a string - i.e. \"hardpoint_01\""
		},
		{
			"name": "Modify_WeaponRange",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID", "optional": false},
				{"name": "hardpoint", "type": "String", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies a squad's weapon range. Does not work on artillery (mortar, nebelwerfer, etc.) \nThe hardpoint should be specified as a string - i.e. \"hardpoint_01\""
		},
		{
			"name": "Modify_WeaponReload",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID", "optional": false},
				{"name": "hardpoint", "type": "String", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies a squad's weapon reload time. \nThe hardpoint should be specified as a string - i.e. \"hardpoint_01\""
		},
		{
			"name": "Modify_WeaponScatter",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID", "optional": false},
				{"name": "hardpoint", "type": "String", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies a squad's weapon scatter. \nThe hardpoint should be specified as a string - i.e. \"hardpoint_01\""
		},
		{
			"name": "Modify_WeaponSuppression",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID", "optional": false},
				{"name": "hardpoint", "type": "String", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false}
			],
			"description": "Modifies a squad's weapon suppression. Does not work on artillery (mortar, nebelwerfer, etc.) \nThe hardpoint should be specified as a string - i.e. \"hardpoint_01\""
		},
		{
			"name": "MP_BlizzardInit",
			"returnType": "Void",
			"parameters": [
				{"name": "blizzard_atmosphere", "type": "String", "optional": false},
				{"name": "default_atmosphere[", "type": "String", "optional": false},
				{"name": "startInBlizzard", "type": "Boolean", "optional": false},
				{"name": "blizzardData", "type": "Table", "optional": false},
				{"name": "useSpeech", "type": "Boolean", "optional": false},
				{"name": "transitionOutAtmosphere", "type": "String", "optional": false}
			],
			"description": "Initializes and starts cold weather and blizzard mechanics, taking in atmosphere presets to use in each condition. Uses MP values by default. Defaults to NOT starting in blizzard conditions.  \nYou need to add import(\"Systems/BlizzardMulitplayer.scar\") to your mission script to use this - it isn't imported by default"
		},
		{
			"name": "Objective_AddPing",
			"returnType": "PingID",
			"parameters": [
				{"name": "objectiveTable", "type": "LuaTable", "optional": false},
				{"name": "pos", "type": "Position", "optional": false}
			],
			"description": "Adds a tactical map ping to an objective "
		},
		{
			"name": "Objective_AddUIElements",
			"returnType": "ElementID",
			"parameters": [
				{"name": "objTable", "type": "LuaTable", "optional": false},
				{"name": "pos[", "type": "Position", "optional": false},
				{"name": "ping", "type": "Boolean", "optional": false},
				{"name": "hintpointText", "type": "LocString", "optional": false},
				{"name": "worldArrow", "type": "Boolean", "optional": false},
				{"name": "objectiveArrowOffset", "type": "Float/Position", "optional": false},
				{"name": "objectiveArrowFacing", "type": "Entity/Squad/Position", "optional": false},
				{"name": "actionType", "type": "<a href=\"enum_list.htm#HintPointActionType\">HintPointActionType</a>", "optional": false},
				{"name": "iconName", "type": "String", "optional": false}
			],
			"description": "Adds multiple UI elements on one position. 'pos' can be group/entity/squad/marker. worldArrow adds a 3D arrow which points to the thing in the world. hintpointText adds a hint point that appears on the thing when moused over. If you're adding an arrow or a hintpoint, this thing will be among those potentially pointed to by the 2D HUD arrow. objectiveArrowOffset is an offset applied to the arrow's position (you can specify a height offset or a 3D position offset). "
		},
		{
			"name": "Objective_AreAllPrimaryObjectivesComplete",
			"returnType": "Boolean",
			"parameters": [
				{"name": "", "type": "", "optional": false}
			],
			"description": "Returns whether all primary objectives have been completed. "
		},
		{
			"name": "Objective_Complete",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable[", "type": "LuaTable", "optional": false},
				{"name": "bShowTitle", "type": "Boolean", "optional": false},
				{"name": "skipIntel", "type": "Boolean", "optional": false}
			],
			"description": "'Completes' an objective. Wrapper function for Objective_SetState with a few other features. If you do not want the objective title to be shown on screen, pass in 'false' for bShowTitle \nIncludes managing the blips and triggers the OnComplete() function as defined by the objective table created in the main scar file.  SkipIntel will skip the defined INTEL_COMPLTE event."
		},
		{
			"name": "Objective_Fail",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable[", "type": "LuaTable", "optional": false},
				{"name": "bShowTitle", "type": "Boolean", "optional": false},
				{"name": "skipIntel", "type": "Boolean", "optional": false}
			],
			"description": "'Fails' an objective. Wrapper function for Objective_SetState with a few other features. \nIncludes managing the blips and triggers the OnFail() function as defined by the objective table created in the main scar file. SkipIntel will skip the defined INTEL_FAIL event."
		},
		{
			"name": "Objective_GetCounter",
			"returnType": "Integer",
			"parameters": [
				{"name": "objTable", "type": "LuaTable", "optional": false}
			],
			"description": "Returns the current count associated with this objective. "
		},
		{
			"name": "Objective_GetTimerSeconds",
			"returnType": "Integer",
			"parameters": [
				{"name": "objTable", "type": "LuaTable", "optional": false}
			],
			"description": "Returns the amount of seconds on the timer (time remaining or time elapsed, based on the type of timer used) "
		},
		{
			"name": "Objective_IncreaseCounter",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable[", "type": "LuaTable", "optional": false},
				{"name": "amount", "type": "Int", "optional": false}
			],
			"description": "Increases the counter that is associated with this objective in the UI. You can provide an amount to increase by. "
		},
		{
			"name": "Objective_IsComplete",
			"returnType": "Boolean",
			"parameters": [
				{"name": "objTable", "type": "LuaTable", "optional": false}
			],
			"description": "Returns whether an objective is complete "
		},
		{
			"name": "Objective_IsCounterSet",
			"returnType": "Boolean",
			"parameters": [
				{"name": "objTable", "type": "LuaTable", "optional": false}
			],
			"description": "Returns true if a counter has been set for this objective "
		},
		{
			"name": "Objective_IsFailed",
			"returnType": "Boolean",
			"parameters": [
				{"name": "objTable", "type": "LuaTable", "optional": false}
			],
			"description": "Returns whether an objective is failed "
		},
		{
			"name": "Objective_IsStarted",
			"returnType": "Boolean",
			"parameters": [
				{"name": "objTable", "type": "LuaTable", "optional": false}
			],
			"description": "Returns whether an objective has been started. Completed objectives will return true. "
		},
		{
			"name": "Objective_IsTimerSet",
			"returnType": "Boolean",
			"parameters": [
				{"name": "objTable", "type": "LuaTable", "optional": false}
			],
			"description": "Returns true if a timer has been set for this objective "
		},
		{
			"name": "Objective_IsVisible",
			"returnType": "Boolean",
			"parameters": [
				{"name": "objTable", "type": "LuaTable", "optional": false}
			],
			"description": "Returns whether an objective is visible or not. "
		},
		{
			"name": "Objective_PauseTimer",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable", "optional": false}
			],
			"description": "Pauses the objective's timer. If a timer has not been set, it does nothing. "
		},
		{
			"name": "Objective_Register",
			"returnType": "ObjectiveID",
			"parameters": [
				{"name": "objTable[", "type": "LuaTable", "optional": false},
				{"name": "owner", "type": "PlayerID/TeamID", "optional": false}
			],
			"description": "'Registers' an objective. Wrapper function for Objective_Create with a few other features. \nIncludes pings as defined by the objective table created in the main scar file. You can pass in a team or player, so that the objective only applies to it."
		},
		{
			"name": "Objective_RemovePing",
			"returnType": "Void",
			"parameters": [
				{"name": "objectiveTable", "type": "LuaTable", "optional": false},
				{"name": "PingID", "type": "Integer", "optional": false}
			],
			"description": "Removes a tactical map ping from an objective "
		},
		{
			"name": "Objective_RemoveUIElements",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable", "optional": false},
				{"name": "elementID", "type": "Integer", "optional": false}
			],
			"description": "Removes a group of UI elements that were added by Objective_AddUIElements "
		},
		{
			"name": "Objective_ResumeTimer",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable", "optional": false}
			],
			"description": "Resume the objective's timer. If a timer has not been set, it does nothing. "
		},
		{
			"name": "Objective_SetAlwaysShowDetails",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable", "optional": false},
				{"name": "title", "type": "Boolean", "optional": false},
				{"name": "hud_arrow", "type": "Boolean", "optional": false},
				{"name": "hintpoints", "type": "Boolean", "optional": false}
			],
			"description": "Sets whether this objective always shows detailed text, the HUD arrow, or the hintpoints. There can only be one objective at a time that forces the HUD arrow to show up. If you pass in 'nil' for hud_arrow then its behavior is not affected. "
		},
		{
			"name": "Objective_SetCounter",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable", "optional": false},
				{"name": "current[", "type": "Float", "optional": false},
				{"name": "maximum", "type": "Float", "optional": false}
			],
			"description": "Sets a counter that is associated with this objective in the UI. You can provide a 'maximum' so that it shows up as \"1 of 5\" "
		},
		{
			"name": "Objective_Show",
			"returnType": "Void",
			"parameters": [
				{"name": "objective_table", "type": "LuaTable", "optional": false},
				{"name": "on/off", "type": "Boolean", "optional": false}
			],
			"description": "Shows or hides an objective from the UI and tactical map "
		},
		{
			"name": "Objective_Start",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable[", "type": "LuaTable", "optional": false},
				{"name": "bShowTitle", "type": "Boolean", "optional": false},
				{"name": "skipIntel", "type": "Boolean", "optional": false}
			],
			"description": "Shows an objective to the player and activates it \nIncludes pings and FOW as defined by the objective table created in the main scar file.  SkipIntel will skip the defined INTEL_START event."
		},
		{
			"name": "Objective_StartTimer",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable", "optional": false},
				{"name": "direction[", "type": "Integer", "optional": false},
				{"name": "initialTime", "type": "Float", "optional": false},
				{"name": "flashThreshold", "type": "Float", "optional": false}
			],
			"description": "Starts a timer that is associated with this objective in the UI. Use COUNT_DOWN or COUNT_UP for the 'direction' parameter "
		},
		{
			"name": "Objective_StopCounter",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable", "optional": false}
			],
			"description": "Stops the objective's counter. If a counter has not been set, it does nothing. "
		},
		{
			"name": "Objective_StopTimer",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable", "optional": false}
			],
			"description": "Stops the objective's timer. If a timer has not been set, it does nothing. "
		},
		{
			"name": "Objective_TogglePings",
			"returnType": "Void",
			"parameters": [
				{"name": "objective_table", "type": "LuaTable", "optional": false},
				{"name": "on/off", "type": "Boolean", "optional": false}
			],
			"description": "Toggles minimap blips on or off. "
		},
		{
			"name": "Objective_UpdateText",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable", "optional": false},
				{"name": "title", "type": "LocString", "optional": false},
				{"name": "description[", "type": "LocString", "optional": false},
				{"name": "bShowTitle", "type": "Boolean", "optional": false}
			],
			"description": "Updates the title and description for the objective. If you only want to set one of them, pass in nil for the other "
		},
		{
			"name": "Cmd_StopSquadsOnly",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup1", "type": "SGroupID", "optional": false},
				{"name": "squadStateIDtype", "type": "Enum", "optional": false}
			],
			"description": "Pass in a group to command to 'stop'. Pass in a squad state to filter by. "
		},
		{
			"name": "OpGameSetup",
			"returnType": "Table playerData",
			"parameters": [
				{"name": "", "type": "", "optional": false}
			],
			"description": "Operation Setup function registers all valid players \nOpGameSetup() should be called by the individual Operation files It creates a master table _Op.PDT meant to be used by Op Utility files only It returns this table so that the Operation file can use and manipulate its own"
		},
		{
			"name": "OpNPC_AddSupportGroup",
			"returnType": "GroupTable table",
			"parameters": [
				{"name": "groupTable", "type": "Table", "optional": false}
			],
			"description": "Does things \n"
		},
		{
			"name": "OpNPC_AddSyncWpnGroup",
			"returnType": "GroupTable table",
			"parameters": [
				{"name": "groupTable", "type": "Table", "optional": false}
			],
			"description": "Does things \n"
		},
		{
			"name": "OpNPC_AddTeamWpnGroup",
			"returnType": "GroupTable table",
			"parameters": [
				{"name": "groupTable", "type": "Table", "optional": false}
			],
			"description": "Does things \n"
		},
		{
			"name": "OpNPC_IsGroupActive",
			"returnType": "Void",
			"parameters": [
				{"name": "groupId", "type": "Integer", "optional": false}
			],
			"description": "Does things \n"
		},
		{
			"name": "OpNPC_Name",
			"returnType": "Value",
			"parameters": [
				{"name": "[", "type": "Type!value", "optional": false},
				{"name": "value", "type": "Type", "optional": false}
			],
			"description": "Does things \n Does more things"
		},
		{
			"name": "OpNPC_RemoveGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "groupID", "type": "Integer", "optional": false}
			],
			"description": "Removes the indicated sub table from the NPC Support Manager \n"
		},
		{
			"name": "OpNPC_RetreatGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "groupTable", "type": "Table", "optional": false},
				{"name": "activeStatus", "type": "Boolean", "optional": false}
			],
			"description": "Does things \n"
		},
		{
			"name": "OpNPC_SetGroupActive",
			"returnType": "Void",
			"parameters": [
				{"name": "groupId", "type": "Integer", "optional": false},
				{"name": "activeStatus", "type": "Boolean", "optional": false}
			],
			"description": "Changes the state of the indicated sub table to the value provided \n"
		},
		{
			"name": "OpPlayer_Action",
			"returnType": "Value",
			"parameters": [
				{"name": "[", "type": "Type!value", "optional": false},
				{"name": "value", "type": "Type", "optional": false}
			],
			"description": "Does things \n Does more things"
		},
		{
			"name": "OpUtil_AddModifier",
			"returnType": "ModType modTable, PlayerID/Egroup/Sgroup modReciever, Integer scaleValue",
			"parameters": [
				{"name": "", "type": "", "optional": false}
			],
			"description": "Applies the indicated modifier type to the specified group or player "
		},
		{
			"name": "OpUtil_AddResourcesToTeam",
			"returnType": "Void",
			"parameters": [
				{"name": "playerORteam", "type": "PlayerID/Team", "optional": false},
				{"name": "myTeam", "type": "Boolean", "optional": false}
			],
			"description": "Works with _Op.PDT, takes a playerID or team and gives that team OR the enemy team lots of resources "
		},
		{
			"name": "OpUtil_AssignSquadSameTypeControlGroup",
			"returnType": "Boolean sameTypeFound",
			"parameters": [
				{"name": "sgroup[", "type": "SgroupID", "optional": false},
				{"name": "startWithFirst", "type": "Boolean", "optional": false}
			],
			"description": "Trys to assign a squad to a control group with the sametype of squad "
		},
		{
			"name": "OpUtil_AssignSquadUnusedControlGroup",
			"returnType": "void",
			"parameters": [
				{"name": "sgroup[", "type": "SgroupID", "optional": false},
				{"name": "startWithFirst", "type": "Boolean", "optional": false}
			],
			"description": "Assigns the squads within a sgroup to free control group "
		},
		{
			"name": "OpUtil_ClearPlayZone",
			"returnType": "Void",
			"parameters": [
				{"name": "marker", "type": "MarkerID", "optional": false}
			],
			"description": "Removes the 'Playable Zone' set by OpUtil_SetPlayZone "
		},
		{
			"name": "OpUtil_EgroupIsCapturedByTeam",
			"returnType": "Boolean isCaptured",
			"parameters": [
				{"name": "capturePoint", "type": "EgroupID", "optional": false},
				{"name": "playerTeam", "type": "TeamID", "optional": false},
				{"name": "anyAll", "type": "Boolean", "optional": false}
			],
			"description": "Tracks a syncweapon ID and destroys the weapon if it ever becomes un-crewed "
		},
		{
			"name": "OpUtil_EnemyEGroupArrowManager",
			"returnType": "Void",
			"parameters": [
				{"name": "objective", "type": "ObjectiveID", "optional": false},
				{"name": "target", "type": "EGroupID", "optional": false},
				{"name": "targetPlayer", "type": "PlayerID", "optional": false},
				{"name": "blueprintTable", "type": "Table", "optional": false},
				{"name": "buildingGroup", "type": "EGroup", "optional": false},
				{"name": "objectiveText", "type": "LocID", "optional": false},
				{"name": "pingArrow", "type": "Boolean", "optional": false}
			],
			"description": "Displays an arrow with a text message over a random building that's part of an EGroup of buildings \nUseful when you want to highlight a group of buildings that you want to destroy as an objective but don't want to highlight every building at once."
		},
		{
			"name": "OpUtil_FindNearestCapturePoint",
			"returnType": "EgroupID/NIL egroupID/nil",
			"parameters": [
				{"name": "sgroup", "type": "SgroupID", "optional": false},
				{"name": "range", "type": "Integer", "optional": false}
			],
			"description": "Finds the nearest captureable point to the sgroup  \nWill only compare to Registered Captureable Points, will return 'nil' if there are none in range"
		},
		{
			"name": "OpUtil_InvulnerableAdd",
			"returnType": "Void",
			"parameters": [
				{"name": "SGroupID", "type": "SGroupID", "optional": false},
				{"name": "survivorThreshold", "type": "Integer", "optional": false},
				{"name": "percentage", "type": "Real", "optional": true}
			],
			"description": "Adds an SGroup from a list of units to be tracked for invulnerability \nSpecified SGroup will turn invulnerable when it reaches a specified number of survivors OR if the average health of the squad is &lt;20% (under the hood, as a safety measure).  If no number is entered the SGroup is assumed to be instantly invulnerable. The percentage is the average health of an sgroup, and will override the number of total members, and thus is optional.  "
		},
		{
			"name": "OpUtil_InvulnerableRemove",
			"returnType": "Void",
			"parameters": [
				{"name": "SGroupID", "type": "SGroupID", "optional": false}
			],
			"description": "Removes an SGroup from a list of units to be tracked for invulnerability \nIf you want an SGroup to not be tracked anymore in terms of invulnerability use this function"
		},
		{
			"name": "OpUtil_LogSyncWpn",
			"returnType": "Void",
			"parameters": [
				{"name": "syncweapon", "type": "SGroupID", "optional": false}
			],
			"description": "Tracks a syncweapon ID and destroys the weapon if it ever becomes un-crewed "
		},
		{
			"name": "OpUtil_ReturnEnemyNPC",
			"returnType": "PlayerID",
			"parameters": [
				{"name": "playerORteam", "type": "PlayerID/Team", "optional": false}
			],
			"description": "Works with _Op.PDT, takes a variable and returns an enemy NPC  "
		},
		{
			"name": "OpUtil_ReturnHumanPlayer",
			"returnType": "PlayerID humanPlayer ",
			"parameters": [
				{"name": "compareVar", "type": "RaceID/FactionID/Index/TeamID", "optional": false}
			],
			"description": "Works with _Op.PDT, takes a variable and returns a Human player  "
		},
		{
			"name": "OpUtil_ReturnNPCPlayer",
			"returnType": "PlayerID npcPlayer",
			"parameters": [
				{"name": "compareVar", "type": "RaceID/FactionID/Index/TeamID", "optional": false}
			],
			"description": "Works with _Op.PDT, takes a variable and returns a Non-Human player  "
		},
		{
			"name": "OpUtil_ReturnRace",
			"returnType": "RaceID enum",
			"parameters": [
				{"name": "compareVar", "type": "RaceID/FactionID/Index/PlayerID", "optional": false}
			],
			"description": "Works with _Op.PDT, takes a player and returns the race  "
		},
		{
			"name": "OpUtil_ReturnTeam",
			"returnType": "TeamID integer",
			"parameters": [
				{"name": "compareVar", "type": "RaceID/FactionID/Index/PlayerID", "optional": false}
			],
			"description": "Works with _Op.PDT, takes a variable and returns the team  "
		},
		{
			"name": "OpUtil_SetPlayZone",
			"returnType": "Void",
			"parameters": [
				{"name": "marker", "type": "MarkerID", "optional": false}
			],
			"description": "Sets a 'playable zone' in the area and keeps all Human players within it "
		},
		{
			"name": "OpUtil_TeamOwnsEntity",
			"returnType": "Boolean ownsEgroup",
			"parameters": [
				{"name": "owner", "type": "PlayerID/TeamID", "optional": false},
				{"name": "egroup[", "type": "EgroupID", "optional": false},
				{"name": "ANY/ALL", "type": "Boolean", "optional": false}
			],
			"description": "Checks to see if an egroup is owned by a team "
		},
		{
			"name": "OpVP_AddPenaltyGroup",
			"returnType": "GroupTable table",
			"parameters": [
				{"name": "groupTable", "type": "Table", "optional": false}
			],
			"description": "Does things \n"
		},
		{
			"name": "OpVP_Name",
			"returnType": "Value",
			"parameters": [
				{"name": "[", "type": "Type!value", "optional": false},
				{"name": "value", "type": "Type", "optional": false}
			],
			"description": "Does things \n Does more things"
		},
		{
			"name": "OpVP_RegisterCaptureablePoints",
			"returnType": "Void",
			"parameters": [
				{"name": "groupID/egroupTable", "type": "EgroupID/Table", "optional": false}
			],
			"description": "Registers a single egroup or a table of egroups as a captureable point \nTracks the various states of the points, neutral or team owner"
		},
		{
			"name": "OpVP_RegisterPointDefense",
			"returnType": "Void",
			"parameters": [
				{"name": "defendTable", "type": "Table", "optional": false}
			],
			"description": "Add a set egroups and defensive formations to defend them  \n"
		},
		{
			"name": "OpVP_RemoveGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "groupID", "type": "Integer", "optional": false}
			],
			"description": "Removes the indicated sub table from the VP Support Manager \n"
		},
		{
			"name": "UI_PopUpMessage",
			"returnType": "Void",
			"parameters": [
				{"name": "locstring", "type": "LocID", "optional": false},
				{"name": "locstring[", "type": "LocID", "optional": false},
				{"name": "table", "type": "LabelActionTable", "optional": false},
				{"name": "table", "type": "LabelActionTable", "optional": false},
				{"name": "", "type": "LabelActionTable!table", "optional": false}
			],
			"description": "Auto-generate a popup message with callbacks. See OpUtil.scar for an example of how to use this function. \nIf no buttons are defined it defaults to a 'Close' button that triggers no action."
		},
		{
			"name": "Util_ProductionRestriction",
			"returnType": "Void",
			"parameters": [
				{"name": "sbps/upgs[", "type": "Table", "optional": false},
				{"name": "ebps", "type": "Table", "optional": false},
				{"name": "Warning", "type": "LocID!unit", "optional": false},
				{"name": "Warning", "type": "LocID!build", "optional": false}
			],
			"description": "Prevents the construction of squads or enities based on blueprint tables passed into the function. \nCalling the function multiple times will stomp any previously data passed into the function."
		},
		{
			"name": "Util_TutorialIntel",
			"returnType": "Void",
			"parameters": [
				{"name": "Actor/String/Button/Sticky/Input", "type": "Table!intelEventTable!or", "optional": false}
			],
			"description": "Auto-generate a Tutorial Intel Event. Called individually or using the traditional table format. \nSee Util_AutoIntel() Takes a table of parameters defining speaker(s)/line(s) or pass in Actor/String/Button/Sticky/Input"
		},
		{
			"name": "Player_AddAbility",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false},
				{"name": "pAbilityPBG", "type": "ScarAbilityPBG", "optional": false}
			],
			"description": "Add an ability to a player "
		},
		{
			"name": "Player_AddAbilityLockoutZone",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "abilityPBG", "type": "ScarAbilityPBG", "optional": false},
				{"name": "marker", "type": "ScarMarker", "optional": false}
			],
			"description": "Specifies a marker where an ability cannot be used. This only applies to abilities where you use the cursor to pick a location in the world (like a location to paradrop at). "
		},
		{
			"name": "Player_AddResource",
			"returnType": "Void",
			"parameters": [
				{"name": "playerId", "type": "PlayerID", "optional": false},
				{"name": "resourceType", "type": "Integer", "optional": false},
				{"name": "value", "type": "Real", "optional": false}
			],
			"description": "Add resource to player, as opposed to just setting it. Possible resource types are RT_Manpower, RT_Munition, RT_Fuel, RT_Action  "
		},
		{
			"name": "Player_AddSquadsToSGroup",
			"returnType": "SGroupID",
			"parameters": [
				{"name": "playerId", "type": "PlayerID", "optional": false},
				{"name": "squadgroupName", "type": "String", "optional": false}
			],
			"description": "For the given player, get all of the squads gathered into a squadgroup of your naming.   \nSquads will be added to given squad group.  If the given squad group does not exist it will be created."
		},
		{
			"name": "Player_AddUnspentCommandPoints",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "points", "type": "float", "optional": false}
			],
			"description": "Gives the player new command points to spent on "
		},
		{
			"name": "Player_AreSquadsNearMarker",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID", "optional": false},
				{"name": "marker", "type": "MarkerID", "optional": false}
			],
			"description": "Returns true if ANY of a players squads are in proximity of a marker "
		},
		{
			"name": "Player_CanCastAbilityOnEntity",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "abilityPBG", "type": "ScarAbilityPBG", "optional": false},
				{"name": "targetEntity", "type": "Entity*", "optional": false}
			],
			"description": "Tests if the player can currently use an ability on target entity "
		},
		{
			"name": "Player_CanCastAbilityOnPlayer",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "abilityPBG", "type": "ScarAbilityPBG", "optional": false},
				{"name": "targetPlayer", "type": "ModPlayer*", "optional": false}
			],
			"description": "Tests if the player can currently use an ability on target player "
		},
		{
			"name": "Player_CanCastAbilityOnPosition",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "abilityPBG", "type": "ScarAbilityPBG", "optional": false},
				{"name": "targetPosition", "type": "ScarPosition", "optional": false}
			],
			"description": "Tests if the player can currently use an ability on target position "
		},
		{
			"name": "Player_CanCastAbilityOnSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "abilityPBG", "type": "ScarAbilityPBG", "optional": false},
				{"name": "targetSquad", "type": "Squad*", "optional": false}
			],
			"description": "Tests if the player can currently use an ability on target squad "
		},
		{
			"name": "Player_CanSeeEGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID", "optional": false},
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if a player can see ALL or ANY items in an egroup "
		},
		{
			"name": "Player_CanSeeEntity",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false},
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns true if a player can see a given entity (revealed in FOW) "
		},
		{
			"name": "Player_CanSeePosition",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false}
			],
			"description": "Returns true if a player can see a given position. "
		},
		{
			"name": "Player_CanSeeSGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID", "optional": false},
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if a player can see ALL or ANY items in an sgroup "
		},
		{
			"name": "Player_CanSeeSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false},
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "all", "type": "bool", "optional": false}
			],
			"description": "Returns true if a player can see ALL or ANY units in a given squad (revealed in FOW) \nSet all to true to check that ALL units are visible or set to false to check for ANY."
		},
		{
			"name": "Player_ClearArea",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "marker", "type": "MarkerID", "optional": false},
				{"name": "invulnerable", "type": "Bool", "optional": false}
			],
			"description": "Any of the player's units in the marker area move out of the area, and can be made invulnerable for a bit whilst they do it \nYou can replace the marker with a position and a range - i.e. Player_ClearArea(player, pos, range, invulnerable)"
		},
		{
			"name": "Player_ClearAvailabilities",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false}
			],
			"description": "Clears item, command and construction menu availabilities for the player. "
		},
		{
			"name": "Player_ClearPopCapOverride",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false}
			],
			"description": "Clears the pop cap override so that modifiers can take effect again "
		},
		{
			"name": "Player_CompleteUpgrade",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false},
				{"name": "pUpgradePBG", "type": "ScarUpgradePBG", "optional": false}
			],
			"description": "Finish upgrade for a player "
		},
		{
			"name": "Player_DoParadrop",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "dropHeight", "type": "float", "optional": false},
				{"name": "dropDrift", "type": "float", "optional": false},
				{"name": "blueprint", "type": "LuaBinding::StackVar", "optional": false},
				{"name": "maxSquadEntityCount", "type": "size_t", "optional": false},
				{"name": "maxDeathOnBuilding", "type": "size_t", "optional": false}
			],
			"description": "Do a paradrop with custom parameters for this player. This is similar to regular paradrop ability without any prereq check \n sgroup is the SGroup that the newly created squad would be added to dropHeight is Height in metres the paratroopers are dropped from. dropDrift is Horizontal distance in metres from where the paratroopers are dropped from. blueprint is the blueprint to spawn. It could be squad or entity maxSquadEntityCount is the number of squad members to spawn. 0 means default is used maxDeathOnBuilding is the number of entities allowed to die when landing on buildings Example:   local id = SBP.ALLIED_AIRBOURNE   Player_DoParadrop( g_player1, sg_soldier1, Marker_GetPosition( marker4 ), 100.0, 10.0, id, 3, 2 )"
		},
		{
			"name": "Player_FindFirstEnemyPlayer",
			"returnType": "ModPlayer*",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Searches the player list in the world and returns the id of the first enemy player "
		},
		{
			"name": "Player_FromId",
			"returnType": "ModPlayer*",
			"parameters": [
				{"name": "id", "type": "uint32_t", "optional": false}
			],
			"description": "Returns a player given a player id from the ME. "
		},
		{
			"name": "Player_GetAIType",
			"returnType": "Player::AIType",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false}
			],
			"description": "Returns the type of the given player if it is an AI. "
		},
		{
			"name": "Player_GetAll",
			"returnType": "Void",
			"parameters": [
				{"name": "player[", "type": "PlayerID", "optional": false},
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "egroup", "type": "EGroupID", "optional": false}
			],
			"description": "Creates/Clears groups that contain all of a player's units and buildings. Defaults - sg_allsquads and eg_allentities \nFills an SGroup with all of the given player's squads, and an EGroup with all the player's entities. If you don't provide and groups, then it defaults to using sg_allsquads and eg_allentities."
		},
		{
			"name": "Player_GetAllEntitiesNearMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "playerid", "type": "PlayerID", "optional": false},
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "position[", "type": "MarkerID/Pos/SectorID", "optional": false},
				{"name": "range", "type": "Real", "optional": false}
			],
			"description": "Gather together all of a player's entities that are in proximity to a marker, a position, or within a territory sector into an EGroup. The EGroup is cleared beforehand.  \nYou can override a marker's normal proximity by specifying a range."
		},
		{
			"name": "Player_GetAllSquadsNearMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "position[", "type": "MarkerID/Pos/SectorID", "optional": false},
				{"name": "range", "type": "Real", "optional": false}
			],
			"description": "Gather together all of a player's squads that are in proximity to a marker, a position, or within a territory sector into an SGroup. The SGroup is cleared beforehand.  \nYou can override a marker's normal proximity by specifying a range."
		},
		{
			"name": "Player_GetBuildingID",
			"returnType": "EntityID",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "entitytypes", "type": "BlueprintTable", "optional": false}
			],
			"description": "Returns the entityID of the first player owned building listed in the table. \nThis only looks at completed buildings"
		},
		{
			"name": "Player_GetBuildingsCount",
			"returnType": "Integer",
			"parameters": [
				{"name": "playerId", "type": "PlayerID", "optional": false}
			],
			"description": "Returns the total number of buildings owned by this player. "
		},
		{
			"name": "Player_GetBuildingsCountExcept",
			"returnType": "Integer",
			"parameters": [
				{"name": "playerId", "type": "PlayerID", "optional": false},
				{"name": "exceptions", "type": "BlueprintTable", "optional": false}
			],
			"description": "Returns the total number of buildings owned by this player (with exclusions). "
		},
		{
			"name": "Player_GetBuildingsCountOnly",
			"returnType": "Integer",
			"parameters": [
				{"name": "playerId", "type": "PlayerID", "optional": false},
				{"name": "ebplist", "type": "BlueprintTable", "optional": false}
			],
			"description": "Returns the number of buildings owned by this player (inclusive). "
		},
		{
			"name": "Player_GetCurrentPopulation",
			"returnType": "float",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false},
				{"name": "capType", "type": "<a href=\"enum_list.htm#CapType\">CapType</a>", "optional": false}
			],
			"description": "Use capType CT_Personnel to get current squad cap, CT_Vehicle to get current vehicle cap, CT_Medic to get current medic cap "
		},
		{
			"name": "Player_GetDisplayName",
			"returnType": "LocString",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns the players UI name. "
		},
		{
			"name": "Player_GetEntities",
			"returnType": "EGroup*",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false}
			],
			"description": "Returns an EntityGroupObs containing all the players entities. \n This function returns a 'global' entity group with the name '__Player%dEntities', where %d is the player ID.  This means that you should never need to destroy it./n However, if you do destroy it, it will be recreated the next time this function is called."
		},
		{
			"name": "Player_GetEntitiesFromType",
			"returnType": "EGroup",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "unitType", "type": "String", "optional": false}
			],
			"description": "Returns an EGroup containing all of the players entities of a specific unit_type (as defined by the type_ext on the entity) \nThis function returns a new EGroup to allow tracking of different types. "
		},
		{
			"name": "Player_GetEntityConcentration",
			"returnType": "EGroup",
			"parameters": [
				{"name": "player[", "type": "PlayerID", "optional": false},
				{"name": "popcapOnly", "type": "Boolean", "optional": false},
				{"name": "includeBlueprints", "type": "Table", "optional": false},
				{"name": "excludeBlueprints", "type": "Table", "optional": false},
				{"name": "bLeastConcentrated", "type": "Boolean", "optional": false},
				{"name": "onlyInThisMarker", "type": "MarkerID/Table", "optional": false}
			],
			"description": "Finds the greatest (or least) concentration of entities owned by a player. \nThis function is slow, so don't call it very often"
		},
		{
			"name": "Player_GetEntityCount",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns the number of entities a player currently owns "
		},
		{
			"name": "Player_GetEntityName",
			"returnType": "const char*",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false},
				{"name": "index", "type": "int", "optional": false}
			],
			"description": "Returns the name of an entity a player currently owns "
		},
		{
			"name": "Player_GetID",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns the id of the player "
		},
		{
			"name": "Player_GetMaxPopulation",
			"returnType": "float",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false},
				{"name": "capType", "type": "<a href=\"enum_list.htm#CapType\">CapType</a>", "optional": false}
			],
			"description": "Use capType CT_Personnel to get max squad cap or CT_VehicleCap to get max vehicle cap. "
		},
		{
			"name": "Player_GetNumStrategicPoints",
			"returnType": "int",
			"parameters": [
				{"name": "p", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns the number of strategic points (not objectives) this player owns "
		},
		{
			"name": "Player_GetNumVictoryPoints",
			"returnType": "int",
			"parameters": [
				{"name": "p", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns the number of strategic objectives this player owns "
		},
		{
			"name": "Player_GetPopulationPercentage",
			"returnType": "Real",
			"parameters": [
				{"name": "playerid[", "type": "PlayerID", "optional": false},
				{"name": "captype", "type": "Integer", "optional": false}
			],
			"description": "Gets the current personnel or vehicle population as a percetange of the current max-cap. The captype is either CT_Personnel or CT_Vehicle. \ncaptype is CT_Personnel by default."
		},
		{
			"name": "Player_GetRace",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns the race index for the given player. "
		},
		{
			"name": "Player_GetRaceName",
			"returnType": "const char*",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns the name of the race for a given player and always in english "
		},
		{
			"name": "Player_GetRelationship",
			"returnType": "ModAlliance::AllianceResult",
			"parameters": [
				{"name": "player1", "type": "const ModPlayer*", "optional": false},
				{"name": "player2", "type": "ModPlayer*", "optional": false}
			],
			"description": "Returns the relationship between 2 players. "
		},
		{
			"name": "Player_GetResource",
			"returnType": "float",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false},
				{"name": "type", "type": "ResourceAmount::ResourceType", "optional": false}
			],
			"description": "Returns the amount of resources a given player has. "
		},
		{
			"name": "Player_GetResourceRate",
			"returnType": "float",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false},
				{"name": "type", "type": "ResourceAmount::ResourceType", "optional": false}
			],
			"description": "Returns the amount of resources a given player is getting per second. "
		},
		{
			"name": "Player_GetSquadConcentration",
			"returnType": "SGroup",
			"parameters": [
				{"name": "player[", "type": "PlayerID", "optional": false},
				{"name": "popcapOnly", "type": "Boolean", "optional": false},
				{"name": "includeBlueprints", "type": "Table", "optional": false},
				{"name": "excludeBlueprints", "type": "Table", "optional": false},
				{"name": "bLeastConcentrated", "type": "Boolean", "optional": false},
				{"name": "onlyInThisMarker", "type": "MarkerID/Table", "optional": false}
			],
			"description": "Finds the greatest (or least) concentration of squads owned by a player. \nThis function is slow, so don't call it very often"
		},
		{
			"name": "Player_GetSquadCount",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns the number of squads a player currently owns "
		},
		{
			"name": "Player_GetSquads",
			"returnType": "SGroup*",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns a SquadGroupObs containing all the players units. \n This function returns a 'global' squad group with the name '__Player%dSquads', where %d is the player ID.  This means that you should never need to destroy it./n However, if you do destroy it, it will be recreated the next time this function is called."
		},
		{
			"name": "Player_GetStartingPosition",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns the starting position for this player "
		},
		{
			"name": "Player_GetStrategicPointCaptureProgress",
			"returnType": "float",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "strategicPoint", "type": "Entity*", "optional": false}
			],
			"description": "Returns a value (-1.0 to 1.0) of how close a point is to being controlled by the team of the player provided \nProgress between -1.0 and 0 means an enemy has progress toward owning a point.  Values between 0 and 1.0 represent progress being made toward capture. 1.0 is a team controlled point.  -1.0 is an enemy controlled point."
		},
		{
			"name": "Player_GetTeam",
			"returnType": "int",
			"parameters": [
				{"name": "p", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Get the team a player is on "
		},
		{
			"name": "Player_GetUnitCount",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns the current number of units the player has. "
		},
		{
			"name": "Player_GetUpgradeCost",
			"returnType": "float",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "upgradePBG", "type": "ScarUpgradePBG", "optional": false},
				{"name": "resourceType", "type": "ResourceAmount::ResourceType", "optional": false}
			],
			"description": "Returns the cost of an upgrade.  "
		},
		{
			"name": "Player_HasAbility",
			"returnType": "bool",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false},
				{"name": "pAbilityPBG", "type": "ScarAbilityPBG", "optional": false}
			],
			"description": "Tests to see if a player has an ability "
		},
		{
			"name": "Player_HasBuilding",
			"returnType": "boolean",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "entitytypes", "type": "BlueprintTable", "optional": false}
			],
			"description": "Returns true if this player owns any buildings listed in the table. \nThis only looks at completed buildings - use Player_HasBuildingUnderConstruction to see if the player is building something"
		},
		{
			"name": "Player_HasBuildingsExcept",
			"returnType": "boolean",
			"parameters": [
				{"name": "playerId", "type": "PlayerID", "optional": false},
				{"name": "exceptions", "type": "BlueprintTable", "optional": false}
			],
			"description": "Returns true if this player owns any buildings. (with exclusions). "
		},
		{
			"name": "Player_HasBuildingUnderConstruction",
			"returnType": "boolean",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "entitytypes", "type": "BlueprintTable", "optional": false}
			],
			"description": "Returns true if this player owns any buildings listed in the table currently under construction. "
		},
		{
			"name": "Player_HasCapturingSquadNearStrategicPoint",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "strategicPoint", "type": "Entity*", "optional": false}
			],
			"description": "Returns true if the given player has units that are able to capture in the capturable area of the given strategic point "
		},
		{
			"name": "Player_HasLost",
			"returnType": "Boolean",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "Blueprints", "type": "LuaTable", "optional": false}
			],
			"description": "Checks to see if a player has lost (if player owns any squads and any buildings contained in blueprints) \nPass in a table of blueprints of buildings that the player must have in order to be considered \"alive\".   Ambient buildings are already take into consideration since they must be occupied by a squad."
		},
		{
			"name": "Player_HasMapEntryPosition",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false}
			],
			"description": "Returns whether a player has a map entry position "
		},
		{
			"name": "Player_HasUpgrade",
			"returnType": "bool",
			"parameters": [
				{"name": "pPlayer", "type": "const ModPlayer*", "optional": false},
				{"name": "upgradePBG", "type": "ScarUpgradePBG", "optional": false}
			],
			"description": "Return true if the squad has purchased the specified upgrade. "
		},
		{
			"name": "Player_IsAlive",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns true if player is still alive and false if player is dead.  Will error if playerIdx is an invalid index. "
		},
		{
			"name": "Player_IsAllied",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerId1", "type": "PlayerID", "optional": false},
				{"name": "playerId2", "type": "PlayerID", "optional": false}
			],
			"description": "Returns true if the players are allied and false if they are not. "
		},
		{
			"name": "Player_IsHuman",
			"returnType": "bool",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false}
			],
			"description": "Returns whether a player is human controlled (local or remote), not dead, and not replaced by an AI "
		},
		{
			"name": "Player_NumUpgradeComplete",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false},
				{"name": "upgradePBG", "type": "ScarSquadPBG", "optional": false}
			],
			"description": "Returns the number of upgrades that this player has. "
		},
		{
			"name": "Player_OwnsEGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID", "optional": false},
				{"name": "egroup[", "type": "EGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if a given player owns ALL or ANY items in a group "
		},
		{
			"name": "Player_OwnsEntity",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID", "optional": false},
				{"name": "entity", "type": "EntityID", "optional": false}
			],
			"description": "Returns true if a given player owns an entity "
		},
		{
			"name": "Player_OwnsSGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID", "optional": false},
				{"name": "sgroup[", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if a given player owns ALL or ANY items in a group "
		},
		{
			"name": "Player_OwnsSquad",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID", "optional": false},
				{"name": "squad", "type": "SquadID", "optional": false}
			],
			"description": "Returns true if a given player owns a squad "
		},
		{
			"name": "Player_RemoveAbilityLockoutZone",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "abilityPBG", "type": "ScarAbilityPBG", "optional": false},
				{"name": "marker", "type": "ScarMarker", "optional": false}
			],
			"description": "Removes a marker that was previously a lockout zone. "
		},
		{
			"name": "Player_RemoveUpgrade",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "upgrade", "type": "ScarUpgradePBG", "optional": false}
			],
			"description": "Removes an upgrade from a player "
		},
		{
			"name": "Player_ResetResource",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "type", "type": "ResourceAmount::ResourceType", "optional": false}
			],
			"description": "Reset the resource amount for a given player to zero.  Also reset team weapon "
		},
		{
			"name": "Player_RestrictAddOnList",
			"returnType": "Void",
			"parameters": [
				{"name": "playerid", "type": "PlayerID", "optional": false},
				{"name": "addonlist", "type": "Table", "optional": false}
			],
			"description": "Restrict a list of addons. \nlist should contain an array of strings to restrict."
		},
		{
			"name": "Player_RestrictBuildingList",
			"returnType": "Void",
			"parameters": [
				{"name": "playerid", "type": "PlayerID", "optional": false},
				{"name": "blueprintlist", "type": "Table", "optional": false}
			],
			"description": "Restrict a list of buildings. \nlist should contain an array of strings to restrict."
		},
		{
			"name": "Player_RestrictResearchList",
			"returnType": "Void",
			"parameters": [
				{"name": "playerid", "type": "PlayerID", "optional": false},
				{"name": "list", "type": "StringTable", "optional": false}
			],
			"description": "Restrict a list of research items. \nlist should contain an array of strings to restrict."
		},
		{
			"name": "Player_SetAbilityAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "bp", "type": "AbilityBlueprint/Table", "optional": false},
				{"name": "availability", "type": "Integer", "optional": false}
			],
			"description": "Sets the availability of an ability. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT "
		},
		{
			"name": "Player_SetAllCommandAvailabilityInternal",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "availability", "type": "ModPlayer::Availability", "optional": false},
				{"name": "reason", "type": "LocString", "optional": false}
			],
			"description": "Sets availability of ALL entity, squad and player commands.  "
		},
		{
			"name": "Player_SetCommandAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "command", "type": "Integer/Table", "optional": false},
				{"name": "availability", "type": "Integer", "optional": false}
			],
			"description": "Sets the availability of entity, squad and player commands. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT "
		},
		{
			"name": "Player_SetConstructionMenuAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "menuname", "type": "String/Table", "optional": false},
				{"name": "availability", "type": "Integer", "optional": false}
			],
			"description": "Sets the availability of a construction menu. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT "
		},
		{
			"name": "Player_SetDefaultSquadMoodMode",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false},
				{"name": "mood", "type": "SquadCombatBehaviourExt::MoodMode", "optional": false}
			],
			"description": "Set default squad mood mode which can be overrided by squad level mood mode settings "
		},
		{
			"name": "Player_SetEntityProductionAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "bp", "type": "EntityBlueprint/Table", "optional": false},
				{"name": "availability", "type": "Integer", "optional": false}
			],
			"description": "Sets the availability of an entity production item. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT "
		},
		{
			"name": "Player_SetHeatGainRate",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "gainRatePerSecond", "type": "float", "optional": false}
			],
			"description": "Set the heat gain rate per second for this player. Heat is gained when near a heat source or garrisoned. "
		},
		{
			"name": "Player_SetHeatLossRate",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "lossRatePerSecond", "type": "float", "optional": false}
			],
			"description": "Set the heat loss rate per second for this player. Heat is lost when not garrisoned and not near a heat source and not in valid cover. A value of 0 turns off the Cold System for all squads belonging to this player. It will also reset all squads to the default heat level. "
		},
		{
			"name": "Player_SetMaxCapPopulation",
			"returnType": "Void",
			"parameters": [
				{"name": "playerid", "type": "PlayerID", "optional": false},
				{"name": "captype", "type": "Integer", "optional": false},
				{"name": "newcap", "type": "Integer", "optional": false}
			],
			"description": "Sets the current personnel or vehicle max-cap for a player. The captype is either CT_Personnel or CT_Vehicle (you can't adjust Medic caps just yet). \nyou will have to call Player_SetMaxPopulation to adjust the current max population to do this."
		},
		{
			"name": "Player_SetMaxPopulation",
			"returnType": "Void",
			"parameters": [
				{"name": "playerid", "type": "PlayerID", "optional": false},
				{"name": "captype", "type": "Integer", "optional": false},
				{"name": "newcap", "type": "Integer", "optional": false}
			],
			"description": "Sets the current personnel or vehicle cap for a player. The captype is either CT_Personnel or CT_Vehicle (you can't adjust Medic caps just yet). \nNote that any modifiers that adjust the current cap will be applied on top of this.  Also note, the current cap cannot go higher than the max cap."
		},
		{
			"name": "Player_SetPopCapOverride",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "personnel", "type": "float", "optional": false}
			],
			"description": "Sets a pop cap override that ignores any modifiers. "
		},
		{
			"name": "Player_SetResource",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "type", "type": "ResourceAmount::ResourceType", "optional": false},
				{"name": "amt", "type": "float", "optional": false}
			],
			"description": "Set the resource amount for a given player.  Ignores income cap and resource sharing. "
		},
		{
			"name": "Player_SetSquadProductionAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "bp", "type": "SquadBlueprint/Table", "optional": false},
				{"name": "availability", "type": "Integer", "optional": false}
			],
			"description": "Sets the availability of a squad production item. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT "
		},
		{
			"name": "Player_SetUpgradeAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "bp", "type": "UpgradeBlueprint/Table", "optional": false},
				{"name": "availability", "type": "Integer", "optional": false}
			],
			"description": "Sets the availability of an upgrade. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT "
		},
		{
			"name": "Player_SetUpgradeCost",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "upgrade", "type": "UpgradeID", "optional": false},
				{"name": "manpower", "type": "Real", "optional": false},
				{"name": "fuel", "type": "Real", "optional": false},
				{"name": "munition", "type": "Real", "optional": false},
				{"name": "action", "type": "Real", "optional": false},
				{"name": "command", "type": "Real", "optional": false}
			],
			"description": "Sets the cost of an upgrade. "
		},
		{
			"name": "Player_SpawnGlider",
			"returnType": "Entity*",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "glider", "type": "ScarEntityPBG", "optional": false},
				{"name": "start", "type": "ScarPosition", "optional": false},
				{"name": "end", "type": "ScarPosition", "optional": false}
			],
			"description": "Spawns a glider and returns it "
		},
		{
			"name": "Player_StopAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "ability", "type": "ScarAbilityPBG", "optional": false},
				{"name": "bEarlyExit", "type": "bool", "optional": false}
			],
			"description": "Abruptly stops an active ability "
		},
		{
			"name": "Player_StopEarningActionPoints",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false}
			],
			"description": "Prevents a player from earning any action points (and by extention, command points) "
		},
		{
			"name": "Player_Triangulate",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "squads", "type": "SGroup*", "optional": false},
				{"name": "eg", "type": "EGroup*", "optional": false}
			],
			"description": "Returns the enemy squads and entities within a player's radio beacons. Radio beacons are shared among team members. "
		},
		{
			"name": "Actor_Clear",
			"returnType": "Void",
			"parameters": [
				{"name": "actor", "type": "ActorTable", "optional": false}
			],
			"description": "Clear ties between an actor and any units "
		},
		{
			"name": "Actor_PlaySpeech",
			"returnType": "Void",
			"parameters": [
				{"name": "actor", "type": "ActorTable", "optional": false},
				{"name": "locID[", "type": "Integer", "optional": false},
				{"name": "continueButton", "type": "Boolean", "optional": false},
				{"name": "stickySubtitle", "type": "Boolean", "optional": false},
				{"name": "blockInput", "type": "Boolean", "optional": false}
			],
			"description": "Plays a speech event for a given actor WITH a portrait and subtitle \nBe VERY careful how you use the 'blockInput' parameter. It blocks all input except mouse movement, a few critical keyboard keys, and the Continue and Menu buttons. So you should always allow a continue button when blocking input. You shouldn't block input for a sticky subtitle! If the speech file is not available, a placeholder time will be calculated for the message using the number of words and the message will be displayed for that length of time.&lt;BR/&gt; Actors: ACTOR.GenericAlly, ACTOR.GenericAxis, ACTOR.Keller, ACTOR.McKay, ACTOR.Conti, ACTOR.Franks, ACTOR.Peoples, ACTOR.Coogi, etc..."
		},
		{
			"name": "Actor_PlaySpeechWithoutPortrait",
			"returnType": "Void",
			"parameters": [
				{"name": "actor", "type": "ActorTable", "optional": false},
				{"name": "locID[", "type": "Integer", "optional": false},
				{"name": "continueButton", "type": "Boolean", "optional": false},
				{"name": "stickySubtitle", "type": "Boolean", "optional": false},
				{"name": "blockInput", "type": "Boolean", "optional": false}
			],
			"description": "Plays a speech event for a given actor WITHOUT a portrait or subtitle. See Actor_PlaySpeech for more details "
		},
		{
			"name": "Actor_SetFromSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "actor", "type": "ActorTable", "optional": false},
				{"name": "sgroup", "type": "SGroupID", "optional": false}
			],
			"description": "Tie an entire sgroup to an actor, so audio comes from a squad member "
		},
		{
			"name": "Actor_SetFromSquad",
			"returnType": "Void",
			"parameters": [
				{"name": "actor", "type": "ActorTable", "optional": false},
				{"name": "squad", "type": "SquadID", "optional": false}
			],
			"description": "Tie a single squad to an actor, so audio comes from a squad member "
		},
		{
			"name": "Prox_AreEntitiesNearMarker",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "position", "type": "MarkerID/Position/SectorID", "optional": false},
				{"name": "all[", "type": "Boolean", "optional": false},
				{"name": "range", "type": "Real", "optional": false}
			],
			"description": "Returns true if ANY or ALL entities from a group are in range of a given position, marker, or territory sector. \nMarkers with proximity type rectangle will use circular proximity check if custom range is supplied&lt;BR/&gt;"
		},
		{
			"name": "Prox_ArePlayerMembersNearMarker",
			"returnType": "Boolean",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "position", "type": "MarkerID/Position/SectorID", "optional": false},
				{"name": "all[", "type": "Boolean", "optional": false},
				{"name": "range", "type": "Real", "optional": false},
				{"name": "filterlist", "type": "SBP/Table", "optional": false},
				{"name": "filtertype", "type": "Integer", "optional": false}
			],
			"description": "Returns true if ANY or ALL of a player's members (i.e. individual guys, not squads as a whole) are in range of a given position, marker, or territory sector. DO NOT USE THIS FUNCTION UNLESS YOU ABSOLUTELY HAVE TO!! \nYou MUST specify a range if you are using a position rather than a marker."
		},
		{
			"name": "Prox_ArePlayersNearMarker",
			"returnType": "Boolean",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "position", "type": "MarkerID/Position/SectorID", "optional": false},
				{"name": "all[", "type": "Boolean", "optional": false},
				{"name": "range", "type": "Real", "optional": false},
				{"name": "filterlist", "type": "SBP/Table", "optional": false},
				{"name": "filtertype", "type": "Integer", "optional": false}
			],
			"description": "Returns true if ANY or ALL of a player's squads are in range of a given position, marker, or territory sector. THIS FUNCTION IS VERY SLOW. DO NOT USE THIS UNLESS ABSOLUTELY NECESSARY. \nMarkers with proximity type rectangle will use circular proximity check if custom range is supplied&lt;BR/&gt;"
		},
		{
			"name": "Prox_AreSquadMembersNearMarker",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "position", "type": "MarkerID/Position/SectorID", "optional": false},
				{"name": "all[", "type": "Boolean", "optional": false},
				{"name": "range", "type": "Real", "optional": false}
			],
			"description": "Returns true if ANY or ALL squad members (i.e. individual guys, not squads as a whole) from a group are in range of a given position, marker, or territory sector. DO NOT USE THIS FUNCTION UNLESS YOU ABSOLUTELY HAVE TO!! \nMarkers with proximity type rectangle will use circular proximity check if custom range is supplied&lt;BR/&gt;"
		},
		{
			"name": "Prox_AreSquadsNearMarker",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "position", "type": "MarkerID/Position/SectorID", "optional": false},
				{"name": "all[", "type": "Boolean", "optional": false},
				{"name": "range", "type": "Real", "optional": false}
			],
			"description": "Returns true if ANY or ALL squads from a group are in range of a given position, marker, or territory sector \nMarkers with proximity type rectangle will use circular proximity check if custom range is supplied&lt;BR/&gt;"
		},
		{
			"name": "Prox_AreTeamsNearMarker",
			"returnType": "Boolean",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "position", "type": "MarkerID/Position/SectorID", "optional": false},
				{"name": "all[", "type": "Boolean", "optional": false},
				{"name": "range", "type": "Real", "optional": false},
				{"name": "filterlist", "type": "SBP/Table", "optional": false},
				{"name": "filtertype", "type": "Integer", "optional": false}
			],
			"description": "Returns true if ANY or ALL of a teams's squads are in range of a given position, marker, or territory sector. THIS FUNCTION IS VERY SLOW. DO NOT USE THIS UNLESS ABSOLUTELY NECESSARY. \nMarkers with proximity type rectangle will use circular proximity check if custom range is supplied&lt;BR/&gt;"
		},
		{
			"name": "Prox_EGroupEGroup",
			"returnType": "Real",
			"parameters": [
				{"name": "egroup1", "type": "EGroupID", "optional": false},
				{"name": "egroup2", "type": "EGroupID", "optional": false},
				{"name": "checktype", "type": "ProxType", "optional": false}
			],
			"description": "Returns the distance between two entity groups. use checktype PROX_SHORTEST, PROX_LONGEST, or PROX_CENTER. \n If check is PROX_SHORTEST this will return the shortest distance between the two groups.&lt;BR/&gt; If check is PROX_LONGEST this will return the longest distance between the two groups.&lt;BR/&gt; If check is PROX_CENTER this will return the distance between the two groups centers.&lt;BR/&gt;"
		},
		{
			"name": "Prox_EGroupSGroup",
			"returnType": "Real",
			"parameters": [
				{"name": "egroup1", "type": "EGroupID", "optional": false},
				{"name": "sgroup2", "type": "SGroupID", "optional": false},
				{"name": "checktype", "type": "ProxType", "optional": false}
			],
			"description": "Returns the distance between an entity group and a squad group.  use checktype PROX_SHORTEST, PROX_LONGEST, or PROX_CENTER. \n If check is PROX_SHORTEST this will return the shortest distance between the two groups.&lt;BR/&gt; If check is PROX_LONGEST this will return the longest distance between the two groups.&lt;BR/&gt; If check is PROX_CENTER this will return the distance between the two groups centers.&lt;BR/&gt;"
		},
		{
			"name": "Prox_EntitiesInProximityOfEntities",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup1", "type": "EGroupID", "optional": false},
				{"name": "egroup2", "type": "EGroupID", "optional": false},
				{"name": "proximity", "type": "Real", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Checks if ALL or ANY entities are in proximity of a given entity group. \nSet \"all\" to true to check that ALL entities are in proximity, or set \"all\" to false to check for ANY."
		},
		{
			"name": "Prox_GetRandomPosition",
			"returnType": "Position",
			"parameters": [
				{"name": "item", "type": "Object", "optional": false},
				{"name": "radius", "type": "Integer", "optional": false},
				{"name": "minimum", "type": "Integer", "optional": false}
			],
			"description": "Takes something (Entity, Squad, SGroup, EGroup, Position) in, then returns a random position \nMinimum is ignored if it is greater than the radius"
		},
		{
			"name": "Prox_MarkerEGroup",
			"returnType": "Real",
			"parameters": [
				{"name": "marker", "type": "MarkerID", "optional": false},
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "checktype", "type": "ProxType", "optional": false}
			],
			"description": "Returns the distance between a marker and an entity group.  use checktype PROX_SHORTEST, PROX_LONGEST, or PROX_CENTER. \n If check is PROX_SHORTEST this will return the shortest distance between the two groups.&lt;BR/&gt; If check is PROX_LONGEST this will return the longest distance between the two groups.&lt;BR/&gt; If check is PROX_CENTER this will return the distance between the two groups centers.&lt;BR/&gt;"
		},
		{
			"name": "Prox_MarkerSGroup",
			"returnType": "Real",
			"parameters": [
				{"name": "marker", "type": "MarkerID", "optional": false},
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "checktype", "type": "ProxType", "optional": false}
			],
			"description": "Returns the distance between a marker and a squad group.  use checktype PROX_SHORTEST, PROX_LONGEST, or PROX_CENTER. \n If check is PROX_SHORTEST this will return the shortest distance between the two groups.&lt;BR/&gt; If check is PROX_LONGEST this will return the longest distance between the two groups.&lt;BR/&gt; If check is PROX_CENTER this will return the distance between the two groups centers.&lt;BR/&gt;"
		},
		{
			"name": "Prox_PlayerEntitiesInProximityOfEntities",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID", "optional": false},
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "proximity", "type": "Real", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false},
				{"name": "exclude", "type": "EntityID", "optional": false}
			],
			"description": "Checks if ALL or ANY players squads are in proximity of a given entity group. \nSet \"all\" to true to check that ALL entities are in proximity, or set \"all\" to false to check for ANY."
		},
		{
			"name": "Prox_PlayerEntitiesInProximityOfPlayerSquads",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerentities", "type": "PlayerID", "optional": false},
				{"name": "playersquads", "type": "PlayerID", "optional": false},
				{"name": "proximity", "type": "Real", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Checks if ALL or ANY players entities are in proximity of a given squad group. \nSet \"all\" to true to check that ALL entities are in proximity, or set \"all\" to false to check for ANY."
		},
		{
			"name": "Prox_PlayerEntitiesInProximityOfSquads",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID", "optional": false},
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "proximity", "type": "Real", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Checks if ALL or ANY players entities are in proximity of a given squad group. \nSet \"all\" to true to check that ALL entities are in proximity, or set \"all\" to false to check for ANY."
		},
		{
			"name": "Prox_PlayerSquadsInProximityOfEntities",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID", "optional": false},
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "proximity", "type": "Real", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false},
				{"name": "filterlist", "type": "SBP/Table", "optional": false},
				{"name": "filtertype", "type": "Int", "optional": false}
			],
			"description": "Checks if ALL or ANY players squads are in proximity of a given entity group. \nSet \"all\" to true to check that ALL squads are in proximity, or set \"all\" to false to check for ANY."
		},
		{
			"name": "Prox_PlayerSquadsInProximityOfPlayerEntities",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playersquads", "type": "PlayerID", "optional": false},
				{"name": "playerentities", "type": "PlayerID", "optional": false},
				{"name": "proximity", "type": "Real", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Checks if ALL or ANY players squads are in proximity of a given players entities. \nSet \"all\" to true to check that ALL squads are in proximity, or set \"all\" to false to check for ANY."
		},
		{
			"name": "Prox_PlayerSquadsInProximityOfPlayerSquads",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid1", "type": "PlayerID", "optional": false},
				{"name": "playerid2", "type": "PlayerID", "optional": false},
				{"name": "proximity", "type": "Real", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Checks if ALL or ANY players squads are in proximity of a given players squads. \nSet \"all\" to true to check that ALL squads are in proximity, or set \"all\" to false to check for ANY."
		},
		{
			"name": "Prox_PlayerSquadsInProximityOfSquads",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID", "optional": false},
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "proximity", "type": "Real", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false},
				{"name": "exclude", "type": "SquadID", "optional": false},
				{"name": "filterlist", "type": "SBP/Table", "optional": false},
				{"name": "filtertype", "type": "Int", "optional": false}
			],
			"description": "Checks if ALL or ANY players squads are in proximity of a given squad group. \nSet \"all\" to true to check that ALL squads are in proximity, or set \"all\" to false to check for ANY."
		},
		{
			"name": "Prox_SGroupSGroup",
			"returnType": "Real",
			"parameters": [
				{"name": "sgroup1", "type": "SGroupID", "optional": false},
				{"name": "sgroup2", "type": "SGroupID", "optional": false},
				{"name": "checktype", "type": "ProxType", "optional": false}
			],
			"description": "Returns the distance between two squad groups. use checktype PROX_SHORTEST, PROX_LONGEST, or PROX_CENTER. \n If check is PROX_SHORTEST this will return the shortest distance between the two groups.&lt;BR/&gt; If check is PROX_LONGEST this will return the longest distance between the two groups.&lt;BR/&gt; If check is PROX_CENTER this will return the distance between the two groups centers.&lt;BR/&gt;"
		},
		{
			"name": "Prox_SquadsInProximityOfEntities",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "proximity", "type": "Real", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Checks if ALL or ANY squads are in proximity of a given entity group. \nSet \"all\" to true to check that ALL squads are in proximity, or set \"all\" to false to check for ANY."
		},
		{
			"name": "Prox_SquadsInProximityOfSquads",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup1", "type": "SGroupID", "optional": false},
				{"name": "sgroup2", "type": "SGroupID", "optional": false},
				{"name": "proximity", "type": "Real", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Checks if ALL or ANY squads are in proximity of a given squad group. \nSet \"all\" to true to check that ALL squads are in proximity, or set \"all\" to false to check for ANY."
		},
		{
			"name": "Rule_Add",
			"returnType": "Void",
			"parameters": [
				{"name": "rule[", "type": "LuaFunction", "optional": false},
				{"name": "priority", "type": "Integer", "optional": false}
			],
			"description": "Add a rule to be executed every frame. Priority can be from 0 to 1000, with 0 being the lowest. Priority is used in conjunction with Rule_RemoveAll so that rules with high priority do not get removed. "
		},
		{
			"name": "Rule_AddDelayedInterval",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction", "optional": false},
				{"name": "delay", "type": "Real", "optional": false},
				{"name": "interval[", "type": "Real", "optional": false},
				{"name": "priority", "type": "Integer", "optional": false}
			],
			"description": "Add a rule to be executed at every 'interval' seconds, after an initial delay. Priority can be from 0 to 1000, with 0 being the lowest. Priority is used in conjunction with Rule_RemoveAll so that rules with high priority do not get removed. "
		},
		{
			"name": "Rule_AddDelayedIntervalEx",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction", "optional": false},
				{"name": "delay", "type": "Real", "optional": false},
				{"name": "interval", "type": "Real", "optional": false},
				{"name": "calls[", "type": "Integer", "optional": false},
				{"name": "priority", "type": "Integer", "optional": false},
				{"name": "calls", "type": "Integer", "optional": false}
			],
			"description": "Add a rule to be executed 'calls' times, at every 'interval' seconds, after an initial delay. Priority can be from 0 to 1000, with 0 being the lowest. Priority is used in conjunction with Rule_RemoveAll so that rules with high priority do not get removed. "
		},
		{
			"name": "Rule_AddEGroupEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction", "optional": false},
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "eventtype", "type": "Integer", "optional": false}
			],
			"description": "Add a rule to be executed when the event of 'eventType' has happened on entities in the 'egroup' \nEvent types are: GE_EntityKilled"
		},
		{
			"name": "Rule_AddEntityEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction", "optional": false},
				{"name": "entity", "type": "EntityID", "optional": false},
				{"name": "eventtype", "type": "Integer", "optional": false}
			],
			"description": "Add a rule to be executed when the event of 'eventType' has happened on the 'entity' \nEvent types are: GE_EntityKilled"
		},
		{
			"name": "Rule_AddGlobalEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction", "optional": false},
				{"name": "eventtype", "type": "Integer", "optional": false}
			],
			"description": "Add a rule to be executed when the event of 'eventType' has happened, regardless of source \nEvent types are: GE_PlayerBeingAttacked"
		},
		{
			"name": "Rule_AddInterval",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction", "optional": false},
				{"name": "interval[", "type": "Real", "optional": false},
				{"name": "priority", "type": "Integer", "optional": false}
			],
			"description": "Add a rule to be executed at every 'interval' seconds. Priority can be from 0 to 1000, with 0 being the lowest. Priority is used in conjunction with Rule_RemoveAll so that rules with high priority do not get removed. "
		},
		{
			"name": "Rule_AddIntervalEx",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction", "optional": false},
				{"name": "interval", "type": "Real", "optional": false},
				{"name": "calls[", "type": "Integer", "optional": false},
				{"name": "priority", "type": "Integer", "optional": false}
			],
			"description": "Add a rule to be executed 'calls' times, at every 'interval' seconds. Priority can be from 0 to 1000, with 0 being the lowest. Priority is used in conjunction with Rule_RemoveAll so that rules with high priority do not get removed. "
		},
		{
			"name": "Rule_AddOneShot",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction", "optional": false},
				{"name": "delay[", "type": "Real", "optional": false},
				{"name": "priority", "type": "Integer", "optional": false}
			],
			"description": "Add a rule to be executed once, after 'delay' seconds. Priority can be from 0 to 1000, with 0 being the lowest. Priority is used in conjunction with Rule_RemoveAll so that rules with high priority do not get removed. "
		},
		{
			"name": "Rule_AddPlayerEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction", "optional": false},
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "eventtype", "type": "Integer", "optional": false}
			],
			"description": "Add a rule to be executed when the event of 'eventType' has happened on the 'player' \nEvent types are: GE_PlayerBeingAttacked"
		},
		{
			"name": "Rule_AddSGroupEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction", "optional": false},
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "eventtype", "type": "Integer", "optional": false}
			],
			"description": "Add a rule to be executed when the event of 'eventType' has happened on squads in the 'sgroup' \nEvent types are: GE_SquadKilled, GE_SquadPinned, GE_SquadCommandIssued, GE_AbilityExecuted"
		},
		{
			"name": "Rule_AddSquadEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction", "optional": false},
				{"name": "squad", "type": "SquadID", "optional": false},
				{"name": "eventtype", "type": "Integer", "optional": false}
			],
			"description": "Add a rule to be executed when the event of 'eventType' has happened on the 'squad' \nEvent types are: GE_SquadKilled, GE_SquadPinned, GE_SquadCommandIssued, GE_AbilityExecuted"
		},
		{
			"name": "Rule_ChangeInterval",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction", "optional": false},
				{"name": "interval", "type": "Real", "optional": false}
			],
			"description": "Change 'interval' seconds of an existing rule "
		},
		{
			"name": "Rule_Exists",
			"returnType": "Boolean",
			"parameters": [
				{"name": "rule", "type": "LuaFunction", "optional": false}
			],
			"description": "Test if a rule is currently active "
		},
		{
			"name": "Rule_Remove",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction", "optional": false}
			],
			"description": "Remove a currently active rule (this does not remove any event rules) "
		},
		{
			"name": "Rule_RemoveAll",
			"returnType": "Void",
			"parameters": [
				{"name": "max_priority", "type": "Integer", "optional": true}
			],
			"description": "Kills all rules below a certain priority. The default is to remove ALL rules. "
		},
		{
			"name": "Rule_RemoveEGroupEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction", "optional": false},
				{"name": "egroup", "type": "EGroupID", "optional": false}
			],
			"description": "Remove an active event rule for entities in the 'egroup' "
		},
		{
			"name": "Rule_RemoveEntityEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction", "optional": false},
				{"name": "entity", "type": "EntityID", "optional": false}
			],
			"description": "Remove an active event rule for the 'entity' "
		},
		{
			"name": "Rule_RemoveGlobalEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction", "optional": false}
			],
			"description": "Remove an active event rule that's been applied 'globally' "
		},
		{
			"name": "Rule_RemoveIfExist",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction", "optional": false}
			],
			"description": "Remove a currently active rule if it exists(this does not remove any event rules) "
		},
		{
			"name": "Rule_RemoveMe",
			"returnType": "Void",
			"parameters": [
				{"name": "", "type": "", "optional": false}
			],
			"description": "Remove a currently executing rule (only works inside a rule function) "
		},
		{
			"name": "Rule_RemovePlayerEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction", "optional": false},
				{"name": "player", "type": "PlayerID", "optional": false}
			],
			"description": "Remove an active event rule for the 'player' "
		},
		{
			"name": "Rule_RemoveSGroupEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction", "optional": false},
				{"name": "sgroup", "type": "SGroupID", "optional": false}
			],
			"description": "Remove an active event rule for squads in the 'sgroup' "
		},
		{
			"name": "Rule_RemoveSquadEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction", "optional": false},
				{"name": "squad", "type": "SquadID", "optional": false}
			],
			"description": "Remove an active event rule for the 'squad' "
		},
		{
			"name": "Setup_Player",
			"returnType": "PlayerID",
			"parameters": [
				{"name": "playerIndex", "type": "Integer", "optional": false},
				{"name": "playerName", "type": "LocString", "optional": false},
				{"name": "playerRace", "type": "String", "optional": false},
				{"name": "team", "type": "Integer", "optional": false}
			],
			"description": "Initializes the all of the players settings in one function and returns the playerID. \n In most cases you will call this function from OnGameSetup and store the returned playerId in  a global variable.  The player index should be in the range [1 , (numPlayers)].&lt;BR/&gt;&lt;BR/&gt; Valid player races: \"Allied Airborne Company\", \"Allied Assault Company\", \"Allied Rifle Company\", \"Allied Tank Company\", \"Axis Armored Company\",\"Axis Heavy Tank Company\", \"Axis Infantry Company\",\"Axis Pioneer Company\"&lt;BR/&gt;&lt;BR/&gt; Example:&lt;BR/&gt;function OnGameSetup( )&lt;BR/&gt;&lt;TAB/&gt;g_player1 = Setup_Player(0, \"PlayerDisplayName\", \"Allied Assault Company\", 1)&lt;BR/&gt; &lt;TAB/&gt;-- g_player2 and g_player3 will be on the same team (allies)&lt;BR/&gt; &lt;TAB/&gt;g_player2 = Setup_Player(1, \"$20000\", \"Axis Infantry Company\", 2)&lt;BR/&gt; &lt;TAB/&gt;g_player3 = Setup_Player(2, \"$20001\", \"Axis Infantry Company\", 2)&lt;BR/&gt; --? The team ID starts from one!!end"
		},
		{
			"name": "Cmd_StopSquadsExcept",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup1[", "type": "SGroupID", "optional": false},
				{"name": "stopCapture", "type": "Boolean", "optional": false},
				{"name": "stopBuild", "type": "Boolean", "optional": false}
			],
			"description": "Pass in a group to command to 'stop'. Pass in booleans for capturing and building "
		},
		{
			"name": "Misc_IsEGroupOnScreen",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "EGroupID", "optional": false},
				{"name": "percent", "type": "Real", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Test whether ANY or ALL of an EGroup is on screen currently (not strict)  "
		},
		{
			"name": "Misc_IsSGroupOnScreen",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID", "optional": false},
				{"name": "percent", "type": "Real", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Test whether ANY or ALL of an SGroup is on screen currently (not strict)  "
		},
		{
			"name": "Rule_AddEGroupEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "fule", "type": "LuaFunction", "optional": false},
				{"name": "egroup", "type": "EGroup", "optional": false},
				{"name": "eventtype", "type": "Integer", "optional": false}
			],
			"description": "Add a rule to be executed when the event of 'eventType' has happened on the 'EGroup'Event types are: GE_EntityKilled "
		},
		{
			"name": "SGroup_Add",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "SGroup*", "optional": false},
				{"name": "squadron", "type": "Squad*", "optional": false}
			],
			"description": "Adds an squadron to the end of a group if the group doesnt already have it. "
		},
		{
			"name": "SGroup_AddAbility",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "ability", "type": "AbilityBlueprint", "optional": false}
			],
			"description": "Adds an ability to all squads in an sgroup. "
		},
		{
			"name": "SGroup_AddGroup",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "SGroup*", "optional": false},
				{"name": "grouptoadd", "type": "SGroup*", "optional": false}
			],
			"description": "Same as EGroup_AddGroup.  Note: You cannot mix squad groups and entity groups. "
		},
		{
			"name": "SGroup_AddGroups",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "groupList", "type": "Table", "optional": false}
			],
			"description": "Add a list of multiple sgroups into an existing group. "
		},
		{
			"name": "SGroup_AddLeaders",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false}
			],
			"description": "Adds a leader to all squads in a group that can take a leader. \nThis function will bypass all cost and queue prereqs"
		},
		{
			"name": "SGroup_AddSlotItemToDropOnDeath",
			"returnType": "Void",
			"parameters": [
				{"name": "groupid", "type": "SGroupID", "optional": false},
				{"name": "itemid", "type": "Int", "optional": false},
				{"name": "drop_chance", "type": "Float", "optional": false},
				{"name": "exclusive", "type": "Bool", "optional": false}
			],
			"description": "Add to the list of slot items to drop when any one of the squads is wiped out \nSGroup_AddSlotItemToDropOnDeath( squadid, item, false )"
		},
		{
			"name": "SGroup_CanCastAbilityOnEntity",
			"returnType": "Void",
			"parameters": [
				{"name": "caster", "type": "SGroupID", "optional": false},
				{"name": "ability", "type": "AbilityBlueprint", "optional": false},
				{"name": "target_entity", "type": "EntityID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Test whether ANY or ALL of a group can be ordered to do this ability on the target squad "
		},
		{
			"name": "SGroup_CanCastAbilityOnPosition",
			"returnType": "Void",
			"parameters": [
				{"name": "caster", "type": "SGroupID", "optional": false},
				{"name": "ability", "type": "AbilityBlueprint", "optional": false},
				{"name": "position", "type": "Position", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Test whether ANY or ALL of a group can be ordered to do this ability on the target position "
		},
		{
			"name": "SGroup_CanCastAbilityOnSquad",
			"returnType": "Void",
			"parameters": [
				{"name": "caster", "type": "SGroupID", "optional": false},
				{"name": "ability", "type": "AbilityBlueprint", "optional": false},
				{"name": "target_squad", "type": "SquadID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Test whether ANY or ALL of a group can be ordered to do this ability on the target entity "
		},
		{
			"name": "SGroup_CanInstantReinforceNow",
			"returnType": "Boolean",
			"parameters": [
				{"name": "group", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Return true if ANY or ALL of a group can reinforce now "
		},
		{
			"name": "SGroup_CanSeeSGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "targetsgroup", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ALL or ANY squads in a group can see ALL or ANY squads in a target sgroup. "
		},
		{
			"name": "SGroup_Clear",
			"returnType": "void",
			"parameters": [
				{"name": "sgroup", "type": "SGroup*", "optional": false}
			],
			"description": "Removes all entities from a group. "
		},
		{
			"name": "SGroup_ClearPostureSuggestion",
			"returnType": "void",
			"parameters": [
				{"name": "sgroup", "type": "SGroup*", "optional": false}
			],
			"description": "Clears any previous posture suggestions made to a squad "
		},
		{
			"name": "SGroup_Compare",
			"returnType": "bool",
			"parameters": [
				{"name": "group1", "type": "SGroup*", "optional": false},
				{"name": "group2", "type": "SGroup*", "optional": false}
			],
			"description": "Returns true if the contents of the two groups are equal. Order of the entities does not matter. "
		},
		{
			"name": "SGroup_CompleteEntityUpgrade",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "upgrade", "type": "UpgradeID", "optional": false}
			],
			"description": "Applies an upgrade to all squad entities in an sgroup. "
		},
		{
			"name": "SGroup_ContainsBlueprints",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "blueprints", "type": "BP/Table", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Check if a group contains ALL or ANY of the blueprints. "
		},
		{
			"name": "SGroup_ContainsSGroup",
			"returnType": "bool",
			"parameters": [
				{"name": "group1", "type": "SGroup*", "optional": false},
				{"name": "group2", "type": "SGroup*", "optional": false},
				{"name": "all", "type": "bool", "optional": false}
			],
			"description": "Returns true if SGroup1 contains ANY or ALL of SGroup2 "
		},
		{
			"name": "SGroup_ContainsSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "group", "type": "SGroup*", "optional": false},
				{"name": "SquadID", "type": "uint32_t", "optional": false}
			],
			"description": "Returns true if SGroup contains a particular SquadID "
		},
		{
			"name": "SGroup_Count",
			"returnType": "int",
			"parameters": [
				{"name": "sgroup", "type": "SGroup*", "optional": false}
			],
			"description": "Returns the total number of spawned and despawned squads in a group. \nNOTE: SGroup_Count does not count the individual soldiers in an SGroup.  For that, use SGroup_TotalMembersCount"
		},
		{
			"name": "SGroup_CountDeSpawned",
			"returnType": "int",
			"parameters": [
				{"name": "sgroup", "type": "SGroup*", "optional": false}
			],
			"description": "Returns the number of despawned squads in a group. "
		},
		{
			"name": "SGroup_CountSpawned",
			"returnType": "int",
			"parameters": [
				{"name": "sgroup", "type": "SGroup*", "optional": false}
			],
			"description": "Returns the number of spawned squads in a group. "
		},
		{
			"name": "SGroup_Create",
			"returnType": "SGroup*",
			"parameters": [
				{"name": "name", "type": "const char*", "optional": false}
			],
			"description": "Returns a new squadron group with the given name.   \n  Squad groups are used for all units and vehicles.  You can issue orders such as move and attack to an entire squad group.  If you want a group for buildings or objects such as trees, use an EntityGroupObs instead.&lt;BR/&gt;  Note that you are allowed to have unamed squadgroups or squadgroups with the samename.  Be careful not to create  duplicates of your squad group when you dont intend to.  To be safe, you can check if the SquadGroupObs you want to create  exists using SGroup_Exists( )"
		},
		{
			"name": "SGroup_CreateIfNotFound",
			"returnType": "SGroupID",
			"parameters": [
				{"name": "name", "type": "String", "optional": false}
			],
			"description": "Find a squad group from name.  Creates a new one with given name if it doesnt exist. "
		},
		{
			"name": "SGroup_CreateKickerMessage",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID", "optional": false},
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "textid", "type": "LocString", "optional": false}
			],
			"description": "Create and display kicker message on the each squad in the sgroup to the player "
		},
		{
			"name": "SGroup_DeSpawn",
			"returnType": "Void",
			"parameters": [
				{"name": "groupid", "type": "SGroupID", "optional": false}
			],
			"description": "Despawn all spawned squads in a group. "
		},
		{
			"name": "SGroup_Destroy",
			"returnType": "void",
			"parameters": [
				{"name": "egroup", "type": "SGroup*", "optional": false}
			],
			"description": "Manually destroy a group that you dont need anymore. "
		},
		{
			"name": "SGroup_DestroyAllInMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "marker", "type": "MarkerID", "optional": false}
			],
			"description": "Destroys all items in a group that are in proximity to a given marker. "
		},
		{
			"name": "SGroup_DestroyAllSquads",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false}
			],
			"description": "Destroys all spawned and despawned squads in a group. \n Be careful not to confuse this with SGroup_Destroy which destroys the group and NOT the squads it contains.  This function will destroy spawned and despawned items in a group"
		},
		{
			"name": "SGroup_DisableCombatPlans",
			"returnType": "Void",
			"parameters": [
				{"name": "groupID", "type": "SGroupID", "optional": false}
			],
			"description": "Disables all current combat plans for the squads in the sgroup "
		},
		{
			"name": "SGroup_Duplicate",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup1", "type": "SGroupID", "optional": false},
				{"name": "sgroup2", "type": "SGroupID", "optional": false}
			],
			"description": "Duplicates an SGroup \n Creates a copy of sgroup1 in sgroup2. The function will clear sgroup2 beforehand if necessary."
		},
		{
			"name": "SGroup_EnableAttention",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "attentive", "type": "Boolean", "optional": false}
			],
			"description": "Sets whether an entity pays attention to its surroundings "
		},
		{
			"name": "SGroup_EnableMinimapIndicator",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID", "optional": false},
				{"name": "enable", "type": "Boolean", "optional": false}
			],
			"description": "Enable or disable minimap indicator on all squads in the sgroup "
		},
		{
			"name": "SGroup_EnableSurprise",
			"returnType": "Void",
			"parameters": [
				{"name": "groupid", "type": "SGroupID", "optional": false},
				{"name": "enable", "type": "Boolean", "optional": false}
			],
			"description": "Enables or disables the surprise feature for an sgroup "
		},
		{
			"name": "SGroup_EnableUIDecorator",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID", "optional": false},
				{"name": "enable", "type": "Boolean", "optional": false}
			],
			"description": "Enable or disable decorators on all squads in the sgroup  "
		},
		{
			"name": "SGroup_Exists",
			"returnType": "bool",
			"parameters": [
				{"name": "name", "type": "const char*", "optional": false}
			],
			"description": "Returns true if the squad group with the given name exists "
		},
		{
			"name": "SGroup_FaceEachOther",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup1", "type": "SGroupID", "optional": false},
				{"name": "sgroup2", "type": "SGroupID", "optional": false}
			],
			"description": "Makes two SGroups face each other "
		},
		{
			"name": "SGroup_FaceMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "marker", "type": "MarkerID", "optional": false}
			],
			"description": "Makes a SGroup face a marker. "
		},
		{
			"name": "SGroup_Filter",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "blueprint", "type": "ID/Table", "optional": false},
				{"name": "[", "type": "Integer!filtertype", "optional": false},
				{"name": "splitSGroup", "type": "SGroupID", "optional": false}
			],
			"description": "Filters an SGroup by blueprint. \n Blueprints can be provided by name or by ID, and in a table if you want to filter on more than one type. Setting filtertype to FILTER_KEEP results in the group only containing squads of the types listed in the blueprint table. Setting filtertype to FILTER_REMOVE will strip those same squads out and leave those that aren't of the types listed. Setting splitSGroup will move any squads being KEEP or REMOVE to it.  This SGroup will NOT be cleared beforehand."
		},
		{
			"name": "SGroup_FilterCount",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup1", "type": "SGroupID", "optional": false},
				{"name": "groupSize", "type": "Int", "optional": false}
			],
			"description": "Pass in a group and it will filter it down to the indicated number "
		},
		{
			"name": "SGroup_FilterThreat",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "tableSBPs", "type": "LuaTable", "optional": false},
				{"name": "bEmpty", "type": "Boolean", "optional": true}
			],
			"description": "Searches an SGroup and finds the first threat within the table (searching first to last) and removes all other SBPs. \n Optional parameter bEmpty can be set to true, will clear the SGroup if none of the SBPS in the table are found."
		},
		{
			"name": "SGroup_ForEach",
			"returnType": "bool",
			"parameters": [
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "f", "type": "LuaBinding::StackVarFunction", "optional": false}
			],
			"description": "Call a lua function for each item in a group. Function will recieve (groupid, itemindex, itemid) and should return true to break or false to continue. \n function Rule_Test( )&lt;BR/&gt; &lt;TAB/&gt;local DespawnSquad = function( sgroupid, itemindex, squadID )&lt;BR/&gt; &lt;TAB/&gt;&lt;TAB/&gt;Squad_Despawn( squadID )&lt;BR/&gt; &lt;TAB/&gt;end&lt;BR/&gt;&lt;BR/&gt; &lt;TAB/&gt;SGroup_ForEach( SGroup_FromName(\"sg_Squads\"), DespawnSquad )&lt;BR/&gt; end&lt;BR/&gt;&lt;BR/&gt; This functions iterates over spawned squads only."
		},
		{
			"name": "SGroup_ForEachAllOrAny",
			"returnType": "bool",
			"parameters": [
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "all", "type": "bool", "optional": false},
				{"name": "f", "type": "LuaBinding::StackVarFunction", "optional": false}
			],
			"description": "Call a lua function for each item in a group. Function will receive (groupid, itemindex, itemid) and should return a bool. \n Only use this to TEST conditions on squads. DO NOT use this to perform operations on all squads, since it may not call your function on all squads (due to short circuit evaluation). This is used for checking if ALL or ANY items in a group match a given predicate. (eg. Are all items in a group chaos marines)&lt;BR/&gt; This functions iterates over spawned squads only."
		},
		{
			"name": "SGroup_ForEachAllOrAnyEx",
			"returnType": "bool",
			"parameters": [
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "all", "type": "bool", "optional": false},
				{"name": "f", "type": "LuaBinding::StackVarFunction", "optional": false},
				{"name": "spawned", "type": "bool", "optional": false},
				{"name": "despawned", "type": "bool", "optional": false}
			],
			"description": "Same as SGroup_ForEachAllOrAny except you have a choice to iterate over spawned squads, despawned squads, or both. "
		},
		{
			"name": "SGroup_ForEachEx",
			"returnType": "bool",
			"parameters": [
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "f", "type": "LuaBinding::StackVarFunction", "optional": false},
				{"name": "spawned", "type": "bool", "optional": false},
				{"name": "despawned", "type": "bool", "optional": false}
			],
			"description": "Same as SGroup_ForEach except you have a choice to iterate over spawned squads, despawned squads, or both. "
		},
		{
			"name": "SGroup_FromName",
			"returnType": "SGroup*",
			"parameters": [
				{"name": "name", "type": "const char*", "optional": false}
			],
			"description": "Find an squadron group with a given name. "
		},
		{
			"name": "SGroup_GetAvgHealth",
			"returnType": "Real",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false}
			],
			"description": "Returns the average health of all units in a squad group. \nIt now uses the same health measure that's used by the UI, so it does take into account fallen members of a squad"
		},
		{
			"name": "SGroup_GetAvgLoadout",
			"returnType": "Real",
			"parameters": [
				{"name": "sgroup", "type": "SGroup", "optional": false}
			],
			"description": "Returns the average loadout of all squads in a group as a percent [0.0, 1.0]. \nExample: A group of squads with loadouts of 4/8 and 1/1 would return 0.75"
		},
		{
			"name": "SGroup_GetDeSpawnedSquadAt",
			"returnType": "Squad*",
			"parameters": [
				{"name": "group", "type": "SGroup*", "optional": false},
				{"name": "index", "type": "unsigned int", "optional": false}
			],
			"description": "Returns the despawned squad at a certain position in the group. \n  This is a one-based index (use index 1 to get the first squad in the group.)    It is an error if index &gt; SGroup_GetDeSpawnedCount()."
		},
		{
			"name": "SGroup_GetGarrisonedBuildingEntity",
			"returnType": "EntityID",
			"parameters": [
				{"name": "groupid", "type": "SGroupID", "optional": false}
			],
			"description": "Get the entity id of the building that any squad of the sgroup is garrisoned in "
		},
		{
			"name": "SGroup_GetHoldEGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "EGroupHold", "type": "EGroup", "optional": false}
			],
			"description": "Gets all the entities that an SGroup may occupy and adds them to the EGroupHold "
		},
		{
			"name": "SGroup_GetHoldSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "SGroupHold", "type": "SGroup", "optional": false}
			],
			"description": "Gets all the squads that an SGroup may occupy and adds them to the SGroupHold "
		},
		{
			"name": "SGroup_GetInvulnerable",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Check invulnerablity state for ALL or ANY squads in a squad group. \n Set all param to true to check for ALL or set to false to check for ANY."
		},
		{
			"name": "SGroup_GetLastAttacker",
			"returnType": "Void",
			"parameters": [
				{"name": "SGroupVictim", "type": "SGroup", "optional": false},
				{"name": "SGroupAttacker[", "type": "SGroup", "optional": false},
				{"name": "seconds", "type": "Real", "optional": false}
			],
			"description": "Gets the last attacker(s) for all the squads in an SGroup Gets the last attacker for all the squads in an SGroup and stores that in SGroupAttacker "
		},
		{
			"name": "SGroup_GetLoadedVehicleSquad",
			"returnType": "SquadID",
			"parameters": [
				{"name": "groupid", "type": "SGroupID", "optional": false}
			],
			"description": "Get the squad id of the vehicle squad that any squad of the sgroup is loaded in "
		},
		{
			"name": "SGroup_GetName",
			"returnType": "const char*",
			"parameters": [
				{"name": "sgroup", "type": "SGroup*", "optional": false}
			],
			"description": "Returns the name of a given squad group. "
		},
		{
			"name": "SGroup_GetNumSlotItem",
			"returnType": "Int",
			"parameters": [
				{"name": "group", "type": "SGroupID", "optional": false},
				{"name": "itemID", "type": "Int", "optional": false}
			],
			"description": "Get the number of slot items with the same ID that the squads in the sgroup own "
		},
		{
			"name": "SGroup_GetOffsetPosition",
			"returnType": "Position",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "offset", "type": "Integer", "optional": false},
				{"name": "value", "type": "Real", "optional": false}
			],
			"description": "Returns a position (a certain distance away) relative to a squad's current position/orientation. see LuaConsts.scar for explanation of 'offset' parameter "
		},
		{
			"name": "SGroup_GetPosition",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "group", "type": "SGroup*", "optional": false}
			],
			"description": "Returns the center position of a squad group. \nDespawned squads are ignored."
		},
		{
			"name": "SGroup_GetRandomSpawnedSquad",
			"returnType": "SquadID",
			"parameters": [
				{"name": "sgroupid", "type": "SGroup", "optional": false}
			],
			"description": "Get a random spawned squad from sgroup "
		},
		{
			"name": "SGroup_GetSequence",
			"returnType": "Table",
			"parameters": [
				{"name": "name", "type": "String", "optional": false}
			],
			"description": "Builds a table of SGroupIDs that are named in a sequence. i.e. a name of \"sg_killer\" will find groups \"sg_killer1\", \"sg_killer2\" and so on, up until it looks for a group that isn't there. "
		},
		{
			"name": "SGroup_GetSpawnedSquadAt",
			"returnType": "Squad*",
			"parameters": [
				{"name": "group", "type": "SGroup*", "optional": false},
				{"name": "index", "type": "unsigned int", "optional": false}
			],
			"description": "Returns the spawned squad at a certain position in the group. \n  This is a one-based index (use index 1 to get the first squad in the group.)    It is an error if index &gt; SGroup_GetSpawnedCount()."
		},
		{
			"name": "SGroup_GetSpread",
			"returnType": "Real",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false}
			],
			"description": "Returns the distance from the centre of the group of the unit that furthest out.  "
		},
		{
			"name": "SGroup_GetSquadsHeld",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "sgroupRecipient", "type": "SGroupID", "optional": false}
			],
			"description": "Returns an sgroup containing all squads held by any squad in an sgroup "
		},
		{
			"name": "SGroup_GetSuppression",
			"returnType": "Float",
			"parameters": [
				{"name": "groupid", "type": "SGroupID", "optional": false}
			],
			"description": "Get the suppression level for the first squad in the sgroup "
		},
		{
			"name": "SGroup_GetVeterancyExperience",
			"returnType": "Float",
			"parameters": [
				{"name": "groupid", "type": "SGroupID", "optional": false}
			],
			"description": "Get the veterancy experience value for the first squad in the sgroup "
		},
		{
			"name": "SGroup_GetVeterancyRank",
			"returnType": "Int",
			"parameters": [
				{"name": "groupid", "type": "SGroupID", "optional": false}
			],
			"description": "Get the veterancy rank for the first squad in the sgroup "
		},
		{
			"name": "SGroup_HasCritical",
			"returnType": "Boolean",
			"parameters": [
				{"name": "group", "type": "SGroupID", "optional": false},
				{"name": "critical", "type": "CriticalID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ANY or ALL of the squads in the SGroup have the specified critical "
		},
		{
			"name": "SGroup_HasLeader",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Check if ALL or ANY squads in a sgroup have a leader \n Set all param to true to check for ALL or set to false to check for ANY."
		},
		{
			"name": "SGroup_HasSquadBlueprint",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "blueprint", "type": "BP", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Check if ALL or ANY of the squads in a group have a specific blueprint. "
		},
		{
			"name": "SGroup_HasTeamWeapon",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ANY or ALL of the squads in an SGroup are carrying some kind of team weapon "
		},
		{
			"name": "SGroup_HasUpgrade",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "upgrade", "type": "UpgradeID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns whether ANY or ALL squads in an SGroup have the specified upgrade "
		},
		{
			"name": "SGroup_Hide",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "hide", "type": "Bool", "optional": false}
			],
			"description": "Hide or show all entities in all squads in an SGroup \nBool should be true to hide, false to show"
		},
		{
			"name": "SGroup_IncreaseVeterancyExperience",
			"returnType": "Void",
			"parameters": [
				{"name": "groupid", "type": "SGroupID", "optional": false},
				{"name": "experience[", "type": "Float", "optional": false},
				{"name": "silent", "type": "Boolean", "optional": false},
				{"name": "applyModifiers", "type": "Boolean", "optional": false}
			],
			"description": "Increase squad veterancy experience for all squads in the sgroup. Can do silent promotion (no sound/UI). Can skip modifiers, giving you direct control of experience gained. "
		},
		{
			"name": "SGroup_IncreaseVeterancyRank",
			"returnType": "Void",
			"parameters": [
				{"name": "groupid[", "type": "SGroupID", "optional": false},
				{"name": "numranks", "type": "Integer", "optional": false},
				{"name": "silent", "type": "Boolean", "optional": false}
			],
			"description": "Increase squad veterancy rank for all squads in the sgroup. By default, increases rank by 1. Can do silent promotion (no sound/UI. ex: mass rank insrease at mission start) "
		},
		{
			"name": "SGroup_Intersection",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "SGroup*", "optional": false},
				{"name": "grouptointersect", "type": "SGroup*", "optional": false}
			],
			"description": "Same as EGroup_Intersection. Note: You cannot mix squad groups and entity groups. \n Only squads that are in both groups will be added to 'group'.&lt;BR/&gt; The contents of 'grouptointersect' will not be changed.&lt;BR/&gt; Example: group = (1,2,3,4,5,6)  grouptointersect = (2,4,6,8,10)   --&gt; group will now equal (2,4,6)"
		},
		{
			"name": "SGroup_IsAlive",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false}
			],
			"description": "Returns true if a named squad group is not empty and its average health is &gt; 0.0 "
		},
		{
			"name": "SGroup_IsAttackMoving",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ANY or ALL squads in an SGroup are attack moving. "
		},
		{
			"name": "SGroup_IsCamouflaged",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ANY or ALL of the squads in an SGroup are camouflaged "
		},
		{
			"name": "SGroup_IsCapturing",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "ALL", "type": "Boolean", "optional": false}
			],
			"description": "Checks if ANY or ALL squads in an SGroup are capturing "
		},
		{
			"name": "SGroup_IsConstructingBuilding",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroup", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ALL or ANY squads in a group are currently constructing a building. \nSet all to true to check for ALL or set to false to check for ANY"
		},
		{
			"name": "SGroup_IsDoingAbility",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroupid", "type": "SGroupID", "optional": false},
				{"name": "ability", "type": "AbilityID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns if ANY or ALL members of an SGroup are doing an ability "
		},
		{
			"name": "SGroup_IsDoingAttack",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false},
				{"name": "time", "type": "Float", "optional": false}
			],
			"description": "Returns true if ALL or ANY squads are attacking within the time. "
		},
		{
			"name": "SGroup_IsDugIn",
			"returnType": "Boolean",
			"parameters": [
				{"name": "group", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ANY or ALL of the squads in the SGroup is dug in (or in the process of digging in) "
		},
		{
			"name": "SGroup_IsEmpty",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false}
			],
			"description": "Returns true if a named squad group is empty "
		},
		{
			"name": "SGroup_IsFemale",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ANY or ALL squads are female "
		},
		{
			"name": "SGroup_IsHoldingAny",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false}
			],
			"description": "Returns whether any entity in an SGroup has a hold on anything "
		},
		{
			"name": "SGroup_IsIdle",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "ALL", "type": "Boolean", "optional": false}
			],
			"description": "Checks if ANY or ALL squads in an SGroup are idle "
		},
		{
			"name": "SGroup_IsInCover",
			"returnType": "Real/Boolean",
			"parameters": [
				{"name": "sgroup[", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns the percentage of the SGroup members that are in cover. Alternatively, specify ANY or ALL as a second parameter to return true/false. "
		},
		{
			"name": "SGroup_IsInfiltrated",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ALL or ANY squads in a group are infiltrated "
		},
		{
			"name": "SGroup_IsInHoldEntity",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "ALL", "type": "Boolean", "optional": false}
			],
			"description": "Checks if ANY or ALL squads in an SGroup are garrisoned in an entity (building)  "
		},
		{
			"name": "SGroup_IsInHoldSquad",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "ALL", "type": "Boolean", "optional": false}
			],
			"description": "Checks if ANY or ALL squads in an SGroup are garrisoned in a squad (transport vehicle)  "
		},
		{
			"name": "SGroup_IsMoving",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ANY or ALL squads in an SGroup are moving. "
		},
		{
			"name": "SGroup_IsOnScreen",
			"returnType": "Bool",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "group", "type": "SGroupID", "optional": false},
				{"name": "all[", "type": "Bool", "optional": false},
				{"name": "percent", "type": "Float", "optional": false}
			],
			"description": "Returns true if ANY or ALL (use those keywords) of the squads in the group are present onscreen. You can pass in a percentage of the screen to check, so 0.8 would be a centered rectangle occupying 80% of the screen. "
		},
		{
			"name": "SGroup_IsPinned",
			"returnType": "Boolean",
			"parameters": [
				{"name": "group", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ANY or ALL of a group is pinned "
		},
		{
			"name": "SGroup_IsReinforcing",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ALL or ANY squads in a group are currently calling for reinforcments. \nSet all to true to check for ALL or set to false to check for ANY"
		},
		{
			"name": "SGroup_IsRetreating",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ANY or ALL of the squads in an SGroup are currently retreating "
		},
		{
			"name": "SGroup_IsSettingDemolitions",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ANY or ALL squads are setting demolitions "
		},
		{
			"name": "SGroup_IsSuppressed",
			"returnType": "Boolean",
			"parameters": [
				{"name": "group", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true is ANY or ALL of a group is suppressed "
		},
		{
			"name": "SGroup_IsUnderAttack",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false},
				{"name": "time", "type": "Float", "optional": false}
			],
			"description": "Returns true if ALL or ANY squads are under attack within the time. "
		},
		{
			"name": "SGroup_IsUnderAttackByPlayer",
			"returnType": "Bool",
			"parameters": [
				{"name": "group", "type": "SGroupID", "optional": false},
				{"name": "attackerplayer", "type": "PlayerID", "optional": false},
				{"name": "duration", "type": "Float", "optional": false}
			],
			"description": "Check if the squads are attacked by the player "
		},
		{
			"name": "SGroup_IsUnderAttackFromDirection",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false},
				{"name": "offset", "type": "Integer", "optional": false},
				{"name": "time", "type": "Float", "optional": false}
			],
			"description": "Returns true if ALL or ANY squads are under attack from a direction within the time. see LuaConsts.scar for types of directions. you can pass in a table of directions "
		},
		{
			"name": "SGroup_IsUpgrading",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "blueprint", "type": "UpgradeBlueprint", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ALL or ANY squads in a group are currently upgrading. You can pass in nil for upgradeid if it doesn't matter what is being upgraded. \nSet all to true to check for ALL or set to false to check for ANY"
		},
		{
			"name": "SGroup_IsUsingAbility",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "ALL", "type": "Boolean", "optional": false}
			],
			"description": "Checks if ANY or ALL squads in an SGroup are using an ability \nDoes not check WHAT ability a squad is using."
		},
		{
			"name": "SGroup_Kill",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false}
			],
			"description": "Kills all squads in an SGroup. This kills them 'naturally', as opposed to SGroup_DestroyAllSquads() which makes them blink out of existance. "
		},
		{
			"name": "SGroup_Remove",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "SGroup*", "optional": false},
				{"name": "squadron", "type": "Squad*", "optional": false}
			],
			"description": "Removes an squadron from a group. "
		},
		{
			"name": "SGroup_RemoveGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID", "optional": false},
				{"name": "grouptoremove", "type": "SGroupID", "optional": false}
			],
			"description": "Remove from the first SGroup all squads contained in the second SGroup. SGroup2 remains untouched. "
		},
		{
			"name": "SGroup_RemoveUpgrade",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "upgrade", "type": "UpgradeBlueprint/Table", "optional": false}
			],
			"description": "Removes upgrade(s) from an sgroup "
		},
		{
			"name": "SGroup_ReSpawn",
			"returnType": "Void",
			"parameters": [
				{"name": "groupid", "type": "SGroupID", "optional": false}
			],
			"description": "Respawn all despawned squads in a group. "
		},
		{
			"name": "SGroup_RestoreCombatPlans",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupID", "type": "SGroupID", "optional": false}
			],
			"description": "Restore all current combat plans for the squads in the sgroup "
		},
		{
			"name": "SGroup_RewardActionPoints",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "actionpoint", "type": "Float", "optional": false}
			],
			"description": "Give action points to the squad "
		},
		{
			"name": "SGroup_SetAnimatorState",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupid", "type": "SGroupID", "optional": false},
				{"name": "stateMachineName", "type": "String", "optional": false},
				{"name": "stateName", "type": "String", "optional": false}
			],
			"description": "Set animation state of a state machine for an SGroup. Please only use this for simple animations "
		},
		{
			"name": "SGroup_SetAutoTargetting",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID", "optional": false},
				{"name": "hardpoint", "type": "String", "optional": false},
				{"name": "enable", "type": "Bool", "optional": false}
			],
			"description": "Sets whether a weapon to auto-target things or not "
		},
		{
			"name": "SGroup_SetAvgHealth",
			"returnType": "Real",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "healthpercent", "type": "Real", "optional": false}
			],
			"description": "Sets the health of each squad in a squad group to a given percent [0.0, 1.0]. "
		},
		{
			"name": "SGroup_SetAvgMorale",
			"returnType": "Real",
			"parameters": [
				{"name": "sgroup", "type": "SGroup", "optional": false},
				{"name": "moralepercent", "type": "Real", "optional": false}
			],
			"description": "Sets the moral of each squad in a squad group to a given percent [0.0, 1.0]. "
		},
		{
			"name": "SGroup_SetCrushable",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "crushable", "type": "Boolean", "optional": false}
			],
			"description": "Overrides crushable behavior for an sgroup "
		},
		{
			"name": "SGroup_SetInvulnerable",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "enabled[", "type": "Boolean/Real", "optional": false},
				{"name": "reset_time", "type": "Float", "optional": false}
			],
			"description": "Enable/Disable invulnerablity for an entire SGroup. Use true and false for simple on/off, or use a number between 0.0 and 1.0 for more precise control on how much damage a squad can take before it takes no more. \nThe optional reset_time is used to automatically remove invulnerability after a set time. If invulnerable, both health and critical damage are disabled."
		},
		{
			"name": "SGroup_SetInvulnerableToCritical",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "enabled", "type": "Boolean/Real", "optional": false}
			],
			"description": "Enable/Disable invulnerablity to criticals for an entire SGroup. "
		},
		{
			"name": "SGroup_SetMoodMode",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID", "optional": false},
				{"name": "mode", "type": "Integer", "optional": false}
			],
			"description": "Set soldier mood mode. Mode could be MM_Auto, MM_ForceCalm or MM_ForceTense "
		},
		{
			"name": "SGroup_SetMoveType",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID", "optional": false},
				{"name": "movetype", "type": "MoveTypeBlueprint", "optional": false}
			],
			"description": "Set the move type for an SGroup - find the move types in the MOVETYPE table in LuaConsts.scar "
		},
		{
			"name": "SGroup_SetPlayerOwner",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "owner", "type": "PlayerID", "optional": false}
			],
			"description": "Changes the player owner of spawned and despawned squads in an SGroup. "
		},
		{
			"name": "SGroup_SetRecrewable",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "recrewable", "type": "Boolean", "optional": false}
			],
			"description": "Sets all squads in as sgroup to be recrewable or not when abandoned "
		},
		{
			"name": "SGroup_SetSelectable",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupid", "type": "SGroup", "optional": false},
				{"name": "selectable", "type": "bool", "optional": false}
			],
			"description": "Set player selectable state of squads in the sgroup "
		},
		{
			"name": "SGroup_SetSharedProductionQueue",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "SGroupID", "optional": false},
				{"name": "enable", "type": "Boolean", "optional": false}
			],
			"description": "Enables shared team production on a building (teammates can build using THEIR resources) "
		},
		{
			"name": "SGroup_SetSuppression",
			"returnType": "Void",
			"parameters": [
				{"name": "groupid", "type": "SGroupID", "optional": false},
				{"name": "suppression", "type": "Float", "optional": false}
			],
			"description": "Set the suppression level for all squads in the sgroup "
		},
		{
			"name": "SGroup_SetTeamWeaponCapturable",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID", "optional": false},
				{"name": "enable", "type": "Boolean", "optional": false}
			],
			"description": "Set team weapon in the squads to be capturable or not "
		},
		{
			"name": "SGroup_SetVeterancyDisplayVisibility",
			"returnType": "Void",
			"parameters": [
				{"name": "groupid", "type": "SGroupID", "optional": false},
				{"name": "visible", "type": "bool", "optional": false}
			],
			"description": "Sets the visibility of in-game veterancy art for the squads in given SGroup "
		},
		{
			"name": "SGroup_SetWorldOwned",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false}
			],
			"description": "Makes an sgroup neutral "
		},
		{
			"name": "SGroup_Single",
			"returnType": "SGroupID",
			"parameters": [
				{"name": "groupID", "type": "SGroupID", "optional": false},
				{"name": "squad", "type": "squadID", "optional": false}
			],
			"description": "Creates a squad group containing a single squad \n Creates an SGroup containing just one squad, creating the group if it doesn't exist and clearing it if it does. It returns the name of the SGroup."
		},
		{
			"name": "SGroup_SnapFaceEachOther",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup1", "type": "SGroupID", "optional": false},
				{"name": "sgroup2", "type": "SGroupID", "optional": false}
			],
			"description": "Makes two SGroups face each other at no time "
		},
		{
			"name": "SGroup_SuggestPosture",
			"returnType": "void",
			"parameters": [
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "posture", "type": "unsigned", "optional": false},
				{"name": "duration", "type": "float", "optional": false}
			],
			"description": "Suggests a posture to an SGroup, lasting the passed duration \nPosture of 0 is prone, 1 is kneel/crouch, and 2 is standing.  Duration is in seconds, negative means indefinate."
		},
		{
			"name": "SGroup_TotalMembersCount",
			"returnType": "Integer",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "dontCountTeamWeapons", "type": "Bool", "optional": false}
			],
			"description": "Returns the total count of all members of all the squads in a given SGroup. "
		},
		{
			"name": "SGroup_WarpToMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "marker", "type": "MarkerID", "optional": false}
			],
			"description": "Warps all members of an SGroup immediately to a marker "
		},
		{
			"name": "SGroup_WarpToPos",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "pos", "type": "Position", "optional": false}
			],
			"description": "Warps all members of an SGroup immediately to a new position "
		},
		{
			"name": "Util_Grab",
			"returnType": "Sgroup/Egroup Group containing selection",
			"parameters": [
				{"name": "subselect", "type": "Boolean", "optional": false}
			],
			"description": "Grabs the selected squads/entities and returns them in a group. Only works with -dev. \nTries to return an SGroup first. If it's empty, it will return an EGroup. (Both types can't be selected at the same time)"
		},
		{
			"name": "SGroup_FacePosition",
			"returnType": "void",
			"parameters": [
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false}
			],
			"description": "Works like Squad_FacePosition.  All Squads will face the same direction, with the squad the closest to the center determining the direction. \nThis function works on spawned squads only."
		},
		{
			"name": "SGroup_SnapFacePosition",
			"returnType": "void",
			"parameters": [
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false}
			],
			"description": "Works like SGroup_FacePosition except with no interpolation.  All Squads will face the same direction, with the squad the closest to the center determining the direction. \nThis function works on spawned squads only."
		},
		{
			"name": "Squad_AddAbility",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "ability", "type": "ScarAbilityPBG", "optional": false}
			],
			"description": "Allows the squad to use this ability "
		},
		{
			"name": "Squad_AddSlotItemToDropOnDeath",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "pbg", "type": "ScarSlotItemPBG", "optional": false},
				{"name": "dropChance", "type": "float", "optional": false},
				{"name": "exclusive", "type": "bool", "optional": false}
			],
			"description": "Add to the list of slot items to drop when this squad is wiped out \nSquad_AddSlotItemToDropOnDeath( squadid, item, false )"
		},
		{
			"name": "Squad_CanCaptureStrategicPoint",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns true if squad can capture stategic point "
		},
		{
			"name": "Squad_CanCaptureTeamWeapon",
			"returnType": "bool",
			"parameters": [
				{"name": "pSquad", "type": "Squad*", "optional": false},
				{"name": "pEntity", "type": "Entity*", "optional": false}
			],
			"description": "True if the squad can capture the entity sync weapon "
		},
		{
			"name": "Squad_CanCastAbilityOnEGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "caster", "type": "SquadID", "optional": false},
				{"name": "ability", "type": "AbilityBlueprint", "optional": false},
				{"name": "target_egroup", "type": "EGroup", "optional": false}
			],
			"description": "Test whether a squad can be ordered to do this ability on any member of the target EGroup "
		},
		{
			"name": "Squad_CanCastAbilityOnEntity",
			"returnType": "bool",
			"parameters": [
				{"name": "castingSquad", "type": "Squad*", "optional": false},
				{"name": "abilityPBG", "type": "ScarAbilityPBG", "optional": false},
				{"name": "targetEntity", "type": "Entity*", "optional": false}
			],
			"description": "Test whether a squad can be ordered to do this ability on the target squad "
		},
		{
			"name": "Squad_CanCastAbilityOnPosition",
			"returnType": "bool",
			"parameters": [
				{"name": "castingSquad", "type": "Squad*", "optional": false},
				{"name": "abilityPBG", "type": "ScarAbilityPBG", "optional": false},
				{"name": "targetPos", "type": "ScarPosition", "optional": false}
			],
			"description": "Test whether a squad can be ordered to do this ability on the target squad "
		},
		{
			"name": "Squad_CanCastAbilityOnSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "caster", "type": "SquadID", "optional": false},
				{"name": "ability", "type": "AbilityBlueprint", "optional": false},
				{"name": "target_sgroup", "type": "SGroup", "optional": false}
			],
			"description": "Test whether a squad can be ordered to do this ability on any member of the target SGroup "
		},
		{
			"name": "Squad_CanCastAbilityOnSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "castingSquad", "type": "Squad*", "optional": false},
				{"name": "abilityPBG", "type": "ScarAbilityPBG", "optional": false},
				{"name": "targetSquad", "type": "Squad*", "optional": false}
			],
			"description": "Test whether a squad can be ordered to do this ability on the target squad "
		},
		{
			"name": "Squad_CancelProductionQueueItem",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "index", "type": "uint32_t", "optional": false}
			],
			"description": "Cancels an item in a production queue.  Index 0 is the currently producing item. "
		},
		{
			"name": "Squad_CanHold",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Checks whether a squad can hold any squad "
		},
		{
			"name": "Squad_CanInstantReinforceNow",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns true if the squad is available to be reinforced "
		},
		{
			"name": "Squad_CanLoadSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "loadthis", "type": "Squad*", "optional": false},
				{"name": "bCheckSquadState", "type": "bool", "optional": false},
				{"name": "bOverload", "type": "bool", "optional": false}
			],
			"description": "Checks whether a squad can load another squad "
		},
		{
			"name": "Squad_CanPickupSlotItem",
			"returnType": "bool",
			"parameters": [
				{"name": "pSquad", "type": "Squad*", "optional": false},
				{"name": "pEntity", "type": "Entity*", "optional": false}
			],
			"description": "True if the squad can pickup the entity slot item "
		},
		{
			"name": "Squad_CanRecrew",
			"returnType": "bool",
			"parameters": [
				{"name": "pSquad", "type": "Squad*", "optional": false},
				{"name": "pEntity", "type": "Entity*", "optional": false}
			],
			"description": "True if the squad can recrew the entity "
		},
		{
			"name": "Squad_CanSeeEntity",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns true if the distance between a target entity and the source squad is less than it squad's sight distance.  There is no LOS or FOW check. \nTry Player_CanSeeEntity() if you care about LOS or FOW."
		},
		{
			"name": "Squad_CanSeeSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "target", "type": "Squad*", "optional": false}
			],
			"description": "Returns true if the distance between a target squad and the source squad is less than it squad's sight distance.  There is no LOS or FOW check. \nTry Player_CanSeeSquad() if you care about LOS or FOW."
		},
		{
			"name": "Squad_ClearPostureSuggestion",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Clears any previous posture suggestions made to a squad "
		},
		{
			"name": "Squad_CompleteUpgrade",
			"returnType": "void",
			"parameters": [
				{"name": "pSquad", "type": "Squad*", "optional": false},
				{"name": "upgradePBG", "type": "ScarUpgradePBG", "optional": false}
			],
			"description": "Instantly adds an upgrade to a given squad "
		},
		{
			"name": "Squad_Count",
			"returnType": "int",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns the number of units currently in a squad (spawned AND despawned!!) "
		},
		{
			"name": "Squad_CreateAndSpawnToward",
			"returnType": "Squad*",
			"parameters": [
				{"name": "sbp", "type": "ScarSquadPBG", "optional": false},
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "loadoutCount", "type": "size_t", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "toward", "type": "ScarPosition", "optional": false}
			],
			"description": "Create a squad, spawn it and assign it to a player.  \n This will create a squad of size 'loadoutCount' and of unit type 'unit_base' (from squad blueprint)&lt;BR/&gt; Note: loadoutCount will be clipped to loadoutMin and loadoutMax from the squad blueprint. A loudoutCount  of zero means create the whole squad as is."
		},
		{
			"name": "Squad_DeSpawn",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Despawn the entire squad at its current position. "
		},
		{
			"name": "Squad_Destroy",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Remove an squad from the world and destroy it. "
		},
		{
			"name": "Squad_EnableProductionQueue",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Sets whether a squad can produce anything (including upgrades) "
		},
		{
			"name": "Squad_EnableSurprise",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enables or disables the surprise feature on thie given squad "
		},
		{
			"name": "Squad_EntityAt",
			"returnType": "Entity*",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "index", "type": "uint32_t", "optional": false}
			],
			"description": "ZERO-BASED get of entities out of squads "
		},
		{
			"name": "Squad_FacePosition",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false}
			],
			"description": "Set the rotation of all troopers in a squad to face the position. \nThe center of the squad will face the position and all other troops will use the same rotation as the from center vector.&lt;BR/&gt;&lt;BR/&gt; This function works on spawned squads only."
		},
		{
			"name": "Squad_FaceSquad",
			"returnType": "void",
			"parameters": [
				{"name": "squad1", "type": "Squad*", "optional": false},
				{"name": "squad2", "type": "Squad*", "optional": false}
			],
			"description": "Get 2 squads to face each other. This function works on spawned squads only. "
		},
		{
			"name": "Squad_FindCover",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "coverSearchRadius", "type": "float", "optional": false}
			],
			"description": "Tries to find cover within a certain radius of a position. If no cover is found, it returns the position used for the search. "
		},
		{
			"name": "Squad_FindCoverCompareCurrent",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "coverSearchRadius", "type": "float", "optional": false},
				{"name": "maxPathDistanceFromGoal", "type": "float", "optional": false},
				{"name": "compareToCurrentCover", "type": "bool", "optional": false}
			],
			"description": "Tries to find cover within a certain radius of a position, traveling a max distance to get there, and possibly comparing against current position's cover. If no cover is found, it returns the position used for the search. "
		},
		{
			"name": "Squad_FromWorldID",
			"returnType": "Squad*",
			"parameters": [
				{"name": "id", "type": "uint32_t", "optional": false}
			],
			"description": "Get a squad from a mission editor ID. "
		},
		{
			"name": "Squad_GetActiveCommand",
			"returnType": "<a href=\"enum_list.htm#SquadStateID\">SquadStateID</a>",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns the active squad command. "
		},
		{
			"name": "Squad_GetAttackPlan",
			"returnType": "const char*",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Get name of current Squad AI attack plan "
		},
		{
			"name": "Squad_GetAttackTargets",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "group", "type": "SGroup*", "optional": false}
			],
			"description": "Find the squad member current or forced targets. If found, the targets squads are added to the sgroup. Entity targets like buildings are ignored "
		},
		{
			"name": "Squad_GetBlueprint",
			"returnType": "ScarSquadPBG",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns the name of the squad blueprint (from the attribute editor) "
		},
		{
			"name": "Squad_GetDestination",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns the squad's destination, if it's moving. IMPORTANT: you must only call this function if Squad_HasDestination has returned true. "
		},
		{
			"name": "Squad_GetGameID",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns an integer containing the unqiue squad ID for this squad. "
		},
		{
			"name": "Squad_GetHeading",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns the average heading of the spawned units in the squad. The heading is currently a lua table with three entries (x, y, z) "
		},
		{
			"name": "Squad_GetHealth",
			"returnType": "float",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns the current health of a squad. \nThe current health of the squad is the total health of each entity in that squad."
		},
		{
			"name": "Squad_GetHealthMax",
			"returnType": "float",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns the max health of the squad. \n The max health of a squad is the max health of each entity in that squad.  This means that the max health of a squad may change when entities are added or removed from the squad.&lt;BR/&gt;&lt;BR/&gt;"
		},
		{
			"name": "Squad_GetHealthPercentage",
			"returnType": "float",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns how much of an original squad's health is left, accounting for deaths (ex: a squad of 3 riflemen would be at 50% health, since they started with 6 members) Note: This is the same percentage that the UI uses. "
		},
		{
			"name": "Squad_GetHoldEntity",
			"returnType": "Entity*",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Get which building (entity) is the squad garrisoned \nPlease use Squad_IsInHold() to check first"
		},
		{
			"name": "Squad_GetHoldSquad",
			"returnType": "Squad*",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Get which vehicle (squad) is the squad garrisoned \nPlease use Squad_IsInHold() to check first"
		},
		{
			"name": "Squad_GetInvulnerable",
			"returnType": "Bool",
			"parameters": [
				{"name": "squad", "type": "SquadID", "optional": false}
			],
			"description": "Check if the squad is invulnerable or not "
		},
		{
			"name": "Squad_GetInvulnerableEntityCount",
			"returnType": "int",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns the number of invulnerable member "
		},
		{
			"name": "Squad_GetInvulnerableMinCap",
			"returnType": "float",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns the highest invulnerable min cap percentage from members of the squad. "
		},
		{
			"name": "Squad_GetLastAttacker",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "group", "type": "SGroup*", "optional": false}
			],
			"description": "Find the last squad attacker on this squad. If found, the squad is added to the sgroup "
		},
		{
			"name": "Squad_GetLastAttackers",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "group", "type": "SGroup*", "optional": false},
				{"name": "timeSeconds", "type": "float", "optional": false}
			],
			"description": "Find the squad attackers on this squad from the last seconds specified. If found, the squads are added to the sgroup. Building attackers are ignored "
		},
		{
			"name": "Squad_GetLastEntityAttacker",
			"returnType": "void",
			"parameters": [
				{"name": "pSquad", "type": "Squad*", "optional": false},
				{"name": "pEGroup", "type": "EGroup*", "optional": false}
			],
			"description": "Find the last entity attacker on this squad. If found, the entity added to egroup "
		},
		{
			"name": "Squad_GetMax",
			"returnType": "int",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns the max number of units allowed in the squad "
		},
		{
			"name": "Squad_GetNumSlotItem",
			"returnType": "size_t",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "pbg", "type": "ScarSlotItemPBG", "optional": false}
			],
			"description": "Get the number of slot items with the same ID that the squad has \nSquad_GetNumSlotItem( squadid, item )"
		},
		{
			"name": "Squad_GetOffsetPosition",
			"returnType": "Position",
			"parameters": [
				{"name": "squad", "type": "SquadID", "optional": false},
				{"name": "offset", "type": "Integer", "optional": false},
				{"name": "distance", "type": "Real", "optional": false}
			],
			"description": "Returns a position relative to a squad's current position and orientation. see LuaConsts.scar for explanation of 'offset' parameter. "
		},
		{
			"name": "Squad_GetPinnedPlan",
			"returnType": "const char*",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Get name of current Squad AI reaction plan "
		},
		{
			"name": "Squad_GetPlayerOwner",
			"returnType": "Player*",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns the Player owner of the given squad. Squad MUST NOT be owned by the world. "
		},
		{
			"name": "Squad_GetPosition",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns the average position of the spawned units in the squad. The position is currently a lua table with three entries (x, y, z) "
		},
		{
			"name": "Squad_GetPositionDeSpawned",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns the average position of the despawned AND spawned units in the squad. "
		},
		{
			"name": "Squad_GetProductionQueueItem",
			"returnType": "const PropertyBagGroup*",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "index", "type": "size_t", "optional": false}
			],
			"description": "Returns the blueprint for a production queue item with index. "
		},
		{
			"name": "Squad_GetProductionQueueItemType",
			"returnType": "int",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "index", "type": "size_t", "optional": false}
			],
			"description": "Returns the production type (PITEM_Upgrade, PITEM_Spawn, PITEM_SquadUpgrade, PITEM_SquadReinforce, PITEM_PlayerUpgrade) for a production queue item with index. "
		},
		{
			"name": "Squad_GetProductionQueueSize",
			"returnType": "size_t",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns the number of items in the squad's production queue. \nIt is an error to call this function on a squad that does not have a production queue.&lt;BR/&gt; Use Squad_HasProductionQueue to check that the squad has a queue."
		},
		{
			"name": "Squad_GetReactionPlan",
			"returnType": "const char*",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Get name of current Squad AI reaction plan "
		},
		{
			"name": "Squad_GetRetaliationPlan",
			"returnType": "const char*",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Get name of current Squad AI retaliation plan "
		},
		{
			"name": "Squad_GetSlotItemAt",
			"returnType": "size_t",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "index", "type": "size_t", "optional": false}
			],
			"description": "Returns the ID of the slot item. Use Squad_GetSlotItemCount to determine how many slot items the squad has. The first index is 1 "
		},
		{
			"name": "Squad_GetSlotItemCount",
			"returnType": "size_t",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns how many slot items this squad has "
		},
		{
			"name": "Squad_GetSlotItemsTable",
			"returnType": "LuaTable",
			"parameters": [
				{"name": "squadid", "type": "SquadID", "optional": false}
			],
			"description": "Returns a table of SlotItem ID's that this squad currently owns "
		},
		{
			"name": "Squad_GetSquadsHeld",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false}
			],
			"description": "Adds all squads held by 'squad' to an sgroup "
		},
		{
			"name": "Squad_GetSuppression",
			"returnType": "float",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Check current squad suppresion level. Return value from 0 to 1 "
		},
		{
			"name": "Squad_GetVeterancyExperience",
			"returnType": "float",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Get current squad veterancy experience "
		},
		{
			"name": "Squad_GetVeterancyRank",
			"returnType": "size_t",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Get current squad veterancy rank. "
		},
		{
			"name": "Squad_GiveSlotItem",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "pbg", "type": "ScarSlotItemPBG", "optional": false}
			],
			"description": "Gives a slot item to the squad. Can fail due to not enough slots left "
		},
		{
			"name": "Squad_GiveSlotItemsFromTable",
			"returnType": "Void",
			"parameters": [
				{"name": "squadid", "type": "SquadID", "optional": false},
				{"name": "itemTable", "type": "LuaTable", "optional": false}
			],
			"description": "Gives all slot items in a table to the squad. The table should come from Squad_GetSlotItemsTable "
		},
		{
			"name": "Squad_HasActiveCommand",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns true if there's an active command currently for the squad "
		},
		{
			"name": "Squad_HasAnyCritical",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Return true if any entity in the squad has any critical applied to it "
		},
		{
			"name": "Squad_HasCritical",
			"returnType": "Bool",
			"parameters": [
				{"name": "squad", "type": "SquadID", "optional": false},
				{"name": "critical", "type": "CriticalID", "optional": false}
			],
			"description": "Check if a squad has a critical or not "
		},
		{
			"name": "Squad_HasDestination",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns whether this squad is moving and has a destination "
		},
		{
			"name": "Squad_HasProductionQueue",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns true if a squad has a production queue. "
		},
		{
			"name": "Squad_HasSlotItem",
			"returnType": "Bool",
			"parameters": [
				{"name": "squad", "type": "SquadID", "optional": false},
				{"name": "slotItem", "type": "SlotItemID", "optional": false}
			],
			"description": "Check if a squad has a specific slot item "
		},
		{
			"name": "Squad_HasTeamWeapon",
			"returnType": "Boolean",
			"parameters": [
				{"name": "squad", "type": "SquadID", "optional": false}
			],
			"description": "Returns true if the squad is carrying some kind of team weapon "
		},
		{
			"name": "Squad_HasUpgrade",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "pbg", "type": "ScarUpgradePBG", "optional": false}
			],
			"description": "Return true if the squad has purchased the specified upgrade. "
		},
		{
			"name": "Squad_IncreaseVeterancyExperience",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "experience", "type": "float", "optional": false},
				{"name": "silent", "type": "bool", "optional": false},
				{"name": "applyModifiers", "type": "bool", "optional": false}
			],
			"description": "Increase current squad veterancy experience "
		},
		{
			"name": "Squad_IncreaseVeterancyRank",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "numranks", "type": "int", "optional": false},
				{"name": "silent", "type": "bool", "optional": false}
			],
			"description": "Increase current squad veterancy rank "
		},
		{
			"name": "Squad_InstantSetupTeamWeapon",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Stops current squads activity and instant setup the team weapon if they have one "
		},
		{
			"name": "Squad_IsAttacking",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "time", "type": "float", "optional": false}
			],
			"description": "Returns true if any unit in the squad is attacking within the time \nTime is in seconds"
		},
		{
			"name": "Squad_IsCamouflaged",
			"returnType": "Boolean",
			"parameters": [
				{"name": "squad", "type": "SquadID", "optional": false}
			],
			"description": "Returns whether ANY entity in the squad is camouflaged "
		},
		{
			"name": "Squad_IsDoingAbility",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "pbg", "type": "ScarAbilityPBG", "optional": false}
			],
			"description": "True if squad is currently performing the given ability "
		},
		{
			"name": "Squad_IsFemale",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns whether the passed in squad is female "
		},
		{
			"name": "Squad_IsHoldingAny",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Check if the squad has a hold on anything (use this on vehicles) "
		},
		{
			"name": "Squad_IsInCover",
			"returnType": "Boolean",
			"parameters": [
				{"name": "squadId", "type": "SquadID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ALL or ANY troopers in a squad are in cover. \nSet all to true to check if all troopers are in cover or set to false to check if any."
		},
		{
			"name": "Squad_IsInHoldEntity",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Check if the squad is garrisoned in entity (building) "
		},
		{
			"name": "Squad_IsInHoldSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Check if the squad is loaded in squad (vehicle "
		},
		{
			"name": "Squad_IsMoving",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns whether any entity in the squad is moving "
		},
		{
			"name": "Squad_IsPinned",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "True if squad is currently pinned "
		},
		{
			"name": "Squad_IsReinforcing",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns true if the squad is currently reinforcing.  This function will return false if the squad does not have a reinforce ext. "
		},
		{
			"name": "Squad_IsRetreating",
			"returnType": "Boolean",
			"parameters": [
				{"name": "squadid", "type": "SquadID", "optional": false}
			],
			"description": "Returns true if the squad is currently retreating "
		},
		{
			"name": "Squad_IsSuppressed",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "True if squad is currently suppressed "
		},
		{
			"name": "Squad_IsUnderAttack",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "time", "type": "float", "optional": false}
			],
			"description": "Returns true if any unit in the squad is under attack within the time \nTime is in seconds"
		},
		{
			"name": "Squad_IsUnderAttackByPlayer",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "pAttackerOwner", "type": "Player*", "optional": false},
				{"name": "time", "type": "float", "optional": false}
			],
			"description": "Returns true if squad is under attack by enemy from a particular player \nTime is in seconds"
		},
		{
			"name": "Squad_IsUnderAttackFromDirection",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "offset", "type": "int", "optional": false},
				{"name": "timeSeconds", "type": "float", "optional": false}
			],
			"description": "Returns true if the squad was under attack from a certain direction (8 offset types, see LuaConsts.scar) "
		},
		{
			"name": "Squad_IsUpgrading",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "upgrade", "type": "ScarUpgradePBG", "optional": false}
			],
			"description": "Returns true if the squad is currently upgrading something specific. "
		},
		{
			"name": "Squad_IsUpgradingAny",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns true if the squad is currently upgrading anything. "
		},
		{
			"name": "Squad_IsValid",
			"returnType": "bool",
			"parameters": [
				{"name": "id", "type": "uint32_t", "optional": false}
			],
			"description": "Check if a squad with the given ID can be found in the world "
		},
		{
			"name": "Squad_Kill",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Kill whole squad.  Sets health to 0, and triggers death effects. "
		},
		{
			"name": "Squad_RemoveAbility",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "ability", "type": "ScarAbilityPBG", "optional": false}
			],
			"description": "Removes an ability that was previously added by Squad_AddAbility. You cannot remove static abilities (from AE: squad_ability_ext) "
		},
		{
			"name": "Squad_RemoveUpgrade",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "upgrade", "type": "ScarUpgradePBG", "optional": false}
			],
			"description": "Removes an upgrade from a squad "
		},
		{
			"name": "Squad_RewardActionPoints",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "actionPoint", "type": "float", "optional": false}
			],
			"description": "Give squad action points "
		},
		{
			"name": "Squad_SetAnimatorState",
			"returnType": "Void",
			"parameters": [
				{"name": "squadid", "type": "SquadID", "optional": false},
				{"name": "stateMachineName", "type": "String", "optional": false},
				{"name": "stateName", "type": "String", "optional": false}
			],
			"description": "Set animation state of a state machine for a squad Please only use this for simple animations "
		},
		{
			"name": "Squad_SetAttackPlan",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "planName", "type": "const char*", "optional": false}
			],
			"description": "Set overriding Squad AI attack plan  "
		},
		{
			"name": "Squad_SetHealth",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "healthPercent", "type": "float", "optional": false}
			],
			"description": "Set the health of all units in a squad.  Health must be in range [0.0, 1.0] "
		},
		{
			"name": "Squad_SetInvulnerable",
			"returnType": "Void",
			"parameters": [
				{"name": "squad", "type": "SquadID", "optional": false},
				{"name": "enable", "type": "Bool", "optional": false},
				{"name": "reset_time", "type": "Float", "optional": false}
			],
			"description": "Set invulnerability on the squad. Reset time is in seconds. If it it set, the invulnerability will expire after this time. "
		},
		{
			"name": "Squad_SetInvulnerableEntityCount",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "invEntityCount", "type": "int", "optional": false},
				{"name": "resetTime", "type": "float", "optional": false}
			],
			"description": "Make a squad invulnerable to physical damage when number of members drop to or below specified count. \nresetTime is the time in seconds that vulnerability will be restored.; zero time for reset time means the buff will last forever"
		},
		{
			"name": "Squad_SetInvulnerableMinCap",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "minHealthPercentage", "type": "float", "optional": false},
				{"name": "resetTime", "type": "float", "optional": false}
			],
			"description": "Make a squad invulnerable to physical damage. \nresetTime is the time in seconds that vulnerability will be restored.; zero time for reset time means the buff will last forever"
		},
		{
			"name": "Squad_SetInvulnerableToCritical",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "invulnerable", "type": "bool", "optional": false}
			],
			"description": "set invulnerability to critical effect for all entities in the entire squad. Invulnerable to critical also means that kills a entity will not have effect "
		},
		{
			"name": "Squad_SetMoodMode",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "mood", "type": "SquadCombatBehaviourExt::MoodMode", "optional": false}
			],
			"description": "Set soldier mood mode. "
		},
		{
			"name": "Squad_SetMoveType",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "movetypePBG", "type": "ScarMoveTypePBG", "optional": false}
			],
			"description": "Sets the squad's move type "
		},
		{
			"name": "Squad_SetPinnedPlan",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "planName", "type": "const char*", "optional": false}
			],
			"description": "Set overriding Squad AI pinned plan "
		},
		{
			"name": "Squad_SetPlayerOwner",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "owner", "type": "Player*", "optional": false}
			],
			"description": "Changes the owner of the given squad. "
		},
		{
			"name": "Squad_SetPosition",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "toward", "type": "ScarPosition", "optional": false}
			],
			"description": "Moves the squad to an arbitrary new position "
		},
		{
			"name": "Squad_SetReactionPlan",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "planName", "type": "const char*", "optional": false}
			],
			"description": "Set overriding Squad AI reaction plan "
		},
		{
			"name": "Squad_SetRecrewable",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "capturable", "type": "bool", "optional": false}
			],
			"description": "Set entity inside the squad to be recrewable or not when it becomes abandoned "
		},
		{
			"name": "Squad_SetRetaliationPlan",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "planName", "type": "const char*", "optional": false}
			],
			"description": "Set overriding Squad AI idle retaliation plan "
		},
		{
			"name": "Squad_SetSharedProductionQueue",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "shared", "type": "bool", "optional": false}
			],
			"description": "Enables shared team production on a building (teammates can build using THEIR resources) "
		},
		{
			"name": "Squad_SetSuppression",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "percentage", "type": "float", "optional": false}
			],
			"description": "Set current squad suppresion level. Suppression value value from 0 to 1 "
		},
		{
			"name": "Squad_SetVeterancyDisplayVisibility",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "visible", "type": "bool", "optional": false}
			],
			"description": "Turn on/off display of the unit portrait veterancy stars "
		},
		{
			"name": "Squad_SetWorldOwned",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Makes a squad neutral "
		},
		{
			"name": "Squad_Spawn",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false}
			],
			"description": "Spawn the entire squad at a given position "
		},
		{
			"name": "Squad_SpawnToward",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "toward", "type": "ScarPosition", "optional": false}
			],
			"description": "Spawn the entire squad at a given position "
		},
		{
			"name": "Squad_Split",
			"returnType": "Squad*",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "num", "type": "unsigned int", "optional": false}
			],
			"description": "Split the squad into 2. The new squad size is specified by the number passed in \nThe new squad size is specified by the number passed in."
		},
		{
			"name": "Squad_StopAbility",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "ability", "type": "ScarAbilityPBG", "optional": false},
				{"name": "bEarlyExit", "type": "bool", "optional": false}
			],
			"description": "Abruptly stops an active ability "
		},
		{
			"name": "Squad_SuggestPosture",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "posture", "type": "unsigned", "optional": false},
				{"name": "duration", "type": "float", "optional": false}
			],
			"description": "Suggests a posture to a squad, lasting the passed duration \nPosture of 0 is prone, 1 is kneel/crouch, and 2 is standing.  Duration is in seconds, negative means indefinate."
		},
		{
			"name": "Squad_WarpToPos",
			"returnType": "Void",
			"parameters": [
				{"name": "squad", "type": "SquadID", "optional": false},
				{"name": "pos", "type": "Position", "optional": false}
			],
			"description": "Warps a squad immediately to a new position "
		},
		{
			"name": "Stats_BuildingsLost",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns how many buildings a player has lost "
		},
		{
			"name": "Stats_InfantryLost",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns how many infantry a player has lost "
		},
		{
			"name": "Stats_KillsTotal",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns a player's total kills "
		},
		{
			"name": "Stats_PlayerAt",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "index", "type": "size_t", "optional": false}
			],
			"description": "Returns player id at given index "
		},
		{
			"name": "Stats_PlayerCount",
			"returnType": "size_t",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns how many players in the game "
		},
		{
			"name": "Stats_ResGathered",
			"returnType": "ResourceAmount",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns how many resources a player has gathered "
		},
		{
			"name": "Stats_ResSpent",
			"returnType": "ResourceAmount",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns how many resources a player has spent "
		},
		{
			"name": "Stats_SoldiersKilled",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns how many soldiers a player has killed "
		},
		{
			"name": "Stats_StructuresKilled",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns how many structures a player has killed "
		},
		{
			"name": "Stats_TeamTally",
			"returnType": "Integer",
			"parameters": [
				{"name": "teamindex", "type": "Integer", "optional": false},
				{"name": "statfunction", "type": "Function", "optional": false}
			],
			"description": "Takes a statistic function and totals up the results for all the players on a given team "
		},
		{
			"name": "Stats_TotalDuration",
			"returnType": "int",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns game time, in seconds "
		},
		{
			"name": "Stats_TotalSquadsLost",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns how many squads a playe has lost "
		},
		{
			"name": "Stats_UnitSoldierKills",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false},
				{"name": "sbp", "type": "ScarSquadPBG", "optional": false}
			],
			"description": "Returns how many soldiers an SBP have killed. ex: how many soldiers did player2's riflemen kill? "
		},
		{
			"name": "Stats_UnitStructureKills",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false},
				{"name": "sbp", "type": "ScarSquadPBG", "optional": false}
			],
			"description": "Returns how many structures an SBP have killed. ex: how many structures did player2's riflemen kill? "
		},
		{
			"name": "Stats_UnitTotalKills",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false},
				{"name": "sbp", "type": "ScarSquadPBG", "optional": false}
			],
			"description": "Returns how many entities an SBP have killed. ex: how many entities did player2's riflemen kill? "
		},
		{
			"name": "Stats_UnitVehicleKills",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false},
				{"name": "sbp", "type": "ScarSquadPBG", "optional": false}
			],
			"description": "Returns how many vehicles an SBP have killed. ex: how many vehicles did player2's riflemen kill? "
		},
		{
			"name": "Stats_VehiclesKilled",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns how many vehicles a playe has killed "
		},
		{
			"name": "Stats_VehiclesLost",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false}
			],
			"description": "Returns how many vehicles a player has lost "
		},
		{
			"name": "Stinger_AddEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "marker", "type": "MarkerID", "optional": false},
				{"name": "eventname", "type": "EVENT", "optional": false}
			],
			"description": "Add a stinger to trigger at a specific location \nYou must remember to set Stinger_Manager going as a rule with a regular interval"
		},
		{
			"name": "Stinger_AddFunction",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "marker", "type": "MarkerID", "optional": false},
				{"name": "functionname", "type": "LuaFunction", "optional": false}
			],
			"description": "Add a stinger to trigger at a specific location \nYou must remember to set Stinger_Manager going as a rule with a regular interval"
		},
		{
			"name": "Stinger_Remove",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "marker", "type": "MarkerID", "optional": false}
			],
			"description": "Remove all stingers triggered from a specific location "
		},
		{
			"name": "Team_AddResource",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "resourceType", "type": "Integer", "optional": false},
				{"name": "value", "type": "Real", "optional": false}
			],
			"description": "Add resource to each member of a team, as opposed to just setting it. Possible resource types are RT_Manpower, RT_Munition, RT_Fuel, RT_Action  "
		},
		{
			"name": "Team_AddSquadsToSGroup",
			"returnType": "SGroupID",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "squadgroupName", "type": "String", "optional": false}
			],
			"description": "For the given team, get all of the squads gathered into a squadgroup of your naming.   \nThis will add all squads for the entire team to one group.  To do so for each player, iterate the team table"
		},
		{
			"name": "Team_AreSquadsNearMarker",
			"returnType": "Boolean",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "marker", "type": "MarkerID", "optional": false}
			],
			"description": "Returns true if ANY of a teams squads are in proximity of a marker "
		},
		{
			"name": "Team_CanSee",
			"returnType": "Boolean",
			"parameters": [
				{"name": "teamid", "type": "TeamID", "optional": false},
				{"name": "item", "type": "EGroupID/SGroupID/EntityID/SquadId/PositionID/MarkerID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if a team can see ALL or ANY items "
		},
		{
			"name": "Team_ClearArea",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "marker", "type": "MarkerID", "optional": false},
				{"name": "invulnerable", "type": "Bool", "optional": false}
			],
			"description": "Any of the team's units in the marker area move out of the area, and can be made invulnerable for a bit whilst they do it \nYou can replace the marker with a position and a range - i.e. Team_ClearArea(team, pos, range, invulnerable)"
		},
		{
			"name": "Team_DefineAllies",
			"returnType": "playerID, playerID, playerID, playerID",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns 4 playerIDs (player1, player2, player3, player4) for Humans/Allies "
		},
		{
			"name": "Team_DefineEnemies",
			"returnType": "playerID, playerID, playerID, playerID",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns 4 playerIDs (player5, player6, player7, player8) for Enemy Players "
		},
		{
			"name": "Team_FindByRace",
			"returnType": "TeamID",
			"parameters": [
				{"name": "race[", "type": "String", "optional": false},
				{"name": "race2", "type": "String", "optional": false}
			],
			"description": "Returns the TeamID for a given race. See LuaConsts for constants to use. \nYou can pass in multiple races."
		},
		{
			"name": "Team_ForEachAllOrAny",
			"returnType": "Boolean",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false},
				{"name": "function", "type": "LuaFunction", "optional": false}
			],
			"description": "Tests a condition on teams. Calls your function for each player. Parameters of your function: (TeamID, player index, PlayerID). Your function must return true or false to indicate whether the player meets the condition. "
		},
		{
			"name": "Team_GetAll",
			"returnType": "Void",
			"parameters": [
				{"name": "team[", "type": "TeamID", "optional": false},
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "egroup", "type": "EGroupID", "optional": false}
			],
			"description": "Creates/Clears groups that contain all of a team's units and buildings. Defaults - sg_allsquads and eg_allentities \nFills an SGroup with all of the given team's squads, and an EGroup with all the team's entities. If you don't provide and groups, then it defaults to using sg_allsquads and eg_allentities."
		},
		{
			"name": "Team_GetAllEntitiesNearMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "position[", "type": "MarkerID/Pos/SectorID", "optional": false},
				{"name": "range", "type": "Real", "optional": false}
			],
			"description": "Gather together all of a teams's entities that are in proximity to a marker, a position, or within a territory sector into an EGroup. The EGroup is cleared beforehand.  \nYou can override a marker's normal proximity by specifying a range."
		},
		{
			"name": "Team_GetAllSquadsNearMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "position[", "type": "MarkerID/Pos/SectorID", "optional": false},
				{"name": "range", "type": "Real", "optional": false}
			],
			"description": "Gather together all of a teams's squads that are in proximity to a marker, a position, or within a territory sector into an SGroup. The SGroup is cleared beforehand.  \nYou can override a marker's normal proximity by specifying a range."
		},
		{
			"name": "Team_GetBuildingID",
			"returnType": "EntityID/Table",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "entitytypes[", "type": "BlueprintTable", "optional": false},
				{"name": "bool", "type": "ANY", "optional": false}
			],
			"description": "Returns the entityID of the first team owned building listed in the table. \nThis only looks at completed buildings"
		},
		{
			"name": "Team_GetBuildingsCount",
			"returnType": "Integer",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false}
			],
			"description": "Returns the total number of buildings owned by this team. "
		},
		{
			"name": "Team_GetBuildingsCountExcept",
			"returnType": "Integer",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "exceptions", "type": "BlueprintTable", "optional": false}
			],
			"description": "Returns the total number of buildings owned by this team (with exclusions). "
		},
		{
			"name": "Team_GetBuildingsCountOnly",
			"returnType": "Integer",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "ebplist", "type": "BlueprintTable", "optional": false}
			],
			"description": "Returns the number of buildings owned by this team (inclusive). "
		},
		{
			"name": "Team_GetEnemyTeam",
			"returnType": "TeamID",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false}
			],
			"description": "Returns a team's enemy "
		},
		{
			"name": "Team_GetEntitiesFromType",
			"returnType": "EGroup",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "unitType", "type": "String", "optional": false}
			],
			"description": "Returns an EGroup containing all of the teams entities of a specific unit_type (as defined by the type_ext on the entity) \nThis function returns a new EGroup to allow tracking of different types. "
		},
		{
			"name": "Team_HasBuilding",
			"returnType": "boolean",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "entitytypes[", "type": "BlueprintTable", "optional": false},
				{"name": "bool", "type": "ANY", "optional": false}
			],
			"description": "Returns true if this team owns any buildings listed in the table. \nUse ALL to check if all players on the team have this building"
		},
		{
			"name": "Team_HasBuildingsExcept",
			"returnType": "boolean",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "exceptions[", "type": "BlueprintTable", "optional": false},
				{"name": "bool", "type": "ANY", "optional": false}
			],
			"description": "Returns true if this team owns any buildings. (with exclusions). \nUse ALL to check if all players on the team have buildings EXCEPT this one"
		},
		{
			"name": "Team_HasBuildingUnderConstruction",
			"returnType": "boolean",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "entitytypes[", "type": "BlueprintTable", "optional": false},
				{"name": "bool", "type": "ANY", "optional": false}
			],
			"description": "Returns true if this team owns any buildings listed in the table currently under construction. \nUse ALL to check if all players on the team have this building under construction"
		},
		{
			"name": "Team_IsAlive",
			"returnType": "Boolean",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns whether a team is still alive or not (all member players must be 'alive') "
		},
		{
			"name": "Team_OwnsEGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "egroup[", "type": "EGroupID", "optional": false},
				{"name": "any", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if a given team owns ALL or ANY items in a group "
		},
		{
			"name": "Team_OwnsEntity",
			"returnType": "Boolean",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "entity", "type": "EntityID", "optional": false}
			],
			"description": "Returns true if a given team owns an entity "
		},
		{
			"name": "Team_OwnsSGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "sgroup[", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if a given team owns ALL or ANY items in a group "
		},
		{
			"name": "Team_OwnsSquad",
			"returnType": "Boolean",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "squad", "type": "SquadID", "optional": false}
			],
			"description": "Returns true if a given team owns a squad "
		},
		{
			"name": "Team_RestrictAddOnList",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "addonlist", "type": "Table", "optional": false}
			],
			"description": "Restrict a list of addons. \nlist should contain an array of strings to restrict."
		},
		{
			"name": "Team_RestrictBuildingList",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "blueprintlist", "type": "Table", "optional": false}
			],
			"description": "Restrict a list of buildings. \nlist should contain an array of strings to restrict."
		},
		{
			"name": "Team_RestrictResearchList",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "list", "type": "StringTable", "optional": false}
			],
			"description": "Restrict a list of research items. \nlist should contain an array of strings to restrict."
		},
		{
			"name": "Team_SetAbilityAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "bp", "type": "AbilityBlueprint/Table", "optional": false},
				{"name": "availability", "type": "Integer", "optional": false}
			],
			"description": "Sets the availability of an ability. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT "
		},
		{
			"name": "Team_SetCommandAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "command", "type": "Integer/Table", "optional": false},
				{"name": "availability", "type": "Integer", "optional": false}
			],
			"description": "Sets the availability of entity, squad and player commands. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT "
		},
		{
			"name": "Team_SetConstructionMenuAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "menuname", "type": "String/Table", "optional": false},
				{"name": "availability", "type": "Integer", "optional": false}
			],
			"description": "Sets the availability of a construction menu. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT "
		},
		{
			"name": "Team_SetEntityProductionAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "bp", "type": "EntityBlueprint/Table", "optional": false},
				{"name": "availability", "type": "Integer", "optional": false}
			],
			"description": "Sets the availability of an entity production item. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT "
		},
		{
			"name": "Team_SetMaxCapPopulation",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "captype", "type": "Integer", "optional": false},
				{"name": "newcap", "type": "Integer", "optional": false}
			],
			"description": "Sets the current personnel or vehicle max-cap for each player on a team. The captype is either CT_Personnel or CT_Vehicle (you can't adjust Medic caps just yet). \nyou will have to call Team_SetMaxPopulation to adjust the current max population to do this."
		},
		{
			"name": "Team_SetMaxPopulation",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "captype", "type": "Integer", "optional": false},
				{"name": "newcap", "type": "Integer", "optional": false}
			],
			"description": "Sets the current personnel or vehicle cap for each player on a team. The captype is either CT_Personnel or CT_Vehicle (you can't adjust Medic caps just yet). \nNote that any modifiers that adjust the current cap will be applied on top of this.  Also note, the current cap cannot go higher than the max cap."
		},
		{
			"name": "Team_SetSquadProductionAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "bp", "type": "SquadBlueprint/Table", "optional": false},
				{"name": "availability", "type": "Integer", "optional": false}
			],
			"description": "Sets the availability of a squad production item. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT "
		},
		{
			"name": "Team_SetTechTreeByYear",
			"returnType": "void",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "year", "type": "Integer", "optional": false}
			],
			"description": "Sets up the tech tree for a whole team based off the year "
		},
		{
			"name": "Team_SetUpgradeAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "bp", "type": "UpgradeBlueprint/Table", "optional": false},
				{"name": "availability", "type": "Integer", "optional": false}
			],
			"description": "Sets the availability of an upgrade. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT "
		},
		{
			"name": "Team_SetUpgradeCost",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID", "optional": false},
				{"name": "upgrade", "type": "UpgradeID", "optional": false},
				{"name": "manpower", "type": "Real", "optional": false},
				{"name": "fuel", "type": "Real", "optional": false},
				{"name": "munition", "type": "Real", "optional": false},
				{"name": "action", "type": "Real", "optional": false},
				{"name": "command", "type": "Real", "optional": false}
			],
			"description": "Sets the cost of an upgrade. "
		},
		{
			"name": "ToW_DefenseCreateWave",
			"returnType": "Void",
			"parameters": [
				{"name": "waveNumber", "type": "Integer", "optional": false}
			],
			"description": "Starts an enemy wave in a ToW mission set up with proper data. See TheatreOfWar.scar for example data. \nYou need to add import(\"TheatreOfWar.scar\") to your mission script to use this - it isn't imported by default"
		},
		{
			"name": "ToW_SetStandardResources",
			"returnType": "Void",
			"parameters": [
				{"name": "player[", "type": "PlayerID", "optional": false},
				{"name": "overrideData", "type": "Table", "optional": false}
			],
			"description": "Set a player to have standard starting resources, or use optional override data. \nYou need to add import(\"TheatreOfWar.scar\") to your mission script to use this - it isn't imported by default"
		},
		{
			"name": "ToW_SetUpBattleObjectives",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Sets up a default mission objective for Victory Point battles. \nYou need to add import(\"TheatreOfWar.scar\") to your mission script to use this - it isn't imported by default"
		},
		{
			"name": "ToW_SetUpTechTreeByYear",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "year", "type": "Int", "optional": false}
			],
			"description": "Restricts a given player's tech tree to just the units that were available in a specific year. \nYou need to add import(\"TheatreOfWar.scar\") to your mission script to use this - it isn't imported by default"
		},
		{
			"name": "Timer_Add",
			"returnType": "Void",
			"parameters": [
				{"name": "timerID", "type": "Integer", "optional": false},
				{"name": "period", "type": "Real", "optional": false}
			],
			"description": "Add the amount of time to the specified timer "
		},
		{
			"name": "Timer_Advance",
			"returnType": "Void",
			"parameters": [
				{"name": "timerID", "type": "Integer", "optional": false},
				{"name": "period", "type": "Real", "optional": false}
			],
			"description": "Advances the timer by the specified amount of time "
		},
		{
			"name": "Timer_Display",
			"returnType": "Void",
			"parameters": [
				{"name": "timerID", "type": "Integer", "optional": false}
			],
			"description": "Display (in the console) the amount of time remaining in the specified timer. "
		},
		{
			"name": "Timer_DisplayOnScreen",
			"returnType": "Void",
			"parameters": [
				{"name": "timerID", "type": "Integer", "optional": false}
			],
			"description": "Displays a timer on the screen - You need to call this regularly (i.e. every second) to update the onscreen display. THIS IS A TEMPORARY FUNCTION - WELL GET PROPER UI SUPPORT LATER ON "
		},
		{
			"name": "Timer_End",
			"returnType": "Void",
			"parameters": [
				{"name": "timerID", "type": "Integer", "optional": false}
			],
			"description": "Stop the specified timer. "
		},
		{
			"name": "Timer_Exists",
			"returnType": "Boolean",
			"parameters": [
				{"name": "timerID", "type": "Integer", "optional": false}
			],
			"description": "Returns whether the timer with this ID exists "
		},
		{
			"name": "Timer_GetElapsed",
			"returnType": "Real",
			"parameters": [
				{"name": "timerID", "type": "Integer", "optional": false}
			],
			"description": "Returns how much time has elapsed since this timer has been started "
		},
		{
			"name": "Timer_GetMinutesAndSeconds",
			"returnType": "Void",
			"parameters": [
				{"name": "getTimeFunction", "type": "Luafunction", "optional": false},
				{"name": "TimerID", "type": "Integer", "optional": false}
			],
			"description": "Returns TWO values: minutes and seconds. Provide it a function like Timer_GetRemaining or Timer_GetElapsed "
		},
		{
			"name": "Timer_GetRemaining",
			"returnType": "Real",
			"parameters": [
				{"name": "timerID", "type": "Integer", "optional": false}
			],
			"description": "Get the remaining time for the specified timer. "
		},
		{
			"name": "Timer_IsPaused",
			"returnType": "Boolean",
			"parameters": [
				{"name": "timerID", "type": "Integer", "optional": false}
			],
			"description": "Check if the timer is paused. "
		},
		{
			"name": "Timer_Pause",
			"returnType": "Void",
			"parameters": [
				{"name": "timerID", "type": "Integer", "optional": false}
			],
			"description": "Pause the specified timer. "
		},
		{
			"name": "Timer_Resume",
			"returnType": "Void",
			"parameters": [
				{"name": "timerID", "type": "Integer", "optional": false}
			],
			"description": "Resume the specified timer. "
		},
		{
			"name": "Timer_Start",
			"returnType": "Void",
			"parameters": [
				{"name": "timerID", "type": "Integer", "optional": false},
				{"name": "period", "type": "Real", "optional": false}
			],
			"description": "Start a timer with the specified id, taking the required period ( in seconds ) "
		},
		{
			"name": "EventCue_Create",
			"returnType": "event cue ID",
			"parameters": [
				{"name": "style", "type": "CueStyleID", "optional": false},
				{"name": "title", "type": "LocString", "optional": false},
				{"name": "description", "type": "LocString", "optional": false},
				{"name": "cameratarget[", "type": "Marker/Pos/EGroup/SGroup", "optional": false},
				{"name": "hintpointtext", "type": "LocString", "optional": false},
				{"name": "function", "type": "LuaFunction", "optional": false},
				{"name": "lifetime", "type": "Float", "optional": false},
				{"name": "dismissOnClick", "type": "Boolean", "optional": false}
			],
			"description": "Creates an Event Cue message which automatically sends the camera to a specified point when clicked on.  \nCan optionally create a 5-second hintpoint at the location when clicked on, and/or call a specified function for you, too. Both of these only activate the first time you click on the event cue to avoid stacking."
		},
		{
			"name": "FOW_Enable",
			"returnType": "Void",
			"parameters": [
				{"name": "enable", "type": "Boolean", "optional": false}
			],
			"description": "Enables or disables the FOW, including out of bound areas and all entities on the map "
		},
		{
			"name": "Game_SubTextFade",
			"returnType": "Void",
			"parameters": [
				{"name": "location", "type": "LocString", "optional": false},
				{"name": "time", "type": "LocString", "optional": false},
				{"name": "detail", "type": "LocString", "optional": false},
				{"name": "in", "type": "Real", "optional": false},
				{"name": "lifetime", "type": "Real", "optional": false},
				{"name": "out", "type": "Real", "optional": false}
			],
			"description": "Fade in and out two or three lines of subtext. \nThis function has to support two lines, for backwards compatibility. The 'detail' line is therefore optional."
		},
		{
			"name": "HintMouseover_Add",
			"returnType": "Void",
			"parameters": [
				{"name": "hintText", "type": "LocString", "optional": false},
				{"name": "hintTarget", "type": "Marker/Position/Egroup/Sgroup", "optional": false},
				{"name": "targetRadius", "type": "Real", "optional": false},
				{"name": "looping", "type": "Boolean", "optional": false}
			],
			"description": "Adds a Hint Point that will only appear on Mouseover of the target. "
		},
		{
			"name": "HintMouseover_Remove",
			"returnType": "Void",
			"parameters": [
				{"name": "hintText", "type": "LocString", "optional": false},
				{"name": "hintTarget", "type": "Marker/Egroup/Sgroup", "optional": false}
			],
			"description": "Removes a Mouseover Hint Point from the managing function. "
		},
		{
			"name": "HintPoint_Add",
			"returnType": "HintPointID",
			"parameters": [
				{"name": "where", "type": "StackVar", "optional": false},
				{"name": "bVisible", "type": "Boolean", "optional": false},
				{"name": "hintText[", "type": "LocString", "optional": false},
				{"name": "height", "type": "number", "optional": false},
				{"name": "actionType", "type": "<a href=\"enum_list.htm#HintPointActionType\">HintPointActionType</a>", "optional": false},
				{"name": "iconName", "type": "String", "optional": false}
			],
			"description": "Creates a hintpoint attached to a Marker, EGroup, SGroup or position \nIf range is set to 0, then the hintpoint is rangeless, see the design document for rangeless features. The following types of hintpoint actions are available. HPAT_Objective HPAT_Hint HPAT_Critical HPAT_Movement HPAT_Attack HPAT_FormationSetup HPAT_RallyPoint HPAT_DeepSnow HPAT_CoverGreen HPAT_CoverYellow HPAT_CoverRed HPAT_Detonation HPAT_Vaulting"
		},
		{
			"name": "HintPoint_Remove",
			"returnType": "Void",
			"parameters": [
				{"name": "HintPointID", "type": "Integer", "optional": false}
			],
			"description": "Removes a hintpoint. "
		},
		{
			"name": "HintPoint_SetDisplayOffset",
			"returnType": "Void",
			"parameters": [
				{"name": "hintpointID", "type": "Integer", "optional": false},
				{"name": "x", "type": "Real", "optional": false},
				{"name": "y[", "type": "Real", "optional": false},
				{"name": "z", "type": "Real", "optional": false}
			],
			"description": "Sets a hintpoint's display offset, which is 3D for world hintpoints and 2D for taskbar binding hintpoints (ignore z) "
		},
		{
			"name": "HintPoint_SetVisible",
			"returnType": "Void",
			"parameters": [
				{"name": "HintPointID", "type": "Integer", "optional": false},
				{"name": "bVisible", "type": "Boolean", "optional": false}
			],
			"description": "Sets a hintpoint's visibility. Currently, FOW is not accounted for. "
		},
		{
			"name": "Misc_IsEGroupSelected",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ANY or ALL of the EGroup is selected "
		},
		{
			"name": "Misc_IsSGroupSelected",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns true if ANY or ALL of the SGroup is selected "
		},
		{
			"name": "ThreatArrow_Add",
			"returnType": "Void",
			"parameters": [
				{"name": "GroupID", "type": "Integer", "optional": false},
				{"name": "Threat[", "type": "entity/squad/egroup/sgroup/position/marker", "optional": false},
				{"name": "icon", "type": "String", "optional": false}
			],
			"description": "Adds a threat to an existing group "
		},
		{
			"name": "ThreatArrow_CreateGroup",
			"returnType": "Integer (ID)",
			"parameters": [
				{"name": "threats", "type": "variable!argument!list:", "optional": false}
			],
			"description": "Creates a group of threats that are represented by a single arrow. Threats can be entities, squads, egroups, sgroups, positions or markers "
		},
		{
			"name": "ThreatArrow_DestroyAllGroups",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Destroy all threat groups "
		},
		{
			"name": "ThreatArrow_DestroyGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "GroupID", "type": "Integer", "optional": false}
			],
			"description": "Destroy a threat group "
		},
		{
			"name": "ThreatArrow_Remove",
			"returnType": "Void",
			"parameters": [
				{"name": "GroupID", "type": "Integer", "optional": false},
				{"name": "Threat", "type": "entity/squad/egroup/sgroup/position/marker", "optional": false}
			],
			"description": "Removes a threat from an existing group "
		},
		{
			"name": "UI_AddHintAndFlashAbility",
			"returnType": "Void",
			"parameters": [
				{"name": "playerid", "type": "PlayerID", "optional": false},
				{"name": "abilityID", "type": "AbilityID", "optional": false},
				{"name": "text", "type": "LocString", "optional": false},
				{"name": "length", "type": "Integer", "optional": false},
				{"name": "blueprint_filter", "type": "Table/Blueprint", "optional": true}
			],
			"description": "Creates and flashes an ability button on the taskbar if the unit is selected \nLength parameter determines how long to flash the item, and the blueprint filter is used if certain squad types need to be selected before flashing the button."
		},
		{
			"name": "UI_CreateEventCue",
			"returnType": "ID",
			"parameters": [
				{"name": "iconPath", "type": "String", "optional": false},
				{"name": "soundPath", "type": "String", "optional": false},
				{"name": "title", "type": "LocString", "optional": false},
				{"name": "description[", "type": "LocString", "optional": false},
				{"name": "lifetime", "type": "Float", "optional": false},
				{"name": "dismissOnClick", "type": "Boolean", "optional": false}
			],
			"description": "Creates an event cue without a callback (you won't know when it's clicked) "
		},
		{
			"name": "UI_CreateMinimapBlip",
			"returnType": "blipID",
			"parameters": [
				{"name": "where", "type": "StackVar", "optional": false},
				{"name": "lifetime", "type": "Real", "optional": false},
				{"name": "blipType", "type": "Integer", "optional": false}
			],
			"description": "Creates a blip on the minimap; return the ID of the blip. \n'where' can be an entity, marker, position, egroup, sgroup, or squad. The following blipTypes are available: BT_AttackHere BT_DefendHere BT_CaptureHere BT_General BT_Combat BT_Reveal BT_ObjectivePrimary BT_ObjectiveSecondary"
		},
		{
			"name": "UI_CreateSGroupKickerMessage",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "sgroup", "type": "SGroup", "optional": false},
				{"name": "message", "type": "LocString", "optional": false}
			],
			"description": "Create a custom kicker message on the squad and display to the player. "
		},
		{
			"name": "UI_DeleteMinimapBlip",
			"returnType": "Void",
			"parameters": [
				{"name": "blipID", "type": "Integer", "optional": false}
			],
			"description": "Removes a blip already created on the minimap "
		},
		{
			"name": "UI_HighlightSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "duration", "type": "Real", "optional": false}
			],
			"description": "Highlights an SGroup in the UI for the given duration "
		},
		{
			"name": "UI_SetAllowLoadAndSave",
			"returnType": "void",
			"parameters": [
				{"name": "allowLoadAndSave", "type": "bool", "optional": false}
			],
			"description": "Enables or disable load and save features at the pause menu "
		},
		{
			"name": "UI_SetSGroupSpecialLevel",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroup", "optional": false},
				{"name": "level", "type": "Int", "optional": false}
			],
			"description": "Sets a level decorator that's defined in all of the squads squad_ui_ext in the target SGroup \nif level value is -1 it will hide the special decorator, if no level is defined -1 is default"
		},
		{
			"name": "WinWarning_PublishLoseReminder",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "warningLevel", "type": "long", "optional": false}
			],
			"description": "Triggers a UI event cue and an audio cue that the player is about to lose the game. \nThe lower the warningLevel, the closer the player is to losing and the more intense the warning is"
		},
		{
			"name": "WinWarning_SetMaxTickers",
			"returnType": "void",
			"parameters": [
				{"name": "team1MaxTickers", "type": "int", "optional": false},
				{"name": "team2MaxTickers", "type": "int", "optional": false}
			],
			"description": "Sets the max victory point scores for the game "
		},
		{
			"name": "WinWarning_SetTickers",
			"returnType": "void",
			"parameters": [
				{"name": "team1Tickers", "type": "int", "optional": false},
				{"name": "team2Tickers", "type": "int", "optional": false}
			],
			"description": "Sets the victory point scores for the game "
		},
		{
			"name": "WinWarning_ShowLoseWarning",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "text", "type": "LocString", "optional": false},
				{"name": "fadeIn", "type": "float", "optional": false},
				{"name": "duration", "type": "float", "optional": false},
				{"name": "fadeOut", "type": "float", "optional": false}
			],
			"description": "Call UI_TitleDestroy to remove."
		},
		{
			"name": "Clone",
			"returnType": "Table ",
			"parameters": [
				{"name": "data", "type": "Table", "optional": false}
			],
			"description": "Clones a table (recursively) allowing for unadulterated use of the data "
		},
		{
			"name": "Event_IsAnyRunning",
			"returnType": "Boolean",
			"parameters": [
				{"name": "priority_threshold", "type": "Integer", "optional": true}
			],
			"description": "Returns true if any event is currently running [at or below (more important than) the priority threshold. If not specified, ignores threshold.] "
		},
		{
			"name": "Game_EndSP",
			"returnType": "Void",
			"parameters": [
				{"name": "win[", "type": "Boolean", "optional": false},
				{"name": "nis", "type": "Boolean", "optional": false},
				{"name": "sandmap", "type": "Boolean", "optional": false}
			],
			"description": "Ends the single player game (win/lose). "
		},
		{
			"name": "Game_FadeToBlack",
			"returnType": "Void",
			"parameters": [
				{"name": "direction", "type": "Bool", "optional": false},
				{"name": "length", "type": "Real", "optional": false}
			],
			"description": "Fades the screen to black - FADE_OUT to fade to black, FADE_IN to fade back in "
		},
		{
			"name": "Import_Once",
			"returnType": "nil",
			"parameters": [
				{"name": "Path", "type": "String", "optional": false}
			],
			"description": "Loads a scar file if it hasn't been loaded yet "
		},
		{
			"name": "Loc_FormatText",
			"returnType": "LocString",
			"parameters": [
				{"name": "FormatID[", "type": "Integer", "optional": false},
				{"name": "parameters", "type": "argc", "optional": false}
			],
			"description": "Returns a formatted localized string. \nUse this function to format localized text. ie %1PLAYERNAME% is going to win. It accepts up to 4 additional LocStrings as parameters."
		},
		{
			"name": "Sound_PlayOnSquad",
			"returnType": "Integer",
			"parameters": [
				{"name": "soundpathname", "type": "String", "optional": false},
				{"name": "sgroupid", "type": "SGroupID/Squad", "optional": false}
			],
			"description": "Play sound on the first entity of the squad in sgroup "
		},
		{
			"name": "Team_GetEntityConcentration",
			"returnType": "EGroup",
			"parameters": [
				{"name": "team[", "type": "TeamID", "optional": false},
				{"name": "popcapOnly", "type": "Boolean", "optional": false},
				{"name": "includeBlueprints", "type": "Table", "optional": false},
				{"name": "excludeBlueprints", "type": "Table", "optional": false},
				{"name": "bLeastConcentrated", "type": "Boolean", "optional": false},
				{"name": "onlyInThisMarker", "type": "MarkerID/Table", "optional": false}
			],
			"description": "Finds the greatest (or least) concentration of entities owned by a team. \nThis function is slow, so don't call it very often"
		},
		{
			"name": "Team_GetSquadConcentration",
			"returnType": "SGroup",
			"parameters": [
				{"name": "team[", "type": "TeamID", "optional": false},
				{"name": "popcapOnly", "type": "Boolean", "optional": false},
				{"name": "includeBlueprints", "type": "Table", "optional": false},
				{"name": "excludeBlueprints", "type": "Table", "optional": false},
				{"name": "bLeastConcentrated", "type": "Boolean", "optional": false},
				{"name": "onlyInThisMarker", "type": "MarkerID/Table", "optional": false}
			],
			"description": "Finds the greatest (or least) concentration of squads owned by a team. \nThis function is slow, so don't call it very often"
		},
		{
			"name": "Util_AddMouseoverSquadToSGroup",
			"returnType": "SGroupID",
			"parameters": [
				{"name": "clearGroup", "type": "Boolean", "optional": true}
			],
			"description": "If there's a squad under the mouse cursor, this adds it to a unique SGroup. Return value is the SGroup it was added to, or nil if there was no squad under the mouse cursor. Pass in true for 'clearGroup' to clear the sgroup before adding the squad. "
		},
		{
			"name": "Util_ApplyModifier",
			"returnType": "ModID",
			"parameters": [
				{"name": "groupid", "type": "SGroupID/EGroupID/Player", "optional": false},
				{"name": "modifier", "type": "String", "optional": false},
				{"name": "scalefactor", "type": "Real", "optional": false},
				{"name": "mathtype[", "type": "Real", "optional": false},
				{"name": "applytype", "type": "Real", "optional": false},
				{"name": "exclusive", "type": "Bool", "optional": false},
				{"name": "targetname", "type": "String", "optional": false}
			],
			"description": "Applies any modifier to the target SGroup, EGroup, or Player \nValid applytypes are MAT_...(Entity, Squad etc.), if left default assumption is default type for the target Cases you want to define apply\"type\": Weapon Modifiers, Enable Modifiers, or a player modifier for all entity or squad types Valid mathtypes are MUT...(Addition, Multiplication, etc.) Exclusive modifiers will replace all pre-existing modifiers of that modifier type on the target"
		},
		{
			"name": "Util_AutoAmbient",
			"returnType": "Void",
			"parameters": [
				{"name": "intelEventTable", "type": "Table", "optional": false}
			],
			"description": "Auto-generate an Ambient Event. These are Low priority, and will hopefully interrupt nothing. \nTakes a table of Actors and LOC numbers"
		},
		{
			"name": "Util_AutoIntel",
			"returnType": "Void",
			"parameters": [
				{"name": "intelEventTable", "type": "Table", "optional": false}
			],
			"description": "Auto-generate an Intel Event. These are medium priority, and will interrupt a Stinger, but not an NIS. \nTakes a table of parameters defining speaker(s) and line(s)"
		},
		{
			"name": "Util_AutoNISlet",
			"returnType": "Void",
			"parameters": [
				{"name": "nisletType", "type": "Integer", "optional": false},
				{"name": "intelEventTable", "type": "Table", "optional": false},
				{"name": "bFOWvisible", "type": "boolean", "optional": true}
			],
			"description": "Auto-generate an NISlet Event, a simple NIS meant to convey mission location. These are high priority, and will interrupt a Stinger and Intel Events. \nTakes an NISLET type and a table of parameters defining speaker(s) and line(s) NISLET_BLACK2GAME= 1 -- starts in black and fades up, ends in gamplay NISLET_GAME2GAME = 2 -- transitions from game play to letterbox and backto gameplay NISLET_GAME2BLACK= 3 -- starts in gameplay and ends in black NISLET_GAME2LETTER= 4 -- starts in gameplay and ends in letterbox mode (for transition to sitrep) NISLET_TIME = 1 -- use seconds to wait on camera movements NISLET_VO= 2 -- use voice to wait on camera movementst_eventes.nislet_start = {{camPos = pos1, waitType = NISLET_TIME, waitValue = 5},{camPos = pos2, waitType = NISLET_VO, waitValue = {ACTOR.GenericAlly, 000000}},}"
		},
		{
			"name": "Util_Autosave",
			"returnType": "void ",
			"parameters": [
				{"name": "checkpoint[", "type": "LocString", "optional": false},
				{"name": "delay", "type": "Float", "optional": false},
				{"name": "noFade", "type": "Boolean", "optional": false}
			],
			"description": "Automatically save the game for the player. The savegame name is built using the abbreviated mission name + checkpoint.  "
		},
		{
			"name": "Util_ClearWrecksFromMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "position[", "type": "MarkerID/Pos/SectorID", "optional": false},
				{"name": "range", "type": "Real", "optional": false},
				{"name": "wrecksList", "type": "Table", "optional": false}
			],
			"description": "Clears vehicle wrecks from a given area. \nArea can be a marker (with or without a range override), a position and range combo, or a territory sector ID. Uses EBP.WRECKED_VEHICLES unless wrecksList is defined."
		},
		{
			"name": "Util_DespawnAll",
			"returnType": "Void",
			"parameters": [
				{"name": "despawn", "type": "Boolean", "optional": false},
				{"name": "playerNum", "type": "Boolean!allPlayers!or!Int", "optional": false},
				{"name": "egroups", "type": "Boolean", "optional": false}
			],
			"description": "ReSpawns or DeSpawns sgroups (and egroups) for all players or the indicated player. \nexamples: Util_DespawnAll(true, true, false) or Util_DespawnAll(true, 1, false) or Util_DespawnAll(false, true, false)"
		},
		{
			"name": "Util_DifVar",
			"returnType": "Variable",
			"parameters": [
				{"name": "difficultyVariables[", "type": "Table", "optional": false},
				{"name": "difficulty", "type": "Integer", "optional": false}
			],
			"description": "Takes in a table and chooses the right variable for the difficulty setting. 1-4 elements. Acquires current difficulty by default. "
		},
		{
			"name": "Util_ElementCanSee",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerID/teamID", "type": "PlayerID/TeamID", "optional": false},
				{"name": "element[", "type": "SGroupID/EGroupID/EntityID/SquadID/MarkerID/Position", "optional": false}
			],
			"description": "Returns true if a Player/Team can see any or all of an SGroup/Squad/EGroup/Entity/Position/Marker "
		},
		{
			"name": "Util_EntityLimit",
			"returnType": "Boolean",
			"parameters": [
				{"name": "entityLimit", "type": "Integer", "optional": true}
			],
			"description": "Checks the entity count for the world and returns true or false depending on the result. A specific value can be passed in to override the default amount. "
		},
		{
			"name": "Util_FallBackToGarrisonBuilding",
			"returnType": "EntityID",
			"parameters": [
				{"name": "sgroupid", "type": "SGroupID", "optional": false},
				{"name": "radius", "type": "Int", "optional": false}
			],
			"description": "Try to garrison a loadable building within radius that is closer to the first squad of the sgroup than enemy \nThe squad suppression would be resetted before fallling back so that they would not succumb to pinned state"
		},
		{
			"name": "Util_FindHiddenSpawn",
			"returnType": "Position ",
			"parameters": [
				{"name": "origin", "type": "Position", "optional": false},
				{"name": "destination", "type": "Position", "optional": false}
			],
			"description": "Finds a hidden position within the FOW between two given points \nIf no position is found, returns origin"
		},
		{
			"name": "Util_ForceRetreatAll",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroup", "optional": false},
				{"name": "marker", "type": "Marker", "optional": false},
				{"name": "aiEncounterDisable", "type": "Bool/AIEncounter", "optional": false}
			],
			"description": "Forces all squads given to retreat, regardless of whether they are on team weapons or not. Disables aiEncounters input (true disables all encounters). "
		},
		{
			"name": "Util_GarrisonNearbyBuilding",
			"returnType": "EntityID",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "pos", "type": "Position", "optional": false},
				{"name": "radius[", "type": "Real", "optional": false},
				{"name": "occupied", "type": "Boolean", "optional": false},
				{"name": "filter", "type": "SGroup/Table", "optional": false}
			],
			"description": "Finds a nearby building to garrison. can ignore occupied [friendly] buildings. return ID of entity it found, or nil if not found \nCan also filter out groups not to occupy"
		},
		{
			"name": "Util_GarrisonNearbyVehicle",
			"returnType": "SquadID",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "pos", "type": "Position", "optional": false},
				{"name": "radius[", "type": "Real", "optional": false},
				{"name": "occupied", "type": "Boolean", "optional": false},
				{"name": "filter", "type": "SGroup/Table", "optional": false}
			],
			"description": "Finds a nearby vehicle to garrison. can ignore occupied [friendly] vehicles. return ID of vehicle it found, or nil if not found, \nCan also filter out groups not to occupy"
		},
		{
			"name": "Util_GetClosestMarker",
			"returnType": "MarkerID",
			"parameters": [
				{"name": "var", "type": "Variable", "optional": false},
				{"name": "markers", "type": "Table", "optional": false}
			],
			"description": "Returns the closest MarkerID to the entity/marker/pos/egroup/sgroup/squad from the table of markers provided "
		},
		{
			"name": "Util_GetEntitiesByBP",
			"returnType": "Void",
			"parameters": [
				{"name": "sourcegroup", "type": "EGroupID", "optional": false},
				{"name": "destgroup", "type": "EGroupID", "optional": false},
				{"name": "ebp", "type": "EntityBlueprint", "optional": false}
			],
			"description": "Find all the entities with a given blueprint in sourcegroup and add them to destgroup. \nSee also: EGroup_Filter()"
		},
		{
			"name": "Util_GetHealth",
			"returnType": "Percentage health [0,1] ",
			"parameters": [
				{"name": "var", "type": "Squad/Entity/Sgroup/Egroup", "optional": false}
			],
			"description": "Determines the health percentage of a given object \nReturns average health if the object is a group"
		},
		{
			"name": "Util_GetMouseoverSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns a unique SGroup used to hold mouseover squads obtained from Util_AddMouseoverSquadToSGroup "
		},
		{
			"name": "Util_GetPosition",
			"returnType": "Position",
			"parameters": [
				{"name": "var", "type": "Variable", "optional": false}
			],
			"description": "Returns a position from entity/marker/pos/egroup/sgroup/squad "
		},
		{
			"name": "Util_GetPositionAwayFromPlayer",
			"returnType": "Position",
			"parameters": [
				{"name": "pos", "type": "MarkerID/Pos/EGroupID/SGroupID", "optional": false},
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "searchRadius", "type": "Integer", "optional": true},
				{"name": "distance", "type": "Integer", "optional": true}
			],
			"description": "Returns a random position within an area that is not near a player \nsearchRadius is the area to look for the location in.  Distance is how far from the player's units the position must be."
		},
		{
			"name": "Util_GetPositionFromAtoB",
			"returnType": "Position",
			"parameters": [
				{"name": "a", "type": "MarkerID/Pos", "optional": false},
				{"name": "b", "type": "MarkerID/Pos", "optional": false},
				{"name": "distance", "type": "Real", "optional": false}
			],
			"description": "Returns a position that is distance metres from point A, headed in the direction of point B. \nYou can also pass in a percentage (0.0 to 1.0) instead of a distance in metres."
		},
		{
			"name": "Util_GetRandomPosition",
			"returnType": "Pos",
			"parameters": [
				{"name": "[", "type": "MarkerID/ScarPos", "optional": false},
				{"name": "range", "type": "Real", "optional": false}
			],
			"description": "Returns a random position either within the marker's proximity or with a pos and range provided. Range is ignored for rectangular markers "
		},
		{
			"name": "Util_GetSquadsByBP",
			"returnType": "Void",
			"parameters": [
				{"name": "sourcegroup", "type": "SGroupID", "optional": false},
				{"name": "destgroup", "type": "SGroupID", "optional": false},
				{"name": "sbp", "type": "SquadBlueprint", "optional": false}
			],
			"description": "Find all the squads with a given blueprint in sourcegroup and add them to destgroup. \nSee also: SGroup_Filter()"
		},
		{
			"name": "Util_GetTrailingNumber",
			"returnType": "Number",
			"parameters": [
				{"name": "val", "type": "String", "optional": false}
			],
			"description": "Returns trailing numbers from a string, if it exists, nil otherwise. E.G. \"marker23\" would return 23. "
		},
		{
			"name": "Util_HasPosition",
			"returnType": "Boolean",
			"parameters": [
				{"name": "var", "type": "Variable", "optional": false}
			],
			"description": "Returns true if given entity/marker/pos/egroup/sgroup/squad has a position; if false, Util_GetPosition will fail. "
		},
		{
			"name": "Util_HidePlayerForNIS",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "hide", "type": "Bool", "optional": false}
			],
			"description": "Hides all of a player's squads and/or buildings \nDoesn't hide buildings a player is in, or any base structures. Only items like sandbags, tanktraps, mg nests, etc. Put multiple playerIDs in a table to hide many players together, or use ALL for the playerID to apply to all players at once."
		},
		{
			"name": "Util_IsSequenceSkipped",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns whether the currently running sequence has been skipped "
		},
		{
			"name": "Util_Kill",
			"returnType": "Void",
			"parameters": [
				{"name": "var", "type": "Player/Squad/Entity/Sgroup/Egroup", "optional": false}
			],
			"description": "Kills a given object "
		},
		{
			"name": "Util_LogSyncWpn",
			"returnType": "Void",
			"parameters": [
				{"name": "syncweapon[", "type": "SGroupID", "optional": false},
				{"name": "kill", "type": "Boolean", "optional": false}
			],
			"description": "Tracks a syncweapon ID and destroys it (by default) or makes it uncapturable (if kill is set to false) "
		},
		{
			"name": "Util_MarkerFX",
			"returnType": "void",
			"parameters": [
				{"name": "markername", "type": "String", "optional": false},
				{"name": "eventfile", "type": "String", "optional": false}
			],
			"description": "Play an events file at a given markers location "
		},
		{
			"name": "Util_MissionTitle",
			"returnType": "Void",
			"parameters": [
				{"name": "title[", "type": "LocString", "optional": false},
				{"name": "time_fade_in", "type": "Int", "optional": false},
				{"name": "lifetime", "type": "Int", "optional": false},
				{"name": "time_fade_out", "type": "Int", "optional": false}
			],
			"description": "Play the mission title fade. "
		},
		{
			"name": "Util_MuteAmbientSound",
			"returnType": "Void",
			"parameters": [
				{"name": "enable", "type": "Boolean", "optional": false},
				{"name": "fade", "type": "Real", "optional": true}
			],
			"description": "Enabling this function will mute the ambient sound (NOT all sound). "
		},
		{
			"name": "Util_NewHUDFeatureEvent",
			"returnType": "void ",
			"parameters": [
				{"name": "newHUDFeature", "type": "<a href=\"enum_list.htm#HUDFeatureType\">HUDFeatureType</a>", "optional": false},
				{"name": "featureText", "type": "LocString", "optional": false},
				{"name": "featureIcon", "type": "String", "optional": false},
				{"name": "duration", "type": "Real", "optional": false}
			],
			"description": "Calls UI_NewHUDFeature() as an IntelEvent. Will get queued as any other event. See UI_NewHUDFeature() for parameter details. "
		},
		{
			"name": "Util_PlayMovie",
			"returnType": "Void",
			"parameters": [
				{"name": "name[", "type": "String", "optional": false},
				{"name": "fadeOut", "type": "Integer", "optional": false},
				{"name": "fadeIn", "type": "Integer", "optional": false},
				{"name": "onComplete", "type": "LuaFunction", "optional": false},
				{"name": "delay", "type": "Integer", "optional": false},
				{"name": "onCompleteAfterMovie", "type": "Boolean", "optional": false}
			],
			"description": "Play a movie. \nIf onCompleteAfterMovie is true, the onComplete function will play as soon as the movie is over, instead of after the fade-in"
		},
		{
			"name": "Util_PlayMusic",
			"returnType": "Void",
			"parameters": [
				{"name": "name", "type": "String", "optional": false},
				{"name": "fade", "type": "Real", "optional": false},
				{"name": "delay", "type": "Real", "optional": false}
			],
			"description": "Plays music from the Data:Sound folder, and stores the music track so it can be resumed after a save/load "
		},
		{
			"name": "Util_PrintObject",
			"returnType": "Void",
			"parameters": [
				{"name": "obj[", "type": "Object", "optional": false},
				{"name": "max_depth", "type": "Int", "optional": false},
				{"name": "data_type", "type": "String", "optional": false},
				{"name": "print_func", "type": "Function", "optional": false}
			],
			"description": "Prints out the entire contents of an Object \nObjects can be anything (Player, SGroup, Int, Table, String, etc.), but this is most useful for Tables"
		},
		{
			"name": "Util_ReinforceEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupName[", "type": "SGroupID", "optional": false},
				{"name": "custumTitle", "type": "LocID", "optional": false},
				{"name": "customDescript", "type": "LocID", "optional": false}
			],
			"description": "Creates an Event Cue for an SGroup and repeats it until the SGroup is killed or selected. \nAdditionally, a map ping and custome loc strings for the Title and Description can be used."
		},
		{
			"name": "Util_ReloadScript",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Reloads the running scar script. Current running rules would also be updated to the redefined functioin. "
		},
		{
			"name": "Util_RestoreMusic",
			"returnType": "Void",
			"parameters": [
				{"name": "", "type": "", "optional": false}
			],
			"description": "Resumes playing the music track that was last triggered i.e. after a save/load "
		},
		{
			"name": "Util_SetPlayerCanSkipSequence",
			"returnType": "Void",
			"parameters": [
				{"name": "event", "type": "LuaFunction", "optional": false},
				{"name": "skippedCallback", "type": "LuaFunction", "optional": false},
				{"name": "noFadeIn[", "type": "bool", "optional": false},
				{"name": "fadeInTime", "type": "int", "optional": false}
			],
			"description": "Sets it so that a player can skip a scripted sequence. When the skip key is pressed, calls back the given function as a post-sequence setup. noFadeIn stops the system from fading back into gameplay when finished. Call Util_SetPlayerUnableToSkipSequence() when the sequence is finished to disable "
		},
		{
			"name": "Util_SetPlayerUnableToSkipSequence",
			"returnType": "Void",
			"parameters": [
				{"name": "event", "type": "LuaFunction", "optional": false},
				{"name": "skippedCallback", "type": "LuaFunction", "optional": false},
				{"name": "noFadeIn", "type": "bool", "optional": false}
			],
			"description": "Disables Util_SetPlayerCanSkipSequence "
		},
		{
			"name": "Util_SortPositionsByClosest",
			"returnType": "Table",
			"parameters": [
				{"name": "origin", "type": "SGroupID/EGroupID/EntityID/SquadID/MarkerID/Position", "optional": false},
				{"name": "positions[", "type": "Table", "optional": false}
			],
			"description": "Returns a table of positions sorted from closest to furthest (or furthes to closest if reverse is true) from the origin "
		},
		{
			"name": "Util_StartAmbient",
			"returnType": "Void",
			"parameters": [
				{"name": "func", "type": "LuaFunction", "optional": false}
			],
			"description": "Play a Speech Stinger. These are the lowest priority, and will be bumped by Intel Events or NIS's. \nThis function should used instead of Event_Start because it handles priorities."
		},
		{
			"name": "Util_StartIntel",
			"returnType": "Void",
			"parameters": [
				{"name": "func", "type": "LuaFunction", "optional": false}
			],
			"description": "Play an Intel Event. These are medium priority, and will interrupt a Stinger, but not an NIS. \nThis function should used instead of Event_Start because it handles priorities."
		},
		{
			"name": "Util_StartNislet",
			"returnType": "Void",
			"parameters": [
				{"name": "event", "type": "LuaFunction", "optional": false},
				{"name": "skippedCallback", "type": "LuaFunction", "optional": false},
				{"name": "noFadeIn", "type": "bool", "optional": false},
				{"name": "fadeInTime", "type": "int", "optional": false}
			],
			"description": "Play Nislet Event. Starts a Nislet event, and calls back a function for post-nislet setup if the Nislet is skipped. noFadeIn stops the system from fading back into gameplay when the player skips "
		},
		{
			"name": "Util_StartQuickIntel",
			"returnType": "Void",
			"parameters": [
				{"name": "actor", "type": "String", "optional": false},
				{"name": "speech", "type": "LocString", "optional": false}
			],
			"description": "Play a quick, one-line Intel event.  These are medium priority, and will interrupt a Stinger, but not an NIS. \nUse this when playing a single line.  For multi-line events, use Util_StartIntel "
		},
		{
			"name": "Util_TableContains",
			"returnType": "Boolean",
			"parameters": [
				{"name": "targetTable", "type": "Table", "optional": false},
				{"name": "obj", "type": "Object", "optional": false}
			],
			"description": "Checks the first layer of a table and looks for a specified Object, returns true if found. \nObjects can be anything (Player, SGroup, Int, Table, String, etc.)"
		},
		{
			"name": "Util_ToggleAllowIntelEvents",
			"returnType": "void ",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Debug function used to toggle whether or not IntelEvents are played. Only works with -dev parameter "
		},
		{
			"name": "Util_TriggerEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "playerid", "type": "PlayerID", "optional": false},
				{"name": "position", "type": "Marker/EGroup/SGroup/ScarPos", "optional": false},
				{"name": "range", "type": "Int", "optional": false},
				{"name": "func", "type": "LuaFunction", "optional": false},
				{"name": "non_combat", "type": "Boolean", "optional": false},
				{"name": "onscreen_only", "type": "Boolean", "optional": false},
				{"name": "onscreen_duration", "type": "Int", "optional": false}
			],
			"description": "Library function to trigger NIS event under a certain sets of conditions.  NOTE: if checking against a marker DO NOT specify a range.  The range of the marker set in the WorldBuilder will be used. \nonscreen_only set to TRUE means the squad must be onscreen if the event is to be triggered."
		},
		{
			"name": "Util_UnitCounts",
			"returnType": "Lua Table",
			"parameters": [
				{"name": "player", "type": "Boolean!world!OR!playerID", "optional": false}
			],
			"description": "Returns a table containing either the total or a specific player's squad count, entity count, and vehicle count. \ntable can be accessed as scene below Get Player Example:&lt;BR/&gt; local t = Util_UnitCounts(player1)&lt;BR/&gt; print(t.squad)&lt;BR/&gt; print(t.entity)&lt;BR/&gt; print(t.vehicle)&lt;BR/&gt; Get World Example:&lt;BR/&gt; local t = Util_UnitCounts(true)&lt;BR/&gt; print(t.squad)&lt;BR/&gt; print(t.entity)&lt;BR/&gt; print(t.vehicle)&lt;BR/&gt; Alternate Format:&lt;BR/&gt; print(Util_UnitCounts(true).squad)&lt;BR/&gt;"
		},
		{
			"name": "World_KillAllNeutralEntitesNearMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "marker", "type": "MarkerID", "optional": false}
			],
			"description": "Kills ALL world entities near a marker "
		},
		{
			"name": "Anim_PlayEntityAnim",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "animname", "type": "const char*", "optional": false}
			],
			"description": "Plays an animation from an entity. \nThis function can be called through a CTRL object in NISlets to wait on the animation."
		},
		{
			"name": "bug",
			"returnType": "Void",
			"parameters": [
				{"name": "errormessage", "type": "ErrorMessage", "optional": false}
			],
			"description": "E-mails a warning out with logfiles at the end of the game. \nExample: bug( \"This shouldn't happen, fix \"..problem.here)"
		},
		{
			"name": "Camera_AutoRotate",
			"returnType": "void",
			"parameters": [
				{"name": "target", "type": "ScarPosition", "optional": false},
				{"name": "distance", "type": "float", "optional": false},
				{"name": "declination", "type": "float", "optional": false},
				{"name": "speed", "type": "float", "optional": false}
			],
			"description": "Procedurally rotates the camera around a target. Camera input will be disabled. distance is in meters, declination is in degrees, speed is in degrees/sec. "
		},
		{
			"name": "Camera_ClampToMarker",
			"returnType": "void",
			"parameters": [
				{"name": "marker", "type": "ScarMarker", "optional": false}
			],
			"description": "Clamps the camera's target position to a marker. "
		},
		{
			"name": "Camera_FocusOnPosition",
			"returnType": "void",
			"parameters": [
				{"name": "position", "type": "ScarPosition", "optional": false},
				{"name": "pan", "type": "bool", "optional": false}
			],
			"description": "Focus the camera on the specified position. If pan is true, smoothly pan the camera to the target. "
		},
		{
			"name": "Camera_FollowEntity",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Make the camera follow the specified entity. "
		},
		{
			"name": "Camera_FollowSelection",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Make the camera follow the current full selection. "
		},
		{
			"name": "Camera_FollowSquad",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Make the camera follow the specified squad. "
		},
		{
			"name": "Camera_GetCurrentTargetPos",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Get the current target position for the camera. (Where the the camera currently is.) "
		},
		{
			"name": "Camera_GetDeclination",
			"returnType": "float",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Get the current camera declination (tilt). "
		},
		{
			"name": "Camera_GetOrbit",
			"returnType": "float",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Get the current camera orbit (rotation). "
		},
		{
			"name": "Camera_GetTargetPos",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Get the desired target position for the camera. (Where the camera is trying to get to.) "
		},
		{
			"name": "Camera_GetTuningValue",
			"returnType": "float",
			"parameters": [
				{"name": "tuningValue", "type": "CameraOperator::TuningValue", "optional": false}
			],
			"description": "Get camera tuning value. "
		},
		{
			"name": "Camera_GetZoomDist",
			"returnType": "float",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Get the current zoom distance for the camera. "
		},
		{
			"name": "Camera_IsInputEnabled",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns the enabled/disabled state of the camera input.  (not strict) "
		},
		{
			"name": "Camera_Reload",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Reload all camera tuning values. "
		},
		{
			"name": "Camera_ResetFocus",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Make the camera stop following anything. "
		},
		{
			"name": "Camera_ResetToDefault",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Reset camera position to default home position "
		},
		{
			"name": "Camera_SetDeclination",
			"returnType": "void",
			"parameters": [
				{"name": "declination", "type": "float", "optional": false}
			],
			"description": "Set the current camera declination (tilt). "
		},
		{
			"name": "Camera_SetInputEnabled",
			"returnType": "void",
			"parameters": [
				{"name": "enabled", "type": "bool", "optional": false}
			],
			"description": "Enables/disables camera input. "
		},
		{
			"name": "Camera_SetOrbit",
			"returnType": "void",
			"parameters": [
				{"name": "orbit", "type": "float", "optional": false}
			],
			"description": "Set the current camera orbit (rotation). "
		},
		{
			"name": "Camera_SetSlideTargetRate",
			"returnType": "void",
			"parameters": [
				{"name": "rate", "type": "float", "optional": false}
			],
			"description": "Changes the speed of the camera blends to be newRate until the user (or some other camera call) is made.  Can call this with 0 to reset to default rate. "
		},
		{
			"name": "Camera_SetTuningValue",
			"returnType": "void",
			"parameters": [
				{"name": "tuningValue", "type": "CameraOperator::TuningValue", "optional": false},
				{"name": "value", "type": "float", "optional": false}
			],
			"description": "Set camera tuning value. "
		},
		{
			"name": "Camera_SetZoomDist",
			"returnType": "void",
			"parameters": [
				{"name": "distance", "type": "float", "optional": false}
			],
			"description": "Set the current zoom distance for the camera. "
		},
		{
			"name": "Camera_StopAutoRotating",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Stops the camera from procedurally rotating. Input is restored. "
		},
		{
			"name": "Camera_Unclamp",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Frees up the camera (so it's not clamped to a marker anymore). "
		},
		{
			"name": "EGroup_CallEntityFunction",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "entityFunction", "type": "Function", "optional": false},
				{"name": "list", "type": "variable!argument", "optional": false}
			],
			"description": "Calls an Entity_ function on every entity in an egroup \nThe first parameter of the supplied function must be EntityID"
		},
		{
			"name": "EGroup_CallEntityFunctionAllOrAny",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false},
				{"name": "entityFunction", "type": "Function", "optional": false},
				{"name": "list", "type": "variable!argument", "optional": false}
			],
			"description": "Returns whether ALL or ANY entities in an egroup satisfy a condition, using an Entity_ function to perform the query on each entity \nThe first parameter of the supplied function must be EntityID"
		},
		{
			"name": "fatal",
			"returnType": "int",
			"parameters": [
				{"name": "state", "type": "lua_State*", "optional": false}
			],
			"description": "Throws an error to lua and print out the error message "
		},
		{
			"name": "Game_EnableInput",
			"returnType": "void",
			"parameters": [
				{"name": "enabled", "type": "bool", "optional": false}
			],
			"description": "Enables/Disables all input EXCEPT for ESC and F10. "
		},
		{
			"name": "Game_EndSubTextFade",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Removes title text displayed with Game_SubTextFade(...) immediately "
		},
		{
			"name": "Game_EndTextTitleFade",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Removes title text displayed with Game_TextTitleFade(...) immediately "
		},
		{
			"name": "Game_GetLocalPlayer",
			"returnType": "Player*",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Get the local player. (should only be used for UI purpose) (not strict) "
		},
		{
			"name": "Game_GetMode",
			"returnType": "GameUICore::UIMode",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns the current game screen mode. "
		},
		{
			"name": "Game_GetSPDifficulty",
			"returnType": "int",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns current single player difficulty. Values are GD_EASY, GD_NORMAL, GD_HARD, GD_EXPERT. "
		},
		{
			"name": "Game_HasLocalPlayer",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Determine if there is a valid local player. (UI only -- nondeterminstic) (not strict) "
		},
		{
			"name": "Game_IsLetterboxed",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns true if the ui is in letterbox mode . (not strict) "
		},
		{
			"name": "Game_IsPerformanceTest",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns true if the we're running the performance test. "
		},
		{
			"name": "Game_IsRTM",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Use to test whether the game is running in RTM mode or not. Using -rtm from the command line will cause this function to also return true in non-RTM builds. "
		},
		{
			"name": "Game_Letterbox",
			"returnType": "void",
			"parameters": [
				{"name": "on", "type": "bool", "optional": false},
				{"name": "timeSecs", "type": "float", "optional": false}
			],
			"description": "Enters/Exits letterbox mode in amount of time specified by timeSecs. \nLetterbox mode disables input"
		},
		{
			"name": "Game_LoadAtmosphere",
			"returnType": "void",
			"parameters": [
				{"name": "filename", "type": "const char*", "optional": false},
				{"name": "transitionTime", "type": "float", "optional": false}
			],
			"description": "Transitions to another atmosphere. Overwrites current transitions. "
		},
		{
			"name": "Game_LockRandom",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "If you are running something that is non-deterministic like a getlocalplayer conditional, you can lock the random to make sure no one down the callstack will throw the game random index out of sync and cause a sync error. REMEMBER TO UNLOCK WHEN YOU ARE DONE "
		},
		{
			"name": "Game_ProfileDumpFrames",
			"returnType": "void",
			"parameters": [
				{"name": "name", "type": "const char*", "optional": false},
				{"name": "frameCount", "type": "int32_t", "optional": false}
			],
			"description": "Dumps a profile series "
		},
		{
			"name": "Game_QuitApp",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Quits the app immediately "
		},
		{
			"name": "Game_ScreenFade",
			"returnType": "void",
			"parameters": [
				{"name": "r", "type": "float", "optional": false},
				{"name": "g", "type": "float", "optional": false},
				{"name": "b", "type": "float", "optional": false},
				{"name": "a", "type": "float", "optional": false},
				{"name": "timeSecs", "type": "float", "optional": false}
			],
			"description": "Fades the screen to a given RGBA colour over a number of seconds "
		},
		{
			"name": "Game_SetLocalPlayer",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false}
			],
			"description": "Sets the local player. (not strict) "
		},
		{
			"name": "Game_SetMode",
			"returnType": "void",
			"parameters": [
				{"name": "mode", "type": "GameUICore::UIMode", "optional": false}
			],
			"description": "Set the game screen mode \nUI_Normal is the regular screen with taskbar.          UI_Fullscreen is the mode without any 2D UI. UI_Cinematic is the same as letter box mode."
		},
		{
			"name": "Game_ShowPauseMenu",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Brings up the pause menu. The game does not get paused until the end of the current sim tick, so anything that comes after Game_ShowPauseMenu in your function will still get executed, as well as any rules set to run during that frame. "
		},
		{
			"name": "Game_SkipAllEvents",
			"returnType": "void",
			"parameters": [
				{"name": "deleteQueued", "type": "bool", "optional": false}
			],
			"description": "Skips all events. Can either delete or skip queued events. "
		},
		{
			"name": "Game_SkipEvent",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Skips the currently playing event (and stops current sound). "
		},
		{
			"name": "Game_StartMuted",
			"returnType": "void",
			"parameters": [
				{"name": "startMuted", "type": "bool", "optional": false}
			],
			"description": "Do not unmute game sounds when the mission starts (must be called in OnInit).  Use this is you transition into a NIS to prevent any audio from playing until the NIS is over. "
		},
		{
			"name": "Game_TextTitleFade",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "text", "type": "LocString", "optional": false},
				{"name": "fadeIn", "type": "float", "optional": false},
				{"name": "duration", "type": "float", "optional": false},
				{"name": "fadeOut", "type": "float", "optional": false}
			],
			"description": "Shows title text that fades in and out over a specified durations \nCall UI_TitleDestroy to remove."
		},
		{
			"name": "Game_TriggerLightning",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Triggers lightning on the next frame "
		},
		{
			"name": "Game_UnlockInputOnLetterBox",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Unlocks user/camera input during letterbox. This should be used for debug only. "
		},
		{
			"name": "Game_UnLockRandom",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "unlock the random from a previous lockrandom call only "
		},
		{
			"name": "Ghost_DisableSpotting",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Disable the spotting of enemy entities that may become ghosts in the FoW. "
		},
		{
			"name": "Ghost_EnableSpotting",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Enable the spotting of enemy entities that may become ghosts in the FoW. "
		},
		{
			"name": "HintPoint_AddToEGroup",
			"returnType": "size_t",
			"parameters": [
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "priority", "type": "int", "optional": false},
				{"name": "visible", "type": "bool", "optional": false},
				{"name": "function", "type": "LuaConfig::RefFunction", "optional": false},
				{"name": "hint", "type": "LocString", "optional": false},
				{"name": "arrow", "type": "bool", "optional": false},
				{"name": "arrowOffset", "type": "ScarPosition", "optional": false},
				{"name": "actionType", "type": "HintPointManager::HintPointActionType", "optional": false},
				{"name": "iconName", "type": "const char*", "optional": false}
			],
			"description": "Deprecated. "
		},
		{
			"name": "HintPoint_AddToEntity",
			"returnType": "size_t",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "priority", "type": "int", "optional": false},
				{"name": "visible", "type": "bool", "optional": false},
				{"name": "function", "type": "LuaConfig::RefFunction", "optional": false},
				{"name": "hint", "type": "LocString", "optional": false},
				{"name": "arrow", "type": "bool", "optional": false},
				{"name": "arrowOffset", "type": "ScarPosition", "optional": false},
				{"name": "objectiveID", "type": "int", "optional": false},
				{"name": "actionType", "type": "HintPointManager::HintPointActionType", "optional": false},
				{"name": "iconName", "type": "const char*", "optional": false}
			],
			"description": "For internal use only. "
		},
		{
			"name": "HintPoint_AddToPosition",
			"returnType": "size_t",
			"parameters": [
				{"name": "position", "type": "ScarPosition", "optional": false},
				{"name": "priority", "type": "int", "optional": false},
				{"name": "visible", "type": "bool", "optional": false},
				{"name": "function", "type": "LuaConfig::RefFunction", "optional": false},
				{"name": "hint", "type": "LocString", "optional": false},
				{"name": "arrow", "type": "bool", "optional": false},
				{"name": "arrowOffset", "type": "ScarPosition", "optional": false},
				{"name": "objectiveID", "type": "int", "optional": false},
				{"name": "actionType", "type": "HintPointManager::HintPointActionType", "optional": false},
				{"name": "iconName", "type": "const char*", "optional": false}
			],
			"description": "For internal use only. "
		},
		{
			"name": "HintPoint_AddToSGroup",
			"returnType": "size_t",
			"parameters": [
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "priority", "type": "int", "optional": false},
				{"name": "visible", "type": "bool", "optional": false},
				{"name": "function", "type": "LuaConfig::RefFunction", "optional": false},
				{"name": "hint", "type": "LocString", "optional": false},
				{"name": "arrow", "type": "bool", "optional": false},
				{"name": "arrowOffset", "type": "ScarPosition", "optional": false},
				{"name": "actionType", "type": "HintPointManager::HintPointActionType", "optional": false},
				{"name": "iconName", "type": "const char*", "optional": false}
			],
			"description": "Deprecated. "
		},
		{
			"name": "HintPoint_AddToSquad",
			"returnType": "size_t",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "priority", "type": "int", "optional": false},
				{"name": "visible", "type": "bool", "optional": false},
				{"name": "function", "type": "LuaConfig::RefFunction", "optional": false},
				{"name": "hint", "type": "LocString", "optional": false},
				{"name": "arrow", "type": "bool", "optional": false},
				{"name": "arrowOffset", "type": "ScarPosition", "optional": false},
				{"name": "objectiveID", "type": "int", "optional": false},
				{"name": "actionType", "type": "HintPointManager::HintPointActionType", "optional": false},
				{"name": "iconName", "type": "const char*", "optional": false}
			],
			"description": "For internal use only. "
		},
		{
			"name": "HintPoint_ClearFacing",
			"returnType": "void",
			"parameters": [
				{"name": "id", "type": "int", "optional": false}
			],
			"description": "Clear the hint point arrow facing value. "
		},
		{
			"name": "HintPoint_RemoveAll",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Remove all hint points. "
		},
		{
			"name": "HintPoint_SetDisplayOffsetInternal",
			"returnType": "void",
			"parameters": [
				{"name": "id", "type": "int", "optional": false},
				{"name": "offset", "type": "ScarPosition", "optional": false}
			],
			"description": "Add a projected offset to the specified hint point. "
		},
		{
			"name": "HintPoint_SetFacingEntity",
			"returnType": "void",
			"parameters": [
				{"name": "id", "type": "int", "optional": false},
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Face the hint point arrow towards this entity. "
		},
		{
			"name": "HintPoint_SetFacingPosition",
			"returnType": "void",
			"parameters": [
				{"name": "id", "type": "int", "optional": false},
				{"name": "position", "type": "ScarPosition", "optional": false}
			],
			"description": "Face the hint point arrow towards this position. "
		},
		{
			"name": "HintPoint_SetFacingSquad",
			"returnType": "void",
			"parameters": [
				{"name": "id", "type": "int", "optional": false},
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Face the hint point arrow towards this squad. "
		},
		{
			"name": "HintPoint_SetVisibleInternal",
			"returnType": "void",
			"parameters": [
				{"name": "id", "type": "int", "optional": false},
				{"name": "visible", "type": "bool", "optional": false}
			],
			"description": "Show or hide the specified hint point. "
		},
		{
			"name": "inv_dump",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Dump content of inventory to a file "
		},
		{
			"name": "IsOfType",
			"returnType": "bool",
			"parameters": [
				{"name": "pbg", "type": "const PropertyBagGroup*", "optional": false},
				{"name": "type", "type": "const char*", "optional": false}
			],
			"description": "Returns true if this object is of the specified type "
		},
		{
			"name": "IsSecuringStructure",
			"returnType": "bool",
			"parameters": [
				{"name": "pbg", "type": "const PropertyBagGroup*", "optional": false}
			],
			"description": "Can this structure be used to secure territory "
		},
		{
			"name": "IsStructure",
			"returnType": "bool",
			"parameters": [
				{"name": "pbg", "type": "const PropertyBagGroup*", "optional": false}
			],
			"description": "Returns true if this object is a structure (something with a site_ext) "
		},
		{
			"name": "License_CanPlayRace",
			"returnType": "bool",
			"parameters": [
				{"name": "raceName", "type": "const char*", "optional": false}
			],
			"description": "Returns whether the installed version of the game allows the player to play this race "
		},
		{
			"name": "LOC",
			"returnType": "LocString",
			"parameters": [
				{"name": "text", "type": "const char*", "optional": false}
			],
			"description": "DEV ONLY: Converts ansi text to localized text. \nYour text will have to get localized properly at some point before final.   When converting text with this function you will get LOC: prefixed to your text"
		},
		{
			"name": "Loc_ConvertNumber",
			"returnType": "LocString",
			"parameters": [
				{"name": "number", "type": "int", "optional": false}
			],
			"description": "Returns a localized string containing the number. "
		},
		{
			"name": "Loc_Empty",
			"returnType": "LocString",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Empty string. \nThis will create an empty localized string."
		},
		{
			"name": "Loc_FormatTime",
			"returnType": "LocString",
			"parameters": [
				{"name": "secs", "type": "int", "optional": false},
				{"name": "show_hours", "type": "bool", "optional": false},
				{"name": "leading_zeroes", "type": "bool", "optional": false}
			],
			"description": "Returns a formatted time string. can omit hours and leading zeroes (for example, 4:57 instead of 00:04:57) "
		},
		{
			"name": "Misc_AbortToFE",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Abort straight out of the game to the frontend, without asking the user "
		},
		{
			"name": "Misc_AddRestrictCommandsMarker",
			"returnType": "void",
			"parameters": [
				{"name": "marker", "type": "ScarMarker", "optional": false}
			],
			"description": "Add another marker in which commands are restricted to. "
		},
		{
			"name": "Misc_AIControlLocalPlayer",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Let AI take over local player "
		},
		{
			"name": "Misc_AreDefaultCommandsEnabled",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns the enabled/disabled state of the right-click command input.  (not strict) "
		},
		{
			"name": "Misc_DetectKeyboardInput",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns true if the app has had any keyboard input in the last second "
		},
		{
			"name": "Misc_DetectMouseInput",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns true if the app has had any mouse input in the last second "
		},
		{
			"name": "Misc_DoWeaponHitEffectOnEntity",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "weaponPBG", "type": "ScarWeaponPBG", "optional": false},
				{"name": "penetrated", "type": "bool", "optional": false}
			],
			"description": "Do weapon hit effect on the entity from the view camera origin \nWeaponID is the property bag group id; if penetrated is set to false, deflection effect would be played instead"
		},
		{
			"name": "Misc_EnablePerformanceTest",
			"returnType": "void",
			"parameters": [
				{"name": "toEnable", "type": "bool", "optional": false}
			],
			"description": "Turn on or off the performance test monitoring "
		},
		{
			"name": "Misc_GetCommandLineString",
			"returnType": "const char*",
			"parameters": [
				{"name": "option", "type": "const char*", "optional": false}
			],
			"description": "Returns the string argument for a command line option. ex: for \"-init test.lua\" it would return \"test.lua\" "
		},
		{
			"name": "Misc_GetControlGroupContents",
			"returnType": "void",
			"parameters": [
				{"name": "groupIndex", "type": "int", "optional": false},
				{"name": "squads", "type": "SGroup*", "optional": false},
				{"name": "nonSquadEntities", "type": "EGroup*", "optional": false}
			],
			"description": "Returns contents of a control group (0 to 9). Squads are put into an sgroup, and non-squad entities are put into an egroup. "
		},
		{
			"name": "Misc_GetEntityControlGroup",
			"returnType": "int",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns the control group index that this entity belongs to, from 0 to 9, or -1 if none. "
		},
		{
			"name": "Misc_GetHiddenPositionOnPath",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "checkType", "type": "<a href=\"enum_list.htm#CheckHiddenType\">CheckHiddenType</a>", "optional": false},
				{"name": "origin", "type": "ScarPosition", "optional": false},
				{"name": "destination", "type": "ScarPosition", "optional": false},
				{"name": "ebp", "type": "ScarEntityPBG", "optional": false},
				{"name": "stepDistance", "type": "float", "optional": false},
				{"name": "cameraPadding", "type": "float", "optional": false},
				{"name": "fowPlayer", "type": "ModPlayer*", "optional": false},
				{"name": "debugDisplay", "type": "bool", "optional": false}
			],
			"description": "Returns a hidden position on path from origin to destination. If there's none, it returns the origin position \n Possible check types are CheckHiddenFromCamera, CheckHiddenInFOW and CheckHiddenBothCameraFOW Camera check determined by the camera frustum. use cameraPadding to increase the area around the camera when doing the check FOW check requires a valid player ID passed in stepDistance is the interval along the path that the hidden points will be checked ( min is 1 metre ) If no hidden position is found, position ( 0, 0, 0 ) is returned Don't use this for multi-player SCAR script!!"
		},
		{
			"name": "Misc_GetMouseOnTerrain",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns the world position of the mouse on the terrain (not strict) "
		},
		{
			"name": "Misc_GetMouseOverEntity",
			"returnType": "Entity*",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns the entity under the mouse (if any) (not strict) "
		},
		{
			"name": "Misc_GetSelectedEntities",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "EGroup*", "optional": false},
				{"name": "subselection", "type": "bool", "optional": false}
			],
			"description": "Clears a given group and adds the current full selection (or subselection if true) to the group. "
		},
		{
			"name": "Misc_GetSelectedSquads",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "SGroup*", "optional": false},
				{"name": "subselection", "type": "bool", "optional": false}
			],
			"description": "Clears a given group and adds the current full selection (or subselection if true) to the group. "
		},
		{
			"name": "Misc_GetSquadControlGroup",
			"returnType": "int",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns the control group index that this squad belongs to, from 0 to 9, or -1 if none. "
		},
		{
			"name": "Misc_IsCommandLineOptionSet",
			"returnType": "bool",
			"parameters": [
				{"name": "option", "type": "const char*", "optional": false}
			],
			"description": "Returns true if -option is specified on the command line "
		},
		{
			"name": "Misc_IsDevMode",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns whether the game is running in dev mode. The rules for dev mode are a bit complicated between builds, so we cannot simply check the command line. "
		},
		{
			"name": "Misc_IsEntityOnScreen",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "percent", "type": "float", "optional": false}
			],
			"description": "Check if the squad is on screen currently (not strict) "
		},
		{
			"name": "Misc_IsEntitySelected",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns true if the specified entity is currently selected. "
		},
		{
			"name": "Misc_IsMouseOverEntity",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns true if the mouse is over an entity (not strict) "
		},
		{
			"name": "Misc_IsPosOnScreen",
			"returnType": "bool",
			"parameters": [
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "percent", "type": "float", "optional": false}
			],
			"description": "Check if position is on screen, (1 being the entire screen, 0.5 being 50% of the screen from the center point) "
		},
		{
			"name": "Misc_IsSelectionInputEnabled",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns the enabled/disabled state of the selection input.  (not strict) "
		},
		{
			"name": "Misc_IsSquadOnScreen",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "percent", "type": "float", "optional": false}
			],
			"description": "Check if the entity is on screen currently (not strict) "
		},
		{
			"name": "Misc_IsSquadSelected",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns true if the specified squad is currently selected. "
		},
		{
			"name": "Misc_RemoveCommandRestriction",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Remove all command restrictions. "
		},
		{
			"name": "Misc_RestrictCommandsToMarker",
			"returnType": "void",
			"parameters": [
				{"name": "marker", "type": "ScarMarker", "optional": false}
			],
			"description": "Set the marker in which commands are restricted to. "
		},
		{
			"name": "Misc_Screenshot",
			"returnType": "const char*",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Save a screenshot "
		},
		{
			"name": "Misc_ScreenshotExt",
			"returnType": "void",
			"parameters": [
				{"name": "fileExtension", "type": "const char*", "optional": false}
			],
			"description": "Set the graphic file type for screenshot (.jpg, .tga) "
		},
		{
			"name": "Misc_SelectEntity",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Set the full selection to the specified entity. "
		},
		{
			"name": "Misc_SelectSquad",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "selected", "type": "bool", "optional": false}
			],
			"description": "Set the full selection to the specified entity. "
		},
		{
			"name": "Misc_SetDefaultCommandsEnabled",
			"returnType": "void",
			"parameters": [
				{"name": "enabled", "type": "bool", "optional": false}
			],
			"description": "Enables/disables right-click command input. "
		},
		{
			"name": "Misc_SetDesignerSplatsVisibility",
			"returnType": "void",
			"parameters": [
				{"name": "bVisible", "type": "bool", "optional": false}
			],
			"description": "Shows or hides designer splats, which are splats in the UI folder "
		},
		{
			"name": "Misc_SetEntityControlGroup",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "groupIndex", "type": "int", "optional": false}
			],
			"description": "Makes an entity belong to a specific control group. If it already belongs to another control group, it's removed from that one before being added to the new one. "
		},
		{
			"name": "Misc_SetEntitySelectable",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "selectable", "type": "bool", "optional": false}
			],
			"description": "Disable/enable selectability of the specified entity. "
		},
		{
			"name": "Misc_SetSelectionInputEnabled",
			"returnType": "void",
			"parameters": [
				{"name": "enabled", "type": "bool", "optional": false}
			],
			"description": "Enables/disables selection input. "
		},
		{
			"name": "Misc_SetSquadControlGroup",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "groupIndex", "type": "int", "optional": false}
			],
			"description": "Makes a squad belong to a specific control group. If it already belongs to another control group, it's removed from that one before being added to the new one. "
		},
		{
			"name": "Misc_SetSquadSelectable",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "selectable", "type": "bool", "optional": false}
			],
			"description": "Disable/enable selectability of the specified squad. "
		},
		{
			"name": "Mission_Complete",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Plays the defined end cinematic and ends an SP scenario with a Victory. "
		},
		{
			"name": "Mission_Fail",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Ends an SP scenario with a Failure. "
		},
		{
			"name": "Mission_GetSecondaryObjective",
			"returnType": "Table objective",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Return a reference to the Secondary Objective table. Nil if objective has not been started yet. "
		},
		{
			"name": "Mission_StartBonusObjective",
			"returnType": "Void",
			"parameters": [
				{"name": "showTitle", "type": "Bool", "optional": false},
				{"name": "skipIntel[", "type": "Bool", "optional": false},
				{"name": "index", "type": "Int", "optional": false}
			],
			"description": "Selects a possible secondary objective and starts it. \n'index' can be used to override the random selection and load a specific secondary objective.\n<em>References: </em><a href=\"http://relicwiki.relic.sega.us/display/REL/Slottable+Secondary+Objectives\" target=\"_blank\">[Slottable+Secondary+Objectives]</a>"
		},
		{
			"name": "Mission_Win",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Ends an SP scenario with a Victory without playing any end cinematics. "
		},
		{
			"name": "Modifier_ApplyToEntity",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "modifier", "type": "const Modifier*", "optional": false},
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Applies an entity modifier to an entity. "
		},
		{
			"name": "Modifier_ApplyToPlayer",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "modifier", "type": "const Modifier*", "optional": false},
				{"name": "player", "type": "ModPlayer*", "optional": false}
			],
			"description": "Applies a player modifier to a player. "
		},
		{
			"name": "Modifier_ApplyToSquad",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "modifier", "type": "const Modifier*", "optional": false},
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Applies a squad modifier to a squad. "
		},
		{
			"name": "Modifier_Create",
			"returnType": "const Modifier*",
			"parameters": [
				{"name": "applicationType", "type": "Modifier::ModifierApplicationType", "optional": false},
				{"name": "modtype", "type": "const char*", "optional": false},
				{"name": "usageType", "type": "Modifier::ModifierUsageType", "optional": false},
				{"name": "exclusive", "type": "bool", "optional": false},
				{"name": "value", "type": "float", "optional": false},
				{"name": "v", "type": "LuaBinding::StackVar", "optional": false}
			],
			"description": "Returns a modifier that you can apply to stuff. \n applicationType : MAT_EntityType, MAT_Entity, MAT_Player, MAT_Squad, MAT_SquadType, or MAT_Weapon.&lt;BR/&gt; modtype : Name of modifier from the modifiers table in the attribute editor.&lt;BR/&gt; usageType : MUT_Addition, MUT_Multiplication, MUT_MultiplyAdd or MUT_Enable.&lt;BR/&gt; exclusive : This field is not currently used for modifiers created through script. &lt;BR/&gt; value : The value for the modifier.&lt;BR/&gt; extname : The name of the entity/squad blueprint for when the applicationType is MAT_EntityType or MAT_SquadType."
		},
		{
			"name": "Modifier_Destroy",
			"returnType": "void",
			"parameters": [
				{"name": "modifier", "type": "const Modifier*", "optional": false}
			],
			"description": "Todo. "
		},
		{
			"name": "Modifier_IsEnabled",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity*", "optional": false},
				{"name": "modtype", "type": "const char*", "optional": false},
				{"name": "bEnabledByDefault", "type": "bool", "optional": false}
			],
			"description": "Checks whether the modifier is enabled (requires an Entity and an Entity enable/disable modifier) "
		},
		{
			"name": "nis_setintransitiontime",
			"returnType": "void",
			"parameters": [
				{"name": "numSeconds", "type": "float", "optional": false}
			],
			"description": "Sets the number of seconds it takes to transition from game to nis, 0 is instantaneous \nThis includes blending the camera position, fov and clip planes"
		},
		{
			"name": "nis_setouttransitionnis",
			"returnType": "void",
			"parameters": [
				{"name": "filename", "type": "const char*", "optional": false}
			],
			"description": "Lets the nis system know which nis will be transitioned to when the first one ends. \nThis function doesn't actually trigger a second nis to start, rather it lets the NIS system know which one will be next, so it can prevent the camera from popping back to the game camera."
		},
		{
			"name": "nis_setouttransitiontime",
			"returnType": "void",
			"parameters": [
				{"name": "numSeconds", "type": "float", "optional": false}
			],
			"description": "Sets the number of seconds it takes to transition from nis back to game, 0 is instantaneous \nThis includes blending the camera position, fov and clip planes"
		},
		{
			"name": "Obj_Create",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "title", "type": "LocString", "optional": false},
				{"name": "desc", "type": "LocString", "optional": false},
				{"name": "icon", "type": "const char*", "optional": false},
				{"name": "type", "type": "Objective::Type", "optional": false},
				{"name": "parentID", "type": "int", "optional": false}
			],
			"description": "Create an objective and returns the unique ID for it \ntype could either be OT_Primary or OT_Secondary"
		},
		{
			"name": "Obj_Delete",
			"returnType": "void",
			"parameters": [
				{"name": "objectiveID", "type": "int", "optional": false}
			],
			"description": "Delete the objective with the specified ID "
		},
		{
			"name": "Obj_DeleteAll",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Delete all objectives "
		},
		{
			"name": "Obj_GetState",
			"returnType": "Objective::State",
			"parameters": [
				{"name": "objectiveID", "type": "int", "optional": false}
			],
			"description": "Get objective state ( OS_Off, OS_Incomplete, OS_Complete, OS_Failed ) (not strict) "
		},
		{
			"name": "Obj_GetVisible",
			"returnType": "bool",
			"parameters": [
				{"name": "objectiveID", "type": "int", "optional": false}
			],
			"description": "Get objective visibility  (not strict) "
		},
		{
			"name": "Obj_HideProgress",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Hide the objective progress panel. "
		},
		{
			"name": "Obj_SetDescription",
			"returnType": "void",
			"parameters": [
				{"name": "objectiveID", "type": "int", "optional": false},
				{"name": "desc", "type": "LocString", "optional": false}
			],
			"description": "Set description text localization ID for the objective "
		},
		{
			"name": "Obj_SetIcon",
			"returnType": "void",
			"parameters": [
				{"name": "objectiveID", "type": "int", "optional": false},
				{"name": "icon", "type": "const char*", "optional": false}
			],
			"description": "Set icon path for the objective "
		},
		{
			"name": "Obj_SetObjectiveFunction",
			"returnType": "void",
			"parameters": [
				{"name": "id", "type": "int", "optional": false},
				{"name": "fnType", "type": "Objective::ObjectiveFn", "optional": false},
				{"name": "f", "type": "LuaConfig::RefFunction", "optional": false}
			],
			"description": "Set callback functions for the objective.  (not strict) \nFN_OnActivate is for triggering situation report. FN_OnShow is used to assign UI element when tactical map is open. FN_OnSelect is used to assign UI element when the objective is highlighted"
		},
		{
			"name": "Obj_SetProgressBlinking",
			"returnType": "void",
			"parameters": [
				{"name": "blinking", "type": "bool", "optional": false}
			],
			"description": "Make the objective progress bar blink or stop blinking. "
		},
		{
			"name": "Obj_SetState",
			"returnType": "void",
			"parameters": [
				{"name": "objectiveID", "type": "int", "optional": false},
				{"name": "state", "type": "Objective::State", "optional": false}
			],
			"description": "Set objective state ( OS_Off, OS_Incomplete, OS_Complete, OS_Failed ) "
		},
		{
			"name": "Obj_SetTitle",
			"returnType": "void",
			"parameters": [
				{"name": "objectiveID", "type": "int", "optional": false},
				{"name": "title", "type": "LocString", "optional": false}
			],
			"description": "Set title text localization ID for the objective "
		},
		{
			"name": "Obj_SetVisible",
			"returnType": "void",
			"parameters": [
				{"name": "objectiveID", "type": "int", "optional": false},
				{"name": "visible", "type": "bool", "optional": false}
			],
			"description": "Set objective visibility "
		},
		{
			"name": "Obj_ShowProgress",
			"returnType": "void",
			"parameters": [
				{"name": "title", "type": "LocString", "optional": false},
				{"name": "progress", "type": "float", "optional": false}
			],
			"description": "Show the objective progress panel with a progress bar - call repeatedly to update progress.  Value should be normalized between [0 - 1]. "
		},
		{
			"name": "Obj_ShowProgress2",
			"returnType": "void",
			"parameters": [
				{"name": "title", "type": "LocString", "optional": false},
				{"name": "progress", "type": "float", "optional": false}
			],
			"description": "Show the objective progress panel with a progress bar - call repeatedly to update progress.  Value should be normalized between [0 - 1].  Appears in center of screen. "
		},
		{
			"name": "Obj_ShowProgressTimer",
			"returnType": "void",
			"parameters": [
				{"name": "title", "type": "LocString", "optional": false},
				{"name": "progress", "type": "float", "optional": false}
			],
			"description": "Show the objective progress panel with a timer icon - call repeatedly to update progress.  Value should be in seconds. "
		},
		{
			"name": "OpBounty_AddRewardGroup",
			"returnType": "GroupTable table",
			"parameters": [
				{"name": "groupTable", "type": "Table", "optional": false}
			],
			"description": "Does things \n"
		},
		{
			"name": "OpBounty_AddRewardTable",
			"returnType": "GroupTable table",
			"parameters": [
				{"name": "groupTable", "type": "Table", "optional": false}
			],
			"description": "Does things \n"
		},
		{
			"name": "Order227_Init",
			"returnType": "Void",
			"parameters": [
				{"name": "timeLimit", "type": "Integer", "optional": true},
				{"name": "timeBetweenShots", "type": "Integer", "optional": true},
				{"name": "noMercy", "type": "Boolean", "optional": true}
			],
			"description": "Enable the HQ Commissar in CoH2 campaign missions. The noMercy flag allows the Commissar to execute more than one member of each squad. "
		},
		{
			"name": "PrintOnScreen",
			"returnType": "Void",
			"parameters": [
				{"name": "text", "type": "String", "optional": false}
			],
			"description": "Prints a message on the screen \n Prints the given message on the screen. It will stay there until you call PrintOnScreen_RemoveFromScreen() or print another message on the screen to replace it."
		},
		{
			"name": "PrintOnScreen_Add",
			"returnType": "PrintOnScreenID",
			"parameters": [
				{"name": "object", "type": "Object", "optional": false},
				{"name": "id[", "type": "String", "optional": false},
				{"name": "style", "type": "String", "optional": false}
			],
			"description": "Prints the lua content of an object on the screen \n Prints the given message on the screen. If you would like to print multiple messages without clearing them you can assign them unique ID's. Must use PrintOnScreen_Remove(id) to remove each instance"
		},
		{
			"name": "PrintOnScreen_Remove",
			"returnType": "Void",
			"parameters": [
				{"name": "id", "type": "String", "optional": false}
			],
			"description": "Removes the PrintOnScreen text of a given ID "
		},
		{
			"name": "PrintOnScreen_RemoveFromScreen",
			"returnType": "Void",
			"parameters": [
				{"name": "", "type": "", "optional": false}
			],
			"description": "Remove any messages from the screen \n Removes from the screen any messages put there with PrintOnScreen()"
		},
		{
			"name": "ResourceAmount_Add",
			"returnType": "ResourceAmount",
			"parameters": [
				{"name": "amt1", "type": "ResourceAmount", "optional": false},
				{"name": "amt2", "type": "ResourceAmount", "optional": false}
			],
			"description": "Add each element of the two passed in ResourceAmounts together "
		},
		{
			"name": "ResourceAmount_ClampToZero",
			"returnType": "ResourceAmount",
			"parameters": [
				{"name": "amt", "type": "ResourceAmount", "optional": false}
			],
			"description": "Clamps the passed in resource to zero if it has any negative numbers "
		},
		{
			"name": "ResourceAmount_Has",
			"returnType": "bool",
			"parameters": [
				{"name": "amt1", "type": "ResourceAmount", "optional": false},
				{"name": "amt2", "type": "ResourceAmount", "optional": false}
			],
			"description": "Returns true if the first amount has enough resources for the second amount (amt2) "
		},
		{
			"name": "ResourceAmount_Mult",
			"returnType": "ResourceAmount",
			"parameters": [
				{"name": "amt1", "type": "ResourceAmount", "optional": false},
				{"name": "mult", "type": "float", "optional": false}
			],
			"description": "Take a resource amount and multiply each value inside of it by mult "
		},
		{
			"name": "ResourceAmount_Subtract",
			"returnType": "ResourceAmount",
			"parameters": [
				{"name": "amt1", "type": "ResourceAmount", "optional": false},
				{"name": "amt2", "type": "ResourceAmount", "optional": false}
			],
			"description": "Subtract the second amount from the first and return the new ResourceAmount "
		},
		{
			"name": "ResourceAmount_Sum",
			"returnType": "float",
			"parameters": [
				{"name": "amt1", "type": "ResourceAmount", "optional": false}
			],
			"description": "Add up all the numbers in the resource and return a single value "
		},
		{
			"name": "ResourceAmount_Zero",
			"returnType": "ResourceAmount",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Creates a new ResourceAmount all set to zero "
		},
		{
			"name": "Scar_Autosave",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Saves the game. the savegame name is built using the abbreviated mission name + checkpoint. "
		},
		{
			"name": "Scar_CompleteIntelBulletinTask",
			"returnType": "void",
			"parameters": [
				{"name": "pCompleter", "type": "Player*", "optional": false},
				{"name": "taskId", "type": "const char*", "optional": false}
			],
			"description": "Complete a intel bulletin task of campaign type "
		},
		{
			"name": "Scar_DebugConsoleExecute",
			"returnType": "void",
			"parameters": [
				{"name": "command", "type": "const char*", "optional": false}
			],
			"description": "execute console command string. Will only work if dev mode is enabled! (it's OFF by default in RTM builds) "
		},
		{
			"name": "Scar_PlayNIS",
			"returnType": "void",
			"parameters": [
				{"name": "filename", "type": "const char*", "optional": false}
			],
			"description": "Play NIS through SCAR. Should only be used inside a event function "
		},
		{
			"name": "Scar_PlayNIS2",
			"returnType": "void",
			"parameters": [
				{"name": "filename1", "type": "const char*", "optional": false},
				{"name": "filename2", "type": "const char*", "optional": false}
			],
			"description": "Play 2 NISs through SCAR. Should only be used inside a event function "
		},
		{
			"name": "Scar_ReloadAIScripts",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Reloads AI Scripts "
		},
		{
			"name": "Setup_GetVictoryPointTickerOption",
			"returnType": "float",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Get the victory point ticker option selected "
		},
		{
			"name": "Setup_SetPlayerName",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "name", "type": "LocString", "optional": false}
			],
			"description": "Set the UI name of a given player. "
		},
		{
			"name": "Setup_SetPlayerRace",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "raceIndex", "type": "uint32_t", "optional": false}
			],
			"description": "Set the race for a given player.  Use World_GetRaceIndex() to get the race id from the ME name. "
		},
		{
			"name": "Setup_SetPlayerTeam",
			"returnType": "void",
			"parameters": [
				{"name": "p", "type": "ModPlayer*", "optional": false},
				{"name": "team_id", "type": "int", "optional": false}
			],
			"description": "Put a player in a team. Use TEAM_NEUTRAL as the team_id to set the player as neutral "
		},
		{
			"name": "SGroup_CallEntityFunction",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "entityFunction", "type": "Function", "optional": false}
			],
			"description": "Calls an Entity_ function on every entity in an sgroup \nThe first parameter of the supplied function must be EntityID"
		},
		{
			"name": "SGroup_CallSquadFunction",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "squadFunction", "type": "Function", "optional": false},
				{"name": "list", "type": "variable!argument", "optional": false}
			],
			"description": "Calls a Squad_ function on every squad in an sgroup \nThe first parameter of the supplied function must be SquadID"
		},
		{
			"name": "SGroup_CallSquadFunctionAllOrAny",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false},
				{"name": "squadFunction", "type": "Function", "optional": false},
				{"name": "list", "type": "variable!argument", "optional": false}
			],
			"description": "Returns whether ALL or ANY squads in an sgroup satisfy a condition, using a Squad_ function to perform the query on each squad \nThe first parameter of the supplied function must be SquadID"
		},
		{
			"name": "SitRep_PlayMovie",
			"returnType": "void",
			"parameters": [
				{"name": "url", "type": "const char*", "optional": false}
			],
			"description": "Play the specified movie. "
		},
		{
			"name": "SitRep_PlaySpeech",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "icon", "type": "const char*", "optional": false},
				{"name": "loc", "type": "LocString", "optional": false},
				{"name": "disableIconSubtitle", "type": "bool", "optional": false},
				{"name": "continueButton", "type": "bool", "optional": false},
				{"name": "blockInput", "type": "bool", "optional": false},
				{"name": "stickySubtitle", "type": "bool", "optional": false},
				{"name": "additionalPath", "type": "const char*", "optional": false}
			],
			"description": "Deprecated. \nCall UI_TitleDestroy to remove."
		},
		{
			"name": "SitRep_StopMovie",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Stop the currently playing movie. "
		},
		{
			"name": "Sound_ContainerDebug",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Turns container debugging on/off"
		},
		{
			"name": "Sound_DisableSpeechEvent",
			"returnType": "void",
			"parameters": [
				{"name": "event", "type": "int", "optional": false}
			],
			"description": "Disables certain speech events. "
		},
		{
			"name": "Sound_IsPlaying",
			"returnType": "bool",
			"parameters": [
				{"name": "handle", "type": "size_t", "optional": false}
			],
			"description": "Returns true if the sound associated with the handle is currently playing. "
		},
		{
			"name": "Sound_PerfTest_Play2D",
			"returnType": "void",
			"parameters": [
				{"name": "name", "type": "const char*", "optional": false},
				{"name": "instances", "type": "size_t", "optional": false}
			],
			"description": "Starts multiple 2D instances of the same sound. "
		},
		{
			"name": "Sound_Play2D",
			"returnType": "size_t",
			"parameters": [
				{"name": "name", "type": "const char*", "optional": false}
			],
			"description": "Plays a 2D sound from the Data:Sound folder.  Use the path relative to Sound folder without the file extension. Returns handle to the sound container \nThe sound needs to be 2D Example:&lt;BR/&gt;&lt;BR/&gt; &lt;TAB/&gt;Sound_Play( \"Blah/Mysound\" )&lt;BR/&gt;"
		},
		{
			"name": "Sound_Play3D",
			"returnType": "size_t",
			"parameters": [
				{"name": "name", "type": "const char*", "optional": false},
				{"name": "actor", "type": "Entity*", "optional": false}
			],
			"description": "Plays a 3D sound from the Data:Sound folder on the entity.  Use the path relative to Sound folder without the file extension. Returns handle to the sound container \nThe sound needs to be 3D Example:&lt;BR/&gt;&lt;BR/&gt; &lt;TAB/&gt;Sound_Play( \"Speech/SpaceMarine/AddOnComplete\", TheActor )&lt;BR/&gt;"
		},
		{
			"name": "Sound_PlayMusic",
			"returnType": "void",
			"parameters": [
				{"name": "name", "type": "const char*", "optional": false},
				{"name": "fade", "type": "float", "optional": false},
				{"name": "delay", "type": "float", "optional": false}
			],
			"description": "Plays music from the Data:Sound folder. \nThe new music will phase out the old one. There can only be one music playing at anytime besides the transition fade is the time to fade in the music;  delay is the time in seconds to wait until the new music is started Example:&lt;BR/&gt;&lt;BR/&gt; &lt;TAB/&gt;Sound_PlayMusic( \"Music/GreatMusic\", 0.0, 0.0 )&lt;BR/&gt;"
		},
		{
			"name": "Sound_PlayStreamed",
			"returnType": "size_t",
			"parameters": [
				{"name": "name", "type": "const char*", "optional": false}
			],
			"description": "Plays a streaming sound from the Data:Sound folder.  Use the path relative to Sound folder without the file extension. Returns handle to the sound container \nThe sound needs to be 2D Example:&lt;BR/&gt;&lt;BR/&gt; &lt;TAB/&gt;Sound_PlayStreamed( \"Blah/Mysound\" )&lt;BR/&gt;"
		},
		{
			"name": "Sound_PreCacheSinglePlayerSpeech",
			"returnType": "void",
			"parameters": [
				{"name": "mission", "type": "const char*", "optional": false}
			],
			"description": "Pre-caches single player speech. For instance pre-caching mission 1 speech is done like: Sound_PreCacheSinglePlayerSpeech(\"mission01\") "
		},
		{
			"name": "Sound_PreCacheSound",
			"returnType": "void",
			"parameters": [
				{"name": "name", "type": "const char*", "optional": false}
			],
			"description": "pre-caches a sound \n Example:&lt;BR/&gt;&lt;BR/&gt; &lt;TAB/&gt;Sound_PreCacheSound(\"nis/m02_n01_full\")&lt;BR/&gt;"
		},
		{
			"name": "Sound_PreCacheSoundFolder",
			"returnType": "void",
			"parameters": [
				{"name": "name", "type": "const char*", "optional": false}
			],
			"description": "pre-caches a sound folder \n Example:&lt;BR/&gt;&lt;BR/&gt; &lt;TAB/&gt;Sound_PreCacheSoundFolder(\"sp/mission1\")&lt;BR/&gt;"
		},
		{
			"name": "Sound_SetGlobalControlSource",
			"returnType": "void",
			"parameters": [
				{"name": "name", "type": "const char*", "optional": false},
				{"name": "value", "type": "float", "optional": false}
			],
			"description": "Sets the value for a global control source."
		},
		{
			"name": "Sound_SetMusicCombatValue",
			"returnType": "void",
			"parameters": [
				{"name": "immCombatValue", "type": "float", "optional": false},
				{"name": "overrideTime", "type": "float", "optional": false}
			],
			"description": "immCombatValue is the new music combat value.  Override time is in seconds.  You can call this function with 0 for both values in order to cancel the override. "
		},
		{
			"name": "Sound_SetVolume",
			"returnType": "void",
			"parameters": [
				{"name": "name", "type": "const char*", "optional": false},
				{"name": "volume", "type": "float", "optional": false},
				{"name": "time", "type": "float", "optional": false}
			],
			"description": "Sets a new volume for the group.  Valid volume values are 0 to 1. \n Example:&lt;BR/&gt;&lt;BR/&gt; &lt;TAB/&gt;Sound_Volume(\"Weapons\", 0.5, 2)&lt;BR/&gt;"
		},
		{
			"name": "Sound_SetVolumeDefault",
			"returnType": "void",
			"parameters": [
				{"name": "name", "type": "const char*", "optional": false},
				{"name": "time", "type": "float", "optional": false}
			],
			"description": "Sets the default volume for the group. \n Example:&lt;BR/&gt;&lt;BR/&gt; &lt;TAB/&gt;Sound_SetVolumeDefault(\"Weapons\", 2)&lt;BR/&gt;"
		},
		{
			"name": "Sound_SetVolumeInv",
			"returnType": "void",
			"parameters": [
				{"name": "name", "type": "const char*", "optional": false},
				{"name": "volume", "type": "float", "optional": false},
				{"name": "time", "type": "float", "optional": false}
			],
			"description": "Sets the volume for all groups except the one specified.  Valid volume values are 0 to 1. \n Example:&lt;BR/&gt;&lt;BR/&gt; &lt;TAB/&gt;Sound_VolumeInv(\"NIS\", 0.5, 2)&lt;BR/&gt;"
		},
		{
			"name": "Sound_StartRecording",
			"returnType": "void",
			"parameters": [
				{"name": "name", "type": "const char*", "optional": false}
			],
			"description": "Starts recording the sound driver output \n Example:&lt;BR/&gt;&lt;BR/&gt; &lt;TAB/&gt;Sound_StartRecording(\"Recordings/MyRecording.wav\")&lt;BR/&gt;"
		},
		{
			"name": "Sound_Stop",
			"returnType": "void",
			"parameters": [
				{"name": "handle", "type": "size_t", "optional": false}
			],
			"description": "Stops sound associated with the container handle "
		},
		{
			"name": "Sound_StopAll",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Stops all sounds associated with the container manager. "
		},
		{
			"name": "Sound_StopMusic",
			"returnType": "void",
			"parameters": [
				{"name": "fade", "type": "float", "optional": false},
				{"name": "delay", "type": "float", "optional": false}
			],
			"description": "Stop current playing music \nCurrently playing music would be stopped. If nothing is playing, nothing will happen fade is the time to fade out the music;  delay is the time in seconds wait until the new music is stopped Example:&lt;BR/&gt;&lt;BR/&gt; &lt;TAB/&gt;Sound_StopMusic( 2.0, 0.0 )&lt;BR/&gt;"
		},
		{
			"name": "Sound_StopRecording",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Stops recording the sound driver output \n Example:&lt;BR/&gt;&lt;BR/&gt; &lt;TAB/&gt;Sound_StopRecording()&lt;BR/&gt;"
		},
		{
			"name": "Speech_SetGlobalStealthRead",
			"returnType": "void",
			"parameters": [
				{"name": "sunlightThreshold", "type": "float", "optional": false}
			],
			"description": "Overrides default stealth speech auto-detect mechanism. Stealth speech will play when sunlight brightness is below the threshold, with 0 being total darkness and 1 being full brightness. Set to -1 to use the default behavior. "
		},
		{
			"name": "statgraph",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "?? "
		},
		{
			"name": "statgraph_channel",
			"returnType": "void",
			"parameters": [
				{"name": "*channel", "type": "const char", "optional": false}
			],
			"description": "?? "
		},
		{
			"name": "statgraph_channel_get_enabled",
			"returnType": "bool",
			"parameters": [
				{"name": "*channel", "type": "const char", "optional": false}
			],
			"description": "?? "
		},
		{
			"name": "statgraph_channel_set_enabled",
			"returnType": "void",
			"parameters": [
				{"name": "*channel", "type": "const char", "optional": false},
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "?? "
		},
		{
			"name": "statgraph_clear",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "?? "
		},
		{
			"name": "statgraph_list",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "?? "
		},
		{
			"name": "statgraph_pause",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "?? "
		},
		{
			"name": "Subtitle_EndAllSpeech",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Prematurely finish all queued speech \nThis is useful for skipping all speech events that may have been queued"
		},
		{
			"name": "Subtitle_EndCurrentSpeech",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Prematurely finish currently playing speech and advance the next one in queue \nThis is useful for skipping speech events"
		},
		{
			"name": "Subtitle_PlaySpeech",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "icon", "type": "const char*", "optional": false},
				{"name": "loc", "type": "LocString", "optional": false},
				{"name": "disableIconSubtitle", "type": "bool", "optional": false},
				{"name": "continueButton", "type": "bool", "optional": false},
				{"name": "blockInput", "type": "bool", "optional": false},
				{"name": "stickySubtitle", "type": "bool", "optional": false},
				{"name": "additionalPath", "type": "const char*", "optional": false}
			],
			"description": "Plays a global speech with subtitle and actor icon in the overlay \nCall UI_TitleDestroy to remove."
		},
		{
			"name": "Subtitle_UnstickCurrentSpeech",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Removes \"sticky\" state from currently playing speech (if any) "
		},
		{
			"name": "SyncWeapon_CanAttackNow",
			"returnType": "Boolean",
			"parameters": [
				{"name": "weapon", "type": "SyncWeaponID", "optional": false},
				{"name": "target", "type": "egroup/sgroup/pos/marker", "optional": false}
			],
			"description": "Checks whether a sync weapon can attack a target without moving or turning. "
		},
		{
			"name": "SyncWeapon_Exists",
			"returnType": "Boolean",
			"parameters": [
				{"name": "weapon", "type": "SyncWeaponID", "optional": false}
			],
			"description": "Returns true if a sync weapon still exists in the game world "
		},
		{
			"name": "SyncWeapon_GetEntity",
			"returnType": "EntityID",
			"parameters": [
				{"name": "weapon", "type": "SyncWeaponID", "optional": false}
			],
			"description": "Returns the EntityID of a sync weapon, or nil if it's been destroyed "
		},
		{
			"name": "SyncWeapon_GetFromEGroup",
			"returnType": "SyncWeaponID",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false}
			],
			"description": "Registers the sync weapon in the egroup and returns a SyncWeaponID you can use to keep track of it "
		},
		{
			"name": "SyncWeapon_GetFromSGroup",
			"returnType": "SyncWeaponID",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false}
			],
			"description": "Registers the sync weapon in the sgroup and returns a SyncWeaponID you can use to keep track of it "
		},
		{
			"name": "SyncWeapon_GetPosition",
			"returnType": "Position",
			"parameters": [
				{"name": "weapon", "type": "SyncWeaponID", "optional": false}
			],
			"description": "Returns the position of a sync weapon, or nil if it's been destroyed "
		},
		{
			"name": "SyncWeapon_IsAttacking",
			"returnType": "Boolean",
			"parameters": [
				{"name": "weapon", "type": "SyncWeaponID", "optional": false},
				{"name": "time", "type": "Real", "optional": false}
			],
			"description": "Checks whether or not the actual sync weapon in a squad attacking. "
		},
		{
			"name": "SyncWeapon_IsOwnedByPlayer",
			"returnType": "Boolean",
			"parameters": [
				{"name": "weapon", "type": "SyncWeaponID", "optional": false},
				{"name": "player", "type": "PlayerID", "optional": true}
			],
			"description": "Returns true if the specified player owns the sync weapon. Use a playerid of nil to see if it's unonwed. \nIf player is not specified, then the code will check to see if the SyncWeapon is owned by the world."
		},
		{
			"name": "SyncWeapon_SetAutoTargetting",
			"returnType": "Void",
			"parameters": [
				{"name": "weapon", "type": "SyncWeaponID", "optional": false},
				{"name": "hardpoint", "type": "String", "optional": false},
				{"name": "enable", "type": "Bool", "optional": false}
			],
			"description": "Sets whether a weapon to auto-target things or not "
		},
		{
			"name": "Taskbar_IsVisible",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns true if the taskbar is visible. (not strict) "
		},
		{
			"name": "Taskbar_SetVisibility",
			"returnType": "void",
			"parameters": [
				{"name": "visible", "type": "bool", "optional": false}
			],
			"description": "Sets taskbar visibility. "
		},
		{
			"name": "TaskCountActivePBG",
			"returnType": "size_t",
			"parameters": [
				{"name": "pPlayer", "type": "AIPlayer*", "optional": false},
				{"name": "pbg", "type": "const PropertyBagGroup*", "optional": false},
				{"name": "buildtype", "type": "<a href=\"enum_list.htm#ProductionItemType\">ProductionItemType</a>", "optional": false},
				{"name": "bCheckState", "type": "bool", "optional": false},
				{"name": "bCheckActive", "type": "bool", "optional": false}
			],
			"description": "Determine how many tasks with the given PBG are of the provided active state, passing no last parameters means to check both "
		},
		{
			"name": "TaskCountPBG",
			"returnType": "size_t",
			"parameters": [
				{"name": "pPlayer", "type": "const AIPlayer*", "optional": false},
				{"name": "pbg", "type": "const PropertyBagGroup*", "optional": false},
				{"name": "buildtype", "type": "<a href=\"enum_list.htm#ProductionItemType\">ProductionItemType</a>", "optional": false}
			],
			"description": "Determine how many requested are currently created for this pbg "
		},
		{
			"name": "UI_AutosaveMessageHide",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Removes a message added by UI_AutosaveMessageShow. "
		},
		{
			"name": "UI_AutosaveMessageShow",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Shows a message indicating that the game is autosaving. \nCall UI_AutosaveMessageHide to remove the message."
		},
		{
			"name": "UI_ClearEventCues",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Clears all active event cues "
		},
		{
			"name": "UI_ClearModalAbilityPhaseCallback",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Clears the ability phase callback. "
		},
		{
			"name": "UI_ClearNISEndCallback",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Clears the callback function called at the current NIS. "
		},
		{
			"name": "UI_CoverPreviewHide",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Toggle off cover preview. Each call to UI_CoverPreviewHide must be matched by a call to UI_CoverPreviewShow "
		},
		{
			"name": "UI_CoverPreviewShow",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Toggle on cover preview. Each call to UI_CoverPreviewShow must be matched by a call to UI_CoverPreviewHide "
		},
		{
			"name": "UI_CreateColouredEntityKickerMessage",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "message", "type": "LocString", "optional": false},
				{"name": "red", "type": "int", "optional": false},
				{"name": "green", "type": "int", "optional": false},
				{"name": "blue", "type": "int", "optional": false},
				{"name": "alpha", "type": "int", "optional": false}
			],
			"description": "Create a coloured custom kicker message on the entity and display to the player, rgb values are 0-255. "
		},
		{
			"name": "UI_CreateColouredPositionKickerMessage",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "position", "type": "ScarPosition", "optional": false},
				{"name": "message", "type": "LocString", "optional": false},
				{"name": "red", "type": "int", "optional": false},
				{"name": "green", "type": "int", "optional": false},
				{"name": "blue", "type": "int", "optional": false},
				{"name": "alpha", "type": "int", "optional": false}
			],
			"description": "Create a coloured custom kicker message on the entity and display to the player, rgb values are 0-255. "
		},
		{
			"name": "UI_CreateColouredSquadKickerMessage",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "message", "type": "LocString", "optional": false},
				{"name": "red", "type": "int", "optional": false},
				{"name": "green", "type": "int", "optional": false},
				{"name": "blue", "type": "int", "optional": false},
				{"name": "alpha", "type": "int", "optional": false}
			],
			"description": "Create a coloured custom kicker message on the entity and display to the player, rgb values are 0-255. "
		},
		{
			"name": "UI_CreateEntityKickerMessage",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "message", "type": "LocString", "optional": false}
			],
			"description": "Create a custom kicker message on the entity and display to the player. "
		},
		{
			"name": "UI_CreatePositionKickerMessage",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "position", "type": "ScarPosition", "optional": false},
				{"name": "message", "type": "LocString", "optional": false}
			],
			"description": "Create a custom kicker message on the entity and display to the player. "
		},
		{
			"name": "UI_CreateSquadKickerMessage",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false},
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "message", "type": "LocString", "optional": false}
			],
			"description": "Create a custom kicker message on the entity and display to the player. "
		},
		{
			"name": "UI_EnableGameEventCueType",
			"returnType": "void",
			"parameters": [
				{"name": "gameEventType", "type": "<a href=\"enum_list.htm#GameEventType\">GameEventType</a>", "optional": false},
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enables or disables event cues. "
		},
		{
			"name": "UI_EnableResourceTypeKicker",
			"returnType": "void",
			"parameters": [
				{"name": "resourceType", "type": "ResourceAmount::ResourceType", "optional": false},
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enables or disables resource kickers. "
		},
		{
			"name": "UI_EnableUIEventCueType",
			"returnType": "void",
			"parameters": [
				{"name": "uiEventType", "type": "<a href=\"enum_list.htm#UIEventType\">UIEventType</a>", "optional": false},
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enables or disables event cues. "
		},
		{
			"name": "UI_FlashAbilityButton",
			"returnType": "size_t",
			"parameters": [
				{"name": "ability", "type": "ScarAbilityPBG", "optional": false},
				{"name": "stopOnClick", "type": "bool", "optional": false}
			],
			"description": "Flash an ability command button.  Pass the return value to UI_StopFlashing to stop flashing the button. "
		},
		{
			"name": "UI_FlashConstructionButton",
			"returnType": "size_t",
			"parameters": [
				{"name": "ebp", "type": "ScarEntityPBG", "optional": false},
				{"name": "stopOnClick", "type": "bool", "optional": false}
			],
			"description": "Flash a construction item command button.  Pass the return value to UI_StopFlashing to stop flashing the button. "
		},
		{
			"name": "UI_FlashConstructionMenu",
			"returnType": "size_t",
			"parameters": [
				{"name": "menuName", "type": "const char*", "optional": false},
				{"name": "stopOnClick", "type": "bool", "optional": false}
			],
			"description": "Flash a construction menu command button.  Pass the return value to UI_StopFlashing to stop flashing the button. "
		},
		{
			"name": "UI_FlashEntity",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false},
				{"name": "actionOnName", "type": "const char*", "optional": false}
			],
			"description": "Flashes the entity using attributes from [tuning][ui] "
		},
		{
			"name": "UI_FlashEntityCommandButton",
			"returnType": "size_t",
			"parameters": [
				{"name": "command", "type": "<a href=\"enum_list.htm#EntityCommandType\">EntityCommandType</a>", "optional": false},
				{"name": "stopOnClick", "type": "bool", "optional": false}
			],
			"description": "Flash an entity order command button.  Pass the return value to UI_StopFlashing to stop flashing the button. "
		},
		{
			"name": "UI_FlashEventCue",
			"returnType": "size_t",
			"parameters": [
				{"name": "eventCueID", "type": "size_t", "optional": false},
				{"name": "stopOnClick", "type": "bool", "optional": false}
			],
			"description": "Flash an event cue item.  Pass the return value to UI_StopFlashing to stop flashing the button. "
		},
		{
			"name": "UI_FlashObjectiveCounter",
			"returnType": "size_t",
			"parameters": [
				{"name": "objectiveID", "type": "int", "optional": false}
			],
			"description": "Flash an objective counter.  Pass the return value to UI_StopFlashing to stop flashing the button. "
		},
		{
			"name": "UI_FlashObjectiveIcon",
			"returnType": "size_t",
			"parameters": [
				{"name": "objectiveID", "type": "int", "optional": false},
				{"name": "stopOnClick", "type": "bool", "optional": false}
			],
			"description": "Flash an objective.  Pass the return value to UI_StopFlashing to stop flashing the button. "
		},
		{
			"name": "UI_FlashProductionBuildingButton",
			"returnType": "size_t",
			"parameters": [
				{"name": "type", "type": "const char*", "optional": false},
				{"name": "stopOnClick", "type": "bool", "optional": false}
			],
			"description": "Flash a production building button.  Pass the return value to UI_StopFlashing to stop flashing the button. "
		},
		{
			"name": "UI_FlashProductionButton",
			"returnType": "size_t",
			"parameters": [
				{"name": "type", "type": "<a href=\"enum_list.htm#ProductionItemType\">ProductionItemType</a>", "optional": false},
				{"name": "pbg", "type": "const PropertyBagGroup*", "optional": false},
				{"name": "stopOnClick", "type": "bool", "optional": false}
			],
			"description": "Flash a production item command button.  Pass the return value to UI_StopFlashing to stop flashing the button. "
		},
		{
			"name": "UI_FlashSquadCommandButton",
			"returnType": "size_t",
			"parameters": [
				{"name": "command", "type": "<a href=\"enum_list.htm#SquadCommandType\">SquadCommandType</a>", "optional": false},
				{"name": "stopOnClick", "type": "bool", "optional": false}
			],
			"description": "Flash a squad order command button.  Pass the return value to UI_StopFlashing to stop flashing the button. "
		},
		{
			"name": "UI_GetDecoratorsEnabled",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns whether all decorators are enabled or not "
		},
		{
			"name": "UI_HideTacticalMap",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Hides the tactical map "
		},
		{
			"name": "UI_HighlightSquad",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false},
				{"name": "duration", "type": "float", "optional": false}
			],
			"description": "Turn on squad highlight UI feature for the specified duration. "
		},
		{
			"name": "UI_IsTacticalMapShown",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns whether the tactical map is being shown (not strict) "
		},
		{
			"name": "UI_MessageBoxHide",
			"returnType": "void",
			"parameters": [
				{"name": "button", "type": "Relic::COH2UI::ScarSystemConnector::DialogResult", "optional": false}
			],
			"description": "If the message box is activated, close it.  The callback will receive the button parameter given. "
		},
		{
			"name": "UI_MessageBoxSetButton",
			"returnType": "void",
			"parameters": [
				{"name": "dialogResult", "type": "Relic::COH2UI::ScarSystemConnector::DialogResult", "optional": false},
				{"name": "text", "type": "LocString", "optional": false},
				{"name": "tooltip", "type": "LocString", "optional": false},
				{"name": "bEnabled", "type": "bool", "optional": false}
			],
			"description": "Set the text/tooltip/enabled state of a button on the dialog. "
		},
		{
			"name": "UI_MessageBoxSetText",
			"returnType": "void",
			"parameters": [
				{"name": "title", "type": "LocString", "optional": false},
				{"name": "message", "type": "LocString", "optional": false}
			],
			"description": "Set the title and message body of the dialog. "
		},
		{
			"name": "UI_NewHUDFeature",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "newHUDFeature", "type": "GameUICore::HUDFeatureType", "optional": false},
				{"name": "featureText", "type": "LocString", "optional": false},
				{"name": "featureIcon", "type": "const char*", "optional": false},
				{"name": "duration", "type": "float", "optional": false}
			],
			"description": "Brings up a message and arrow pointing to a HUD feature. \nCall UI_TitleDestroy to remove."
		},
		{
			"name": "UI_OutOfBoundsLinesHide",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Toggle off terrain out of bounds lines. Each call to UI_OutOfBoundsLinesHide must be matched by a call to UI_OutOfBoundsLinesShow "
		},
		{
			"name": "UI_OutOfBoundsLinesShow",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Toggle on terrain out of bounds lines. Each call to UI_OutOfBoundsLinesShow must be matched by a call to UI_OutOfBoundsLinesShowHide "
		},
		{
			"name": "UI_RestrictBuildingPlacement",
			"returnType": "void",
			"parameters": [
				{"name": "marker", "type": "ScarMarker", "optional": false}
			],
			"description": "Only allow buildings to be placed inside a marker. "
		},
		{
			"name": "UI_ScreenFade",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "r", "type": "float", "optional": false},
				{"name": "g", "type": "float", "optional": false},
				{"name": "b", "type": "float", "optional": false},
				{"name": "a", "type": "float", "optional": false},
				{"name": "duration", "type": "float", "optional": false},
				{"name": "persistent", "type": "bool", "optional": false}
			],
			"description": "Fades the screen to a given RGBA colour over a number of seconds. mouse input is blocked during the fade, and you can control whether the input keeps being blocked after the fade has ended (be careful!) \nCall UI_TitleDestroy to remove."
		},
		{
			"name": "UI_SetAbilityCardVisibility",
			"returnType": "void",
			"parameters": [
				{"name": "visible", "type": "bool", "optional": false}
			],
			"description": "Sets the visibility of the Commander Ability card. "
		},
		{
			"name": "UI_SetAlliedBandBoxSelection",
			"returnType": "void",
			"parameters": [
				{"name": "allow", "type": "bool", "optional": false}
			],
			"description": "Sets the game to allow allied squads to be selected at the same time as your own squads "
		},
		{
			"name": "UI_SetCPMeterVisibility",
			"returnType": "void",
			"parameters": [
				{"name": "visible", "type": "bool", "optional": false}
			],
			"description": "Sets the visibility of the Command Point meter. "
		},
		{
			"name": "UI_SetDecoratorsEnabled",
			"returnType": "void",
			"parameters": [
				{"name": "enabled", "type": "bool", "optional": false}
			],
			"description": "Enables or disables all decorators "
		},
		{
			"name": "UI_SetForceShowSubtitles",
			"returnType": "void",
			"parameters": [
				{"name": "forceShowSubtitles", "type": "bool", "optional": false}
			],
			"description": "Sets the game to force show subtitles even if the player has them turned off. "
		},
		{
			"name": "UI_SetModalAbilityPhaseCallback",
			"returnType": "void",
			"parameters": [
				{"name": "function", "type": "LuaConfig::RefFunction", "optional": false}
			],
			"description": "Sets a function to be called when the player clicks an ability and gets a targeting UI. Your function will have 2 arguments: [Blueprint] ability blueprint, [integer] phase: MAP_Placing, MAP_Facing (only if ability requires facing) or MAP_Confirmed (not strict) "
		},
		{
			"name": "UI_SetNISEndCallback",
			"returnType": "void",
			"parameters": [
				{"name": "function", "type": "LuaConfig::RefFunction", "optional": false}
			],
			"description": "Sets the callback function called at the end of an NIS, note this function is automatically cleared after being called once. "
		},
		{
			"name": "UI_SetSoviet227Blinking",
			"returnType": "void",
			"parameters": [
				{"name": "blinking", "type": "bool", "optional": false}
			],
			"description": "Blink the Soviet 227/progression UI "
		},
		{
			"name": "UI_SetSoviet227Visibility",
			"returnType": "void",
			"parameters": [
				{"name": "visible", "type": "bool", "optional": false}
			],
			"description": "Sets the visibility of the Soviet 227/progression UI "
		},
		{
			"name": "UI_ShowTacticalMap",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Shows the tactical map "
		},
		{
			"name": "UI_StopFlashing",
			"returnType": "void",
			"parameters": [
				{"name": "id", "type": "size_t", "optional": false}
			],
			"description": "Stop flashing a flash created with a previous call to UI_Flash*(). "
		},
		{
			"name": "UI_SystemMessageHide",
			"returnType": "void",
			"parameters": [
				{"name": "message", "type": "LocString", "optional": false}
			],
			"description": "Removes a message added by Game_ShowSystemMessage. "
		},
		{
			"name": "UI_SystemMessageShow",
			"returnType": "void",
			"parameters": [
				{"name": "message", "type": "LocString", "optional": false}
			],
			"description": "Shows a system message in the area where Game Paused text appears. \nCall Game_HideSystemMessage to remove the message."
		},
		{
			"name": "UI_TerritoryHide",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Toggle off territory lines. Each call to UI_TerritoryHide must be matched by a call to UI_TerritoryShow "
		},
		{
			"name": "UI_TerritoryShow",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Toggle on territory lines. Each call to UI_TerritoryShow must be matched by a call to UI_TerritoryHide "
		},
		{
			"name": "UI_TitleDestroy",
			"returnType": "void",
			"parameters": [
				{"name": "id", "type": "uint32_t", "optional": false}
			],
			"description": "Removes a title using an id returned by the title creating function. "
		},
		{
			"name": "UI_ToggleDecorators",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Toggles all decorators on or off. "
		},
		{
			"name": "UI_UnrestrictBuildingPlacement",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Removes the restriction on building placement. "
		},
		{
			"name": "UIWarning_Show",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "text", "type": "LocString", "optional": false}
			],
			"description": "Displays a brief UI warning in the critical alert message area. \nCall UI_TitleDestroy to remove."
		},
		{
			"name": "Util_AddProxCheck",
			"returnType": "checkID",
			"parameters": [
				{"name": "element", "type": "PlayerID/SGroup", "optional": false},
				{"name": "location", "type": "EGroup/SGroup/Pos/MarkerID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false},
				{"name": "range", "type": "Real", "optional": false},
				{"name": "callback", "type": "LuaFunction", "optional": false},
				{"name": "delay", "type": "Int", "optional": false}
			],
			"description": "[DEPRECATED. Use Event_Proximity() instead.] Add a proximity check. \nChecks if ANY or ALL the units in the element are within range of the location. If location is a CIRCLE marker, default range will be max(radius, 5)"
		},
		{
			"name": "Util_ClearProxChecks",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "[DEPRECATED. DO NOT USE.] Removes all existing proximity checks. \nClears the list of prox checks that are currently active and shis down the procChecker."
		},
		{
			"name": "Util_CreateEntities",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "blueprintID", "type": "Integer", "optional": false},
				{"name": "location", "type": "MarkerID/Pos", "optional": false},
				{"name": "numentities[", "type": "Integer", "optional": false},
				{"name": "toward", "type": "MarkerID/Pos", "optional": false}
			],
			"description": "Creates a given number of entities at a location and adds them to an egroup. A PlayerID of nil will create the entities as world objects. "
		},
		{
			"name": "Util_CreateSquads",
			"returnType": "SGroup",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "sgroup", "type": "SGroupID/Table/String", "optional": false},
				{"name": "sbp", "type": "SquadBlueprint/Table", "optional": false},
				{"name": "spawn_point[", "type": "Marker/Pos/SGroup/EGroup", "optional": false},
				{"name": "destination", "type": "Position", "optional": false},
				{"name": "numsquads", "type": "Integer", "optional": false},
				{"name": "loadout", "type": "Integer", "optional": false},
				{"name": "attackmove", "type": "Boolean", "optional": false},
				{"name": "dest_facing", "type": "Position", "optional": false},
				{"name": "upgrades", "type": "UpgradeBlueprint/Table", "optional": false},
				{"name": "spawn_facing", "type": "Position", "optional": false}
			],
			"description": "High level function to create squads and give them basic orders upon spawning. Detailed explanation found in ScarUtil.scar \n PlayerID player - player who will own the squads SGroupID/Table/String sgroup - sgroup that receives the new squads. Can be nil if you don't need to manage the new squads or a string if you want to create a new sgroup with that name.If a table is given, the first item will be used as the return sgroup. SquadBlueprint sbp - the blueprint for the new squads. can be a table of blueprints, in which case a random blueprint will be chosen for each squad Position location - where to spawn the squads (can be any parameter type whose position can be queried) SGroup - If the sgroup is a Hold Entity then the squad is spawned inside of it. EGroup - If the egroup is a hold entity then the squad is spawned inside of it. NOTE: if the hold is destroyed, or is full, or due to any other misc. failure case, then the squad is spawned at the player's map entry point. Pos - the squad is spawned at this location. Marker - the squad is spawned at the marker and facing the direciton of the marker.  Position destination - (OPTIONAL) where the squads will move to, load into, or attack SGroup can mean two different things, if the Sgroup is owned by the player and a hold then try to enter it.  Or if the SGroup is an enemy squad, then the spawned squad should attack move the enemy.  If neither is true, then the squad just moves to the location. EGroup should be treated the same as the SGroup. Position/Marker: the squad moves to the location. Sync weapon: the squad captures the sync weapon.  Integer numsquads - (OPTIONAL) how many squads to spawn Integer loadout - (OPTIONAL) max amount of units to spawn per squad Boolean attackmove - (OPTIONAL) in cases where the squads do a simple move to their destination (not attacking or loading into anything), this determines whether they attack move or not Position facing - (OPTIONAL) in cases where the squads do a simple move to their destination, this determines their facing once they reach their destination. If facing is not specified, and the squad is moving to a marker, the marker's facing is used. UpgradeBlueprint upgrades - (OPTIONAL) upgrade(s) to instantly apply to squads when they spawn\n<em>References: </em><a href=\"http://relicjira.thqinc.com/confluence/display/COHXP/Util_CreateSquads\" target=\"_blank\">[Util_CreateSquads]</a>"
		},
		{
			"name": "Util_GetDistance",
			"returnType": "Real",
			"parameters": [
				{"name": "Object1", "type": "entity/squad/egroup/sgroup/marker/pos", "optional": false},
				{"name": "Object2", "type": "entity/squad/egroup/sgroup/marker/pos", "optional": false}
			],
			"description": "Returns the distance between two objects "
		},
		{
			"name": "Util_GetOffsetPosition",
			"returnType": "Position",
			"parameters": [
				{"name": "pos", "type": "entity/squad/egroup/sgroup/marker/position", "optional": false},
				{"name": "offset", "type": "Integer", "optional": false},
				{"name": "distance", "type": "Real", "optional": false}
			],
			"description": "Returns a position relative to a entity/squad/egroup/sgroup/marker/position's current position and orientation. see LuaConsts.scar for explanation of 'offset' parameter. "
		},
		{
			"name": "Util_GetPlayerOwner",
			"returnType": "PlayerID",
			"parameters": [
				{"name": "Object", "type": "entity/squad/egroup/sgroup/player", "optional": false}
			],
			"description": "Returns the player owner for any of: entity, squad, egroup, sgroup, player. for groups, the first item is used. Returns nil for world owned or empty groups "
		},
		{
			"name": "Util_GetRelationship",
			"returnType": "Integer --&gt; R_ENEMY, R_ALLY, R_NEUTRAL, R_UNDEFINED, or nil (if world owned or invalid parameters)",
			"parameters": [
				{"name": "Object_1", "type": "entity/squad/egroup/sgroup/player", "optional": false},
				{"name": "Object_2", "type": "entity/squad/egroup/sgroup/player", "optional": false}
			],
			"description": "Gets the relationship between two of: entity, squad, egroup, sgroup, player. for groups, the first item is used. "
		},
		{
			"name": "Util_GetRelativeOffset",
			"returnType": "Offset",
			"parameters": [
				{"name": "element", "type": "entity/squad/egroup/sgroup/marker/position", "optional": false},
				{"name": "pos", "type": "entity/squad/egroup/sgroup/marker/position", "optional": false}
			],
			"description": "Returns a relative offset position to an element "
		},
		{
			"name": "Util_MonitorTerritory",
			"returnType": "Void",
			"parameters": [
				{"name": "terrs", "type": "Table/EGroup", "optional": false},
				{"name": "captureThreshold", "type": "Float", "optional": false},
				{"name": "timeoutValue", "type": "Int", "optional": false},
				{"name": "callback", "type": "ScarFN", "optional": false},
				{"name": "alertIntel", "type": "ScarFN", "optional": false},
				{"name": "parentObjective", "type": "Table", "optional": false}
			],
			"description": "Monitors a territory point and warns the player if it goes below a certain capture threshold \nCan receive a parent objective to which to attach a subobjective that displays data."
		},
		{
			"name": "Util_RemoveProxCheck",
			"returnType": "Void",
			"parameters": [
				{"name": "location", "type": "EGroup/SGroup/Pos/MarkerID", "optional": false}
			],
			"description": "[DEPRECATED. DO NOT USE.] Remove proximity checks assigned to a location.  \nRemoves all proximity checks associated with the defined location."
		},
		{
			"name": "Util_RemoveProxCheckByID",
			"returnType": "Void",
			"parameters": [
				{"name": "checkID", "type": "Integer", "optional": false}
			],
			"description": "[DEPRECATED. DO NOT USE.] Remove a specific proximity check based on its ID. "
		},
		{
			"name": "Util_ScarPos",
			"returnType": "Position, if y-height is nil, y-height = ground height, terrain ground or walkable",
			"parameters": [
				{"name": "xpos", "type": "Real", "optional": false},
				{"name": "zpos", "type": "Real", "optional": false},
				{"name": "ypos", "type": "Real", "optional": false}
			],
			"description": "Converts a 2D top down position to a 3D ScarPosition. \n 3D ScarPositions have the x axis left to right, the z axis in to out, and the y axis down to up (y axis represents the height of the terrain).  Use this function to convert a top-down 2D position to a 3D world position.&lt;BR/&gt;&lt;BR/&gt; Note: (0,0) is in the center of the map."
		},
		{
			"name": "Util_SetPlayerOwner",
			"returnType": "Void",
			"parameters": [
				{"name": "Object", "type": "entity/squad/egroup/sgroup", "optional": false},
				{"name": "owner[", "type": "PlayerID", "optional": false},
				{"name": "bApplyToSquadsHeld=true", "type": "Boolean", "optional": false}
			],
			"description": "Sets the player owner for an entity, squad, egroup or sgroup. Also sets player owner of whatever is garrisoned inside them "
		},
		{
			"name": "Util_SpawnDemoCharge",
			"returnType": "EGroupID",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "location", "type": "MarkerID/Pos", "optional": false}
			],
			"description": "Spawns a demo charge at a position and returns an egroup \nUse this instead of World_SpawnDemolitionCharge if you need to manage it"
		},
		{
			"name": "Util_StartNIS",
			"returnType": "Void",
			"parameters": [
				{"name": "NIS[", "type": "String/Integer/LuaFunction", "optional": false},
				{"name": "onComplete", "type": "LuaFunction", "optional": false},
				{"name": "hide", "type": "egroup/sgroup/Player/Table", "optional": false},
				{"name": "preNIS", "type": "LuaFunction", "optional": false},
				{"name": "postNIS", "type": "LuaFunction", "optional": false},
				{"name": "framedump", "type": "Boolean", "optional": false},
				{"name": "preserveFOW", "type": "Boolean", "optional": false}
			],
			"description": "Play an NIS. See confluence link below for more info. \n<em>References: </em><a href=\"http://relicjira.thqinc.com/confluence/display/COHXP/Scripting+NIS+Transitions\" target=\"_blank\">[Scripting+NIS+Transitions]</a>"
		},
		{
			"name": "VIS_OccCullToggleOBB",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "toggle the visibility of occlusion culling OBB "
		},
		{
			"name": "Marker_CleanUpTheDead",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "marker", "type": "MarkerID", "optional": false}
			],
			"description": "Kill off a specific player's dead bodies (enter ALL to clean them all up) in a marker radius "
		},
		{
			"name": "Weather_SetType",
			"returnType": "void",
			"parameters": [
				{"name": "weatherLevelName", "type": "const char*", "optional": false}
			],
			"description": "changes the weather state of all objects (options: sunny, lightrain, mediumrain, heavyrain) "
		},
		{
			"name": "World_AddPilferLockArea",
			"returnType": "void",
			"parameters": [
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "radius", "type": "float", "optional": false}
			],
			"description": "Add an area where pilferable weapons won't disappear due to timeout "
		},
		{
			"name": "World_CleanUpTheDead",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false}
			],
			"description": "Kill off a specific player's dead bodies (enter ALL to clean them all up) "
		},
		{
			"name": "World_ClearCasualties",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": ""
		},
		{
			"name": "World_DamageIce",
			"returnType": "void",
			"parameters": [
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "innerRadius", "type": "float", "optional": false},
				{"name": "outerRadius", "type": "float", "optional": false},
				{"name": "innerDamage", "type": "float", "optional": false},
				{"name": "outerDamage", "type": "float", "optional": false}
			],
			"description": "Damage a circle of ice with a gradient \nlinearly to 50 damage at 10 meters (so 75 damage at 7.5 meters)"
		},
		{
			"name": "World_DestroyWallsNearMarker",
			"returnType": "void",
			"parameters": [
				{"name": "marker", "type": "ScarMarker", "optional": false}
			],
			"description": "Destroys walls (entities with a wall_ext) near a marker "
		},
		{
			"name": "World_DistanceEGroupToPoint",
			"returnType": "float",
			"parameters": [
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "p1", "type": "ScarPosition", "optional": false},
				{"name": "closest", "type": "bool", "optional": false}
			],
			"description": "Get the distance between a squad group and a point. \n Pass in true for 3rd parameter to get the closest point and pass in false to get the furthest point.  The closest/furthest point is calculated on a per entity basis.  So the closest distance would be that of the closest entity.&lt;BR/&gt; Also note, it is an error to call this function with an empty group.&lt;BR/&gt;"
		},
		{
			"name": "World_DistancePointToPoint",
			"returnType": "float",
			"parameters": [
				{"name": "p1", "type": "ScarPosition", "optional": false},
				{"name": "p2", "type": "ScarPosition", "optional": false}
			],
			"description": "Get the distance between two points. "
		},
		{
			"name": "World_DistanceSGroupToPoint",
			"returnType": "float",
			"parameters": [
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "p1", "type": "ScarPosition", "optional": false},
				{"name": "closest", "type": "bool", "optional": false}
			],
			"description": "Get the distance between a squad group and a point. \n Pass in true for 3rd parameter to get the closest point and pass in false to get the furthest point.  The closest/furthest point is calculated on a per squadron basis.  So the closest distance would be that of the closest squadron.&lt;BR/&gt; It is an error to call this function with an empty group.  Check the group size with SquadGroup_Count( ) first."
		},
		{
			"name": "World_DistanceSquaredPointToPoint",
			"returnType": "float",
			"parameters": [
				{"name": "p1", "type": "ScarPosition", "optional": false},
				{"name": "p2", "type": "ScarPosition", "optional": false}
			],
			"description": "Get the distance squared between two points. "
		},
		{
			"name": "World_EnableReplacementObjectForEmptyPlayers",
			"returnType": "void",
			"parameters": [
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "*** You must call this from OnGameSetup, otherwise it's too late *** Determines whether empty players get converted to null resource points. \nsee Attribute Editor under tuning/player/empty_player_replacement_object"
		},
		{
			"name": "World_EnableSharedLineOfSight",
			"returnType": "void",
			"parameters": [
				{"name": "p0", "type": "ModPlayer*", "optional": false},
				{"name": "p1", "type": "ModPlayer*", "optional": false},
				{"name": "enable", "type": "bool", "optional": false}
			],
			"description": "Enables or disables shared line of sight between these two players "
		},
		{
			"name": "World_EndSP",
			"returnType": "void",
			"parameters": [
				{"name": "win", "type": "bool", "optional": false}
			],
			"description": "Wins/loses a single team mission for the local teams "
		},
		{
			"name": "World_GetClosest",
			"returnType": "Variable",
			"parameters": [
				{"name": "var", "type": "Variable", "optional": false},
				{"name": "items", "type": "LuaTable", "optional": false}
			],
			"description": "Returns the closest object from the table of marker/pos/egroup/sgroup to the closest marker/pos/egroup/sgroup specified \nThe table may mix together objects of different types."
		},
		{
			"name": "World_GetCurrentInteractionStage",
			"returnType": "int",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns the current interaction stage (areas painted at this number or lower are currently interactable) "
		},
		{
			"name": "World_GetEntitiesNearMarker",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "marker", "type": "ScarMarker", "optional": false},
				{"name": "ownerType", "type": "<a href=\"enum_list.htm#OwnerType\">OwnerType</a>", "optional": false}
			],
			"description": "Find and add entities near the marker to the egroup \nEntities belonging to a squad would not be added to the egroup"
		},
		{
			"name": "World_GetEntitiesNearPoint",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "radius", "type": "float", "optional": false},
				{"name": "ownerType", "type": "<a href=\"enum_list.htm#OwnerType\">OwnerType</a>", "optional": false}
			],
			"description": "Find and add entities near the point to the egroup \nEntities belonging to a squad would not be added to the egroup"
		},
		{
			"name": "World_GetEntitiesWithinTerritorySector",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "sectorID", "type": "size_t", "optional": false},
				{"name": "ownerType", "type": "<a href=\"enum_list.htm#OwnerType\">OwnerType</a>", "optional": false}
			],
			"description": "Find and add entities within the territory sector to the egroup \nEntities belonging to a squad would not be added to the egroup"
		},
		{
			"name": "World_GetEntity",
			"returnType": "Entity*",
			"parameters": [
				{"name": "index", "type": "int", "optional": false}
			],
			"description": "Returns the UniqueID at given index, use with World_GetNumEntities() to iterate through all the entities in the world "
		},
		{
			"name": "World_GetFurthest",
			"returnType": "Variable",
			"parameters": [
				{"name": "var", "type": "Variable", "optional": false},
				{"name": "items", "type": "LuaTable", "optional": false}
			],
			"description": "Returns the furthest object from the table of marker/pos/egroup/sgroup to the furthest marker/pos/egroup/sgroup specified. \nThe table may mix together objects of different types."
		},
		{
			"name": "World_GetGameTime",
			"returnType": "float",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Return the total game time in seconds. "
		},
		{
			"name": "World_GetHeightAt",
			"returnType": "float",
			"parameters": [
				{"name": "x", "type": "float", "optional": false},
				{"name": "y", "type": "float", "optional": false}
			],
			"description": "returns the height of ground at 2D pos x,y "
		},
		{
			"name": "World_GetHiddenPositionOnPath",
			"returnType": "Position",
			"parameters": [
				{"name": "player", "type": "PlayerID", "optional": false},
				{"name": "origin", "type": "MarkerID/Pos", "optional": false},
				{"name": "destination", "type": "MarkerID/Pos", "optional": false},
				{"name": "checktype", "type": "Integer", "optional": false}
			],
			"description": "Find a position on a path hidden from view, as close to the destination as possible whilst still satisfying your hidden checktype. Checktype can be either CHECK_IN_FOW, CHECK_OFFCAMERA or CHECK_BOTH. \nThe path is always calculated as if it were plain infantry. This function returns nil if it can't find a suitable position, so you can do a backup plan. "
		},
		{
			"name": "World_GetLength",
			"returnType": "float",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns the total playable length of the game world (z coordinate) \nSince the center of the map is 0,0 the world z range is (-l/2 -&gt; l/2)"
		},
		{
			"name": "World_GetNearestInteractablePoint",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "position", "type": "ScarPosition", "optional": false}
			],
			"description": "returns the nearest intractable position to the supplied position "
		},
		{
			"name": "World_GetNeutralEntitiesNearMarker",
			"returnType": "int",
			"parameters": [
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "marker", "type": "ScarMarker", "optional": false}
			],
			"description": "Find and add neutral entities near the marker to the egroup \nEntities belonging to a squad would not be added to the egroup"
		},
		{
			"name": "World_GetNeutralEntitiesNearPoint",
			"returnType": "int",
			"parameters": [
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "radius", "type": "float", "optional": false}
			],
			"description": "Find and add neutral entities near the point to the egroup \nEntities belonging to a squad would not be added to the egroup"
		},
		{
			"name": "World_GetNeutralEntitiesWithinTerritorySector",
			"returnType": "int",
			"parameters": [
				{"name": "egroup", "type": "EGroup*", "optional": false},
				{"name": "sectorID", "type": "size_t", "optional": false}
			],
			"description": "Find and add neutral entities within the territory sector to the egroup \nEntities belonging to a squad would not be added to the egroup"
		},
		{
			"name": "World_GetNumEntities",
			"returnType": "int",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns the number of spawned entities in the entire world (use sparingly and never at runtime) "
		},
		{
			"name": "World_GetNumEntitiesNearPoint",
			"returnType": "int",
			"parameters": [
				{"name": "ebp", "type": "ScarEntityPBG", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "radius", "type": "float", "optional": false}
			],
			"description": "Return the number of entities of the same ebp in the sphere volume "
		},
		{
			"name": "World_GetNumStrategicPoints",
			"returnType": "int",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns the number of strategic points on this map (does not count strat. objectives) "
		},
		{
			"name": "World_GetNumVictoryPoints",
			"returnType": "int",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns the number of strategic objectives on this map "
		},
		{
			"name": "World_GetOffsetPosition",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "position", "type": "ScarPosition", "optional": false},
				{"name": "heading", "type": "ScarPosition", "optional": false},
				{"name": "offset", "type": "int", "optional": false},
				{"name": "distance", "type": "float", "optional": false}
			],
			"description": "Returns a position that is offset a certain distance from the position/heading passed in. see LuaConsts.scar for explanation of 'offset' parameter. "
		},
		{
			"name": "World_GetPlayerAt",
			"returnType": "Player*",
			"parameters": [
				{"name": "index", "type": "uint32_t", "optional": false}
			],
			"description": "- Returns the player at a given index, numbers start at one "
		},
		{
			"name": "World_GetPlayerCount",
			"returnType": "int",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Return the total number of players in the world "
		},
		{
			"name": "World_GetPlayerIndex",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false}
			],
			"description": "- Returns the player index given the Player* "
		},
		{
			"name": "World_GetPossibleSquadsBlueprint",
			"returnType": "ScarSquadPBG",
			"parameters": [
				{"name": "race_index", "type": "int", "optional": false},
				{"name": "squad_index", "type": "int", "optional": false}
			],
			"description": "Returns the blueprint of a chosen squad for a race "
		},
		{
			"name": "World_GetPossibleSquadsCount",
			"returnType": "int",
			"parameters": [
				{"name": "race_index", "type": "int", "optional": false}
			],
			"description": "Returns the number of types of squads a race can build "
		},
		{
			"name": "World_GetRaceIndex",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "racename", "type": "const char*", "optional": false}
			],
			"description": "Returns the race index of a race, given its name (from the ME). "
		},
		{
			"name": "World_GetRand",
			"returnType": "int",
			"parameters": [
				{"name": "min", "type": "int", "optional": false},
				{"name": "max", "type": "int", "optional": false}
			],
			"description": "Returns a random integer with range [min, max] \nIt is recomended you use this instead of luas math.random function"
		},
		{
			"name": "World_GetSpawnablePosition",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "around", "type": "ScarPosition", "optional": false},
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Given any position in the world, this function will return position safe for spawning a given entity "
		},
		{
			"name": "World_GetSquadsNearMarker",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "marker", "type": "ScarMarker", "optional": false},
				{"name": "ownerType", "type": "<a href=\"enum_list.htm#OwnerType\">OwnerType</a>", "optional": false}
			],
			"description": "Find and add squads near the marker to the sgroup \nThis function is faster if radius is small and/or number of squads to search for is large"
		},
		{
			"name": "World_GetSquadsNearPoint",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "radius", "type": "float", "optional": false},
				{"name": "ownerType", "type": "<a href=\"enum_list.htm#OwnerType\">OwnerType</a>", "optional": false}
			],
			"description": "Find and add squads near the point to the sgroup \nThis function is faster if radius is small and/or number of squads to search for is large"
		},
		{
			"name": "World_GetSquadsWithinTerritorySector",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sgroup", "type": "SGroup*", "optional": false},
				{"name": "sectorID", "type": "size_t", "optional": false},
				{"name": "ownerType", "type": "<a href=\"enum_list.htm#OwnerType\">OwnerType</a>", "optional": false}
			],
			"description": "Find and add squads within territory sector identified by sector ID \nOwner type could be OT_Player, OT_Ally, OT_Enemy or OT_Neutral"
		},
		{
			"name": "World_GetStrategyPoints",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "EGroup*", "optional": false},
				{"name": "bIncludeVP", "type": "bool", "optional": false}
			],
			"description": "Appends all the strategic resource points to an egroup.   \n takes the egroup where you want to put the points, and 2nd parameter is a bool which indicates if you want to include VPs or not If 'group' already contains an entity from 'grouptoadd' it will not be added.&lt;BR/&gt; This function does not clear the contents of 'group'.&lt;BR/&gt; Example: World_GetStrategyPoints(mypointgroup, true) --puts all the points including vps into mypointgroup"
		},
		{
			"name": "World_GetTeamTerritoryGaps",
			"returnType": "bool",
			"parameters": [
				{"name": "sectorid1", "type": "int", "optional": false},
				{"name": "sectorid2", "type": "int", "optional": false},
				{"name": "results", "type": "LuaBinding::StackVarTable", "optional": false}
			],
			"description": "Returns one or more sector IDs that would connect two unconnected pieces of territory. return value is through a table (since there can be more than one way to connect territory) - each entry in this table is a table of sector IDs. \nCurrently only finds single gaps - i.e. if two territories are 'almost' connected."
		},
		{
			"name": "World_GetTeamVictoryTicker",
			"returnType": "int",
			"parameters": [
				{"name": "teamID", "type": "int", "optional": false}
			],
			"description": "Returns the number of tickets that this team has "
		},
		{
			"name": "World_GetTerritorySectorID",
			"returnType": "size_t",
			"parameters": [
				{"name": "pos", "type": "ScarPosition", "optional": false}
			],
			"description": "Return the sector ID from the position "
		},
		{
			"name": "World_GetTerritorySectorPosition",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "sectorID", "type": "int", "optional": false}
			],
			"description": "Returns the position of a sector based on the capture entity (ex: the fuel point's position) "
		},
		{
			"name": "World_GetWidth",
			"returnType": "float",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns the total playable width of the game world (x coordinate) \nSince the center of the map is 0,0 the world x range is (-w/2 -&gt; w/2)"
		},
		{
			"name": "World_IncreaseInteractionStage",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Increases current interaction stage by 1 "
		},
		{
			"name": "World_IsGameOver",
			"returnType": "bool",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "- to document "
		},
		{
			"name": "World_IsInSupply",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "const ModPlayer*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false}
			],
			"description": "Returns true if position is in-supply for the given player "
		},
		{
			"name": "World_IsPointInPlayerTerritory",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "position", "type": "ScarPosition", "optional": false}
			],
			"description": "Returns true if position if part of the entity territory \nNote that this does not care if territory is in supply or not"
		},
		{
			"name": "World_IsTerritorySectorOwnedByPlayer",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "sectorID", "type": "size_t", "optional": false}
			],
			"description": "Find if player has ownership to this territory sector. \nOther players on the same team would also have the ownership to the sector"
		},
		{
			"name": "World_IsWinterMap",
			"returnType": "Boolean",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Returns whether the current map is set in winter. Checks if 'g_isWinterMap' is set to true. "
		},
		{
			"name": "World_OwnsEGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns whether ANY or ALL of the entities in the group are owned by the world (i.e. neutral) "
		},
		{
			"name": "World_OwnsEntity",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity*", "optional": false}
			],
			"description": "Returns true if the squad is owned by the world "
		},
		{
			"name": "World_OwnsSGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID", "optional": false},
				{"name": "all", "type": "Boolean", "optional": false}
			],
			"description": "Returns whether ANY or ALL of the squads in the group are owned by the world (i.e. neutral) "
		},
		{
			"name": "World_OwnsSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad*", "optional": false}
			],
			"description": "Returns true if the squad is owned by the world "
		},
		{
			"name": "World_PointPointProx",
			"returnType": "bool",
			"parameters": [
				{"name": "p1", "type": "ScarPosition", "optional": false},
				{"name": "p2", "type": "ScarPosition", "optional": false},
				{"name": "prox", "type": "float", "optional": false}
			],
			"description": "Returns true if two world positions are in proximity to each other "
		},
		{
			"name": "World_Pos",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "x", "type": "float", "optional": false},
				{"name": "y", "type": "float", "optional": false},
				{"name": "z", "type": "float", "optional": false}
			],
			"description": "Creates a new Position object. \n  A position object is basically a table with an x, y, and z attribute.  You can directly access the individual components in the same way that you would access a field in a table.&lt;BR/&gt;&lt;BR/&gt;  Example:&lt;BR/&gt;   --* lua script snip&lt;BR/&gt;   local pos = World_Pos(2, 0, 0)&lt;BR/&gt;   pos.x = pos.x + 1&lt;BR/&gt;   print pos.x -- this will print 3&lt;BR/&gt;   --* lua script snip&lt;BR/&gt;"
		},
		{
			"name": "World_RemoveAllResourcePoints",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "Removes all resource and strategic points but not entities with a supply ext NOTE: this could eventually be written as - RemoveAllOfType( type ) which would be more flexible. "
		},
		{
			"name": "World_RemovePilferLockArea",
			"returnType": "void",
			"parameters": [
				{"name": "pos", "type": "ScarPosition", "optional": false},
				{"name": "radius", "type": "float", "optional": false}
			],
			"description": "Remove a locked pilfering area, must pass the same pos and radius as when the lock area was created "
		},
		{
			"name": "World_SetDesignerSupply",
			"returnType": "void",
			"parameters": [
				{"name": "point", "type": "ScarPosition", "optional": false},
				{"name": "bSupply", "type": "bool", "optional": false}
			],
			"description": "Sets a particular sector in the world as a supply provider (or not) "
		},
		{
			"name": "World_SetGameOver",
			"returnType": "void",
			"parameters": [
				{"name": "Void", "type": "", "optional": false}
			],
			"description": "- to document "
		},
		{
			"name": "World_SetIceHealingRate",
			"returnType": "void",
			"parameters": [
				{"name": "percentPerSecond", "type": "float", "optional": false}
			],
			"description": "Set what percent ice heals per second (0.05 means 5% per second) "
		},
		{
			"name": "World_SetPlayerCustomSkin",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer*", "optional": false},
				{"name": "skin", "type": "const char*", "optional": false}
			],
			"description": "Change the player's custom skin settings, skin must exist in the AE list of DLC skins "
		},
		{
			"name": "World_SetPlayerLose",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false}
			],
			"description": "Sets the player to a lose state, with a reason for losing, and kills the player "
		},
		{
			"name": "World_SetPlayerWin",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer*", "optional": false}
			],
			"description": "Sets the player and all the members allied to player to a win state, with a reason for winning. Also sets all other players to a lose state, and kills them (if they're not already dead) "
		},
		{
			"name": "World_SetSnowHealingRate",
			"returnType": "void",
			"parameters": [
				{"name": "percentPerSecond", "type": "float", "optional": false}
			],
			"description": "Set what percent snow heals per second (0.05 means 5% per second) "
		},
		{
			"name": "World_SetTeamWin",
			"returnType": "void",
			"parameters": [
				{"name": "team", "type": "int", "optional": false}
			],
			"description": "Sets every player on a team to a win state, with a reason for winning. Also sets all other players to a lose state, and kills them (if they're not already dead) "
		},
		{
			"name": "World_SpawnDemolitionCharge",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "Player*", "optional": false},
				{"name": "pos", "type": "ScarPosition", "optional": false}
			],
			"description": "spawn a demolitions charge at a position, 'player' is the one that owns the demolitions and can detonate them. "
		},
		{
			"name": "World_TeamTerritoryPointsConnected",
			"returnType": "bool",
			"parameters": [
				{"name": "team_index", "type": "int", "optional": false},
				{"name": "p1", "type": "ScarPosition", "optional": false},
				{"name": "p2", "type": "ScarPosition", "optional": false}
			],
			"description": "Returns true if the two points are in the same territory region, and owned by the specified territory team, Returns false otherwise. "
		},
		{
			"name": "Scar_AddInit",
			"returnType": "void",
			"parameters": [
				{"name": "FunctionName", "type": "Lua Function (NOT ANOYNMOUS!)", "optional": false}
			],
			"description": "Can be used to kick off your script. This tells the game engine \"When you are ready, call the function FunctionName first\""
		},
		{
			"name": "scartype",
			"returnType": "SCARType",
			"parameters": [
				{"name": "param", "type": "any", "optional": false}
			],
			"description": "Returns the SCAR Type of the provided value, eg. ST_SQUAD"
		},
		{
			"name": "scartype_tostring",
			"returnType": "string",
			"parameters": [
				{"name": "param", "type": "any", "optional": false}
			],
			"description": "Returns the SCAR Type of the provided value as a string value, eg. \"ST_SQUAD\""
		},
		{
			"name": "import",
			"returnType": "void",
			"parameters": [
				{"name": "file", "type": "string", "optional": false}
			],
			"description": "Imports the provided file."
		},
		{
			"name": "UI_GetViewportWidth",
			"returnType": "float",
			"parameters": [
			],
			"description": "Returns the width of the viewport."
		},
		{
			"name": "UI_GetViewportHeight",
			"returnType": "float",
			"parameters": [
			],
			"description": "Returns the height of the viewport."
		},
		{
			"name": "UI_ButtonAdd",
			"returnType": "void",
			"parameters": [
				{"name": "path", "type": "const char*", "optional": false},
				{"name": "name", "type": "const char*", "optional": false},
				{"name": "x", "type": "float", "optional": false},
				{"name": "y", "type": "float", "optional": false},
				{"name": "width", "type": "float", "optional": false},
				{"name": "height", "type": "float", "optional": false},
				{"name": "callback", "type": "const char*", "optional": false},
				{"name": "enabled", "type": "bool", "optional": false},
				{"name": "icon", "type": "const char*", "optional": false},
				{"name": "style", "type": "ButtonIconStyle (BIS_*)", "optional": false},
				{"name": "tag", "type": "const char*", "optional": false},
				{"name": "text", "type": "LocString", "optional": false}
			],
			"description": "Creates a new Button."
		},
		{
			"name": "UI_ButtonSetCallback",
			"returnType": "void",
			"parameters": [
				{"name": "path", "type": "const char*", "optional": false},
				{"name": "callback", "type": "const char*", "optional": false}
			],
			"description": "Sets the button click callback handler."
		},
		{
			"name": "UI_ButtonSetEnabled",
			"returnType": "void",
			"parameters": [
				{"name": "path", "type": "const char*", "optional": false},
				{"name": "enabled", "type": "bool", "optional": false}
			],
			"description": "Sets the button enabled status."
		},
		{
			"name": "UI_ButtonSetIcon",
			"returnType": "void",
			"parameters": [
				{"name": "path", "type": "const char*", "optional": false},
				{"name": "icon", "type": "const char*", "optional": false}
			],
			"description": "Sets the button icon."
		},
		{
			"name": "UI_ButtonSetTag",
			"returnType": "void",
			"parameters": [
				{"name": "path", "type": "const char*", "optional": false},
				{"name": "tag", "type": "const char*", "optional": false}
			],
			"description": "Sets the button tag."
		},
		{
			"name": "UI_ButtonSetText",
			"returnType": "void",
			"parameters": [
				{"name": "path", "type": "const char*", "optional": false},
				{"name": "text", "type": "LocString", "optional": false}
			],
			"description": "Sets the button text."
		},
		{
			"name": "UI_LabelAdd",
			"returnType": "void",
			"parameters": [
				{"name": "path", "type": "const char*", "optional": false},
				{"name": "name", "type": "const char*", "optional": false},
				{"name": "x", "type": "float", "optional": false},
				{"name": "y", "type": "float", "optional": false},
				{"name": "width", "type": "float", "optional": false},
				{"name": "height", "type": "float", "optional": false},
				{"name": "alignHorizontal", "type": "LabelAlignHorizontal (LAH_)", "optional": false},
				{"name": "alignVertical", "type": "LabelAlignVertical (LAV_)", "optional": false},
				{"name": "bold", "type": "bool", "optional": false},
				{"name": "italic", "type": "bool", "optional": false},
				{"name": "size", "type": "float", "optional": false},
				{"name": "text", "type": "LocString", "optional": false}
			],
			"description": "Creates a new Label."
		},
		{
			"name": "UI_LabelSetText",
			"returnType": "void",
			"parameters": [
				{"name": "path", "type": "const char*", "optional": false},
				{"name": "text", "type": "LocString", "optional": false}
			],
			"description": "Sets the label text."
		},
		{
			"name": "UI_IconAdd",
			"returnType": "void",
			"parameters": [
				{"name": "path", "type": "const char*", "optional": false},
				{"name": "name", "type": "const char*", "optional": false},
				{"name": "x", "type": "float", "optional": false},
				{"name": "y", "type": "float", "optional": false},
				{"name": "width", "type": "float", "optional": false},
				{"name": "height", "type": "float", "optional": false},
				{"name": "icon", "type": "const char*", "optional": false}
			],
			"description": "Creates a new Icon."
		},
		{
			"name": "UI_IconSetIcon",
			"returnType": "void",
			"parameters": [
				{"name": "path", "type": "const char*", "optional": false},
				{"name": "icon", "type": "const char*", "optional": false}
			],
			"description": "Sets the icon icon."
		},
		{
			"name": "UI_PanelAdd",
			"returnType": "void",
			"parameters": [
				{"name": "path", "type": "const char*", "optional": false},
				{"name": "name", "type": "const char*", "optional": false},
				{"name": "x", "type": "float", "optional": false},
				{"name": "y", "type": "float", "optional": false},
				{"name": "width", "type": "float", "optional": false},
				{"name": "height", "type": "float", "optional": false}
			],
			"description": "Creates a new Panel."
		},
		{
			"name": "UI_StatusIndicatorAdd",
			"returnType": "void",
			"parameters": [
				{"name": "path", "type": "const char*", "optional": false},
				{"name": "name", "type": "const char*", "optional": false},
				{"name": "x", "type": "float", "optional": false},
				{"name": "y", "type": "float", "optional": false},
				{"name": "width", "type": "float", "optional": false},
				{"name": "height", "type": "float", "optional": false},
				{"name": "value", "type": "float", "optional": false}
			],
			"description": "Creates a new Status Indicator."
		},
		{
			"name": "UI_StatusIndicatorSetValue",
			"returnType": "void",
			"parameters": [
				{"name": "path", "type": "const char*", "optional": false},
				{"name": "value", "type": "float", "optional": false}
			],
			"description": "Sets the status indicator value."
		},
		{
			"name": "UI_ControlSetColour",
			"returnType": "void",
			"parameters": [
				{"name": "path", "type": "const char*", "optional": false},
				{"name": "red", "type": "int", "optional": false},
				{"name": "green", "type": "int", "optional": false},
				{"name": "blue", "type": "int", "optional": false},
				{"name": "alpha", "type": "int", "optional": false}
			],
			"description": "Sets the control color."
		},
		{
			"name": "UI_ControlSetPosition",
			"returnType": "void",
			"parameters": [
				{"name": "path", "type": "const char*", "optional": false},
				{"name": "x", "type": "float", "optional": false},
				{"name": "y", "type": "float", "optional": false}
			],
			"description": "Sets the control position."
		},
		{
			"name": "UI_ControlSetRect",
			"returnType": "void",
			"parameters": [
				{"name": "path", "type": "const char*", "optional": false},
				{"name": "x", "type": "float", "optional": false},
				{"name": "y", "type": "float", "optional": false},
				{"name": "width", "type": "float", "optional": false},
				{"name": "height", "type": "float", "optional": false}
			],
			"description": "Sets the control rectangle."
		},
		{
			"name": "UI_ControlRemove",
			"returnType": "void",
			"parameters": [
				{"name": "path", "type": "const char*", "optional": false}
			],
			"description": "Removes the control."
		},
		{
			"name": "UI_ControlClear",
			"returnType": "void",
			"parameters": [
				{"name": "path", "type": "const char*", "optional": false}
			],
			"description": "Clears the control."
		}
	],
	"enums": [
		{"name": "BS_NearBase", "type": "AIBuildStyle"},
		{"name": "BS_Defend", "type": "AIBuildStyle"},
		{"name": "BS_Secure", "type": "AIBuildStyle"},
		{"name": "BS_Mines", "type": "AIBuildStyle"},
		{"name": "BS_OuterBase", "type": "AIBuildStyle"},
		{"name": "CPT_VictoryPoint", "type": "AICapturePointType"},
		{"name": "CPT_MunitionPoint", "type": "AICapturePointType"},
		{"name": "CPT_NullPoint", "type": "AICapturePointType"},
		{"name": "CPT_TacticalPoint", "type": "AICapturePointType"},
		{"name": "CPT_INVALID", "type": "AICapturePointType"},
		{"name": "CPT_FuelPoint", "type": "AICapturePointType"},
		{"name": "COMBAT_Default", "type": "AICombatType"},
		{"name": "COMBAT_Defend", "type": "AICombatType"},
		{"name": "COMBAT_Attack", "type": "AICombatType"},
		{"name": "MPT_VictoryPoint", "type": "AIMilitaryPointType"},
		{"name": "MPT_NullPoint", "type": "AIMilitaryPointType"},
		{"name": "MPT_NONE", "type": "AIMilitaryPointType"},
		{"name": "MPT_MunitionPoint", "type": "AIMilitaryPointType"},
		{"name": "MPT_COUNT", "type": "AIMilitaryPointType"},
		{"name": "MPT_SupportStructure", "type": "AIMilitaryPointType"},
		{"name": "MPT_Defence", "type": "AIMilitaryPointType"},
		{"name": "MPT_Spawner", "type": "AIMilitaryPointType"},
		{"name": "MPT_HQ", "type": "AIMilitaryPointType"},
		{"name": "MPT_TacticalPoint", "type": "AIMilitaryPointType"},
		{"name": "MPT_FuelPoint", "type": "AIMilitaryPointType"},
		{"name": "MTARGET_Attack", "type": "AIMilitaryTargetType"},
		{"name": "MTARGET_Defend", "type": "AIMilitaryTargetType"},
		{"name": "AI_ProductionQueue", "type": "AIResourceType"},
		{"name": "AI_CapturePoint", "type": "AIResourceType"},
		{"name": "AI_Squad", "type": "AIResourceType"},
		{"name": "AITacticTargetPreference_HighDamage", "type": "AITacticTargetPreference"},
		{"name": "AITacticTargetPreference_LowHealth", "type": "AITacticTargetPreference"},
		{"name": "AITacticTargetPreference_None", "type": "AITacticTargetPreference"},
		{"name": "AITacticTargetPreference_Support", "type": "AITacticTargetPreference"},
		{"name": "AITacticTargetPreference_Near", "type": "AITacticTargetPreference"},
		{"name": "AITacticTargetPreference_NearAndBest", "type": "AITacticTargetPreference"},
		{"name": "AITacticTargetPreference_Best", "type": "AITacticTargetPreference"},
		{"name": "TACTIC_CapturePoint", "type": "AITacticType"},
		{"name": "TACTIC_Ability", "type": "AITacticType"},
		{"name": "TACTIC_Pickup", "type": "AITacticType"},
		{"name": "TACTIC_ForceAttack", "type": "AITacticType"},
		{"name": "TACTIC_Hold", "type": "AITacticType"},
		{"name": "TACTIC_MinRange", "type": "AITacticType"},
		{"name": "TACTIC_CaptureTeamWeapon", "type": "AITacticType"},
		{"name": "TACTIC_WarmUp", "type": "AITacticType"},
		{"name": "TACTIC_ProvideReinforcementPoint", "type": "AITacticType"},
		{"name": "TACTIC_RushAtTarget", "type": "AITacticType"},
		{"name": "TACTIC_Recrew", "type": "AITacticType"},
		{"name": "TACTIC_Vehicle", "type": "AITacticType"},
		{"name": "TACTIC_Avoid", "type": "AITacticType"},
		{"name": "TACTIC_Cover", "type": "AITacticType"},
		{"name": "TACTIC_FinishHealing", "type": "AITacticType"},
		{"name": "TASK_Leader", "type": "AITaskType"},
		{"name": "TASK_Production", "type": "AITaskType"},
		{"name": "TASK_Ability", "type": "AITaskType"},
		{"name": "TASK_PlayerAbility", "type": "AITaskType"},
		{"name": "TASK_Combat", "type": "AITaskType"},
		{"name": "TASK_Construction", "type": "AITaskType"},
		{"name": "TASK_Capture", "type": "AITaskType"},
		{"name": "TASK_ImmobileCombat", "type": "AITaskType"},
		{"name": "AII_LocalHumanTakeover", "type": "AIType"},
		{"name": "AII_RemoteAITakeover", "type": "AIType"},
		{"name": "AII_None", "type": "AIType"},
		{"name": "AII_RemoteHumanTakeover", "type": "AIType"},
		{"name": "AII_Normal", "type": "AIType"},
		{"name": "ITEM_REMOVED", "type": "Availability"},
		{"name": "ITEM_DEFAULT", "type": "Availability"},
		{"name": "ITEM_UNLOCKED", "type": "Availability"},
		{"name": "ITEM_LOCKED", "type": "Availability"},
		{"name": "BT_AttackHere", "type": "BlipType"},
		{"name": "BT_SectorArtillery", "type": "BlipType"},
		{"name": "BT_ObjectivePrimary", "type": "BlipType"},
		{"name": "BT_Reveal", "type": "BlipType"},
		{"name": "BT_Combat", "type": "BlipType"},
		{"name": "BT_General", "type": "BlipType"},
		{"name": "BT_CaptureHere", "type": "BlipType"},
		{"name": "BT_DefendHere", "type": "BlipType"},
		{"name": "BT_ObjectiveSecondary", "type": "BlipType"},
		{"name": "BT_RallyPoint", "type": "BlipType"},
		{"name": "BFS_Smoking", "type": "BuildingFireState"},
		{"name": "BFS_Burning", "type": "BuildingFireState"},
		{"name": "BFS_NotOnFire", "type": "BuildingFireState"},
		{"name": "TV_DeclinationEnabled", "type": "CameraTuningValue"},
		{"name": "TV_DistMaxDead", "type": "CameraTuningValue"},
		{"name": "TV_DistRateMouse", "type": "CameraTuningValue"},
		{"name": "TV_NISletDistMin", "type": "CameraTuningValue"},
		{"name": "TV_SlideOrbitRate", "type": "CameraTuningValue"},
		{"name": "TV_PanScaleKeyboardDefZ", "type": "CameraTuningValue"},
		{"name": "TV_PanScaleMouseDefZ", "type": "CameraTuningValue"},
		{"name": "TV_SlideDeclThreshold", "type": "CameraTuningValue"},
		{"name": "TV_PanStartSpeedScalar", "type": "CameraTuningValue"},
		{"name": "TV_EntityMinViewAngle", "type": "CameraTuningValue"},
		{"name": "TV_SlideTargetBase", "type": "CameraTuningValue"},
		{"name": "TV_NearPlaneShifter", "type": "CameraTuningValue"},
		{"name": "TV_DistMin", "type": "CameraTuningValue"},
		{"name": "TV_PanScaleScreenDefZ", "type": "CameraTuningValue"},
		{"name": "TV_NISletDistGroundMin", "type": "CameraTuningValue"},
		{"name": "TV_DeclBelow", "type": "CameraTuningValue"},
		{"name": "TV_SlideTargetThreshold", "type": "CameraTuningValue"},
		{"name": "TV_DeclAbove", "type": "CameraTuningValue"},
		{"name": "TV_DistScale", "type": "CameraTuningValue"},
		{"name": "TV_NISletDistMax", "type": "CameraTuningValue"},
		{"name": "TV_PanMaxSpeedScalar", "type": "CameraTuningValue"},
		{"name": "TV_NISletDeclAbove", "type": "CameraTuningValue"},
		{"name": "TV_NISletDistMinGround", "type": "CameraTuningValue"},
		{"name": "TV_ZoomLocked", "type": "CameraTuningValue"},
		{"name": "TV_CameraMode", "type": "CameraTuningValue"},
		{"name": "TV_DefaultAngle", "type": "CameraTuningValue"},
		{"name": "TV_PanScaleKeyboardMinZ", "type": "CameraTuningValue"},
		{"name": "TV_PanScaleMouseMinZ", "type": "CameraTuningValue"},
		{"name": "TV_DeclBelowClose", "type": "CameraTuningValue"},
		{"name": "TV_TrackElastic", "type": "CameraTuningValue"},
		{"name": "TV_DistExpWheel", "type": "CameraTuningValue"},
		{"name": "TV_DistExpMouse", "type": "CameraTuningValue"},
		{"name": "TV_DistMinGround", "type": "CameraTuningValue"},
		{"name": "TV_DistGroundTargetHeight", "type": "CameraTuningValue"},
		{"name": "TV_ClipFar", "type": "CameraTuningValue"},
		{"name": "TV_DistGroundMin", "type": "CameraTuningValue"},
		{"name": "TV_DistMinDead", "type": "CameraTuningValue"},
		{"name": "TV_DistMax", "type": "CameraTuningValue"},
		{"name": "TV_SlideDeclBase", "type": "CameraTuningValue"},
		{"name": "TV_SlideOrbitThreshold", "type": "CameraTuningValue"},
		{"name": "TV_SlideOrbitBase", "type": "CameraTuningValue"},
		{"name": "TV_SlideDistThreshold", "type": "CameraTuningValue"},
		{"name": "TV_SlideDistBase", "type": "CameraTuningValue"},
		{"name": "TV_SlideTargetRate", "type": "CameraTuningValue"},
		{"name": "TV_ClipNear", "type": "CameraTuningValue"},
		{"name": "TV_PanScaleScreenMinZ", "type": "CameraTuningValue"},
		{"name": "TV_DistRateWheelZoomIn", "type": "CameraTuningValue"},
		{"name": "TV_SlideDistRate", "type": "CameraTuningValue"},
		{"name": "TV_DistRateWheelZoomOut", "type": "CameraTuningValue"},
		{"name": "TV_TrackBoundScale", "type": "CameraTuningValue"},
		{"name": "TV_DefaultDeclination", "type": "CameraTuningValue"},
		{"name": "TV_PanAccelerate", "type": "CameraTuningValue"},
		{"name": "TV_DeclRateMouse", "type": "CameraTuningValue"},
		{"name": "TV_DistExp", "type": "CameraTuningValue"},
		{"name": "TV_DefaultHeight", "type": "CameraTuningValue"},
		{"name": "TV_SlideDeclRate", "type": "CameraTuningValue"},
		{"name": "TV_RotationEnabled", "type": "CameraTuningValue"},
		{"name": "TV_OrbitRateMouse", "type": "CameraTuningValue"},
		{"name": "TV_FieldOfView", "type": "CameraTuningValue"},
		{"name": "TV_NISletDeclBelow", "type": "CameraTuningValue"},
		{"name": "CANPRODUCE_PrerequisitesProducer", "type": "CanProduceResult"},
		{"name": "CANPRODUCE_Error", "type": "CanProduceResult"},
		{"name": "CANPRODUCE_ProductionQueueFull", "type": "CanProduceResult"},
		{"name": "CANPRODUCE_ProductionItemFull", "type": "CanProduceResult"},
		{"name": "CANPRODUCE_OutOfReinforceRadius", "type": "CanProduceResult"},
		{"name": "CANPRODUCE_Ok", "type": "CanProduceResult"},
		{"name": "CANPRODUCE_Disabled", "type": "CanProduceResult"},
		{"name": "CANPRODUCE_OutOfTerritory", "type": "CanProduceResult"},
		{"name": "CANPRODUCE_UpgradeItemFull", "type": "CanProduceResult"},
		{"name": "CANPRODUCE_PopulationCapFull", "type": "CanProduceResult"},
		{"name": "CANPRODUCE_NoResources", "type": "CanProduceResult"},
		{"name": "CANPRODUCE_PrerequisitesItem", "type": "CanProduceResult"},
		{"name": "CANPRODUCE_NoItem", "type": "CanProduceResult"},
		{"name": "CT_Medic", "type": "CapType"},
		{"name": "CT_Vehicle", "type": "CapType"},
		{"name": "CT_Personnel", "type": "CapType"},
		{"name": "CHECK_BOTH", "type": "CheckHiddenType"},
		{"name": "CHECK_OFFCAMERA", "type": "CheckHiddenType"},
		{"name": "CHECK_IN_FOW", "type": "CheckHiddenType"},
		{"name": "CT_VehicleOpticsDamaged", "type": "CriticalUIType"},
		{"name": "CT_VehicleExhaustDamaged", "type": "CriticalUIType"},
		{"name": "CT_VehicleKillCommander", "type": "CriticalUIType"},
		{"name": "CT_VehicleDriverInjured", "type": "CriticalUIType"},
		{"name": "CT_VehicleEngineYellow", "type": "CriticalUIType"},
		{"name": "CT_VehicleBack", "type": "CriticalUIType"},
		{"name": "CT_VehicleLeft", "type": "CriticalUIType"},
		{"name": "CT_VehicleRight", "type": "CriticalUIType"},
		{"name": "CT_VehicleGunnerInjured", "type": "CriticalUIType"},
		{"name": "CT_VehicleEngineGreen", "type": "CriticalUIType"},
		{"name": "CT_VehicleCrewShocked", "type": "CriticalUIType"},
		{"name": "CT_VehicleFront", "type": "CriticalUIType"},
		{"name": "CT_VehicleEngineBurning", "type": "CriticalUIType"},
		{"name": "CT_VehicleEngineRed", "type": "CriticalUIType"},
		{"name": "CT_VehicleSecondaryWeapon", "type": "CriticalUIType"},
		{"name": "CT_VehicleLoseTreadsOrWheels", "type": "CriticalUIType"},
		{"name": "CT_VehicleOutOfControl", "type": "CriticalUIType"},
		{"name": "CT_VehiclePrimaryWeapon", "type": "CriticalUIType"},
		{"name": "Crush_Heavy", "type": "CrushMode"},
		{"name": "Crush_Off", "type": "CrushMode"},
		{"name": "Crush_Light", "type": "CrushMode"},
		{"name": "Crush_Medium", "type": "CrushMode"},
		{"name": "DB_Button3", "type": "DialogButton"},
		{"name": "DB_Button1", "type": "DialogButton"},
		{"name": "DB_Close", "type": "DialogButton"},
		{"name": "DB_Button2", "type": "DialogButton"},
		{"name": "CMD_InstantBuildSquad", "type": "EntityCommandType"},
		{"name": "CMD_InstantDeath", "type": "EntityCommandType"},
		{"name": "CMD_AttackStop", "type": "EntityCommandType"},
		{"name": "CMD_BuildStructure", "type": "EntityCommandType"},
		{"name": "CMD_Face", "type": "EntityCommandType"},
		{"name": "CMD_CancelProduction", "type": "EntityCommandType"},
		{"name": "CMD_RescueCasualty", "type": "EntityCommandType"},
		{"name": "CMD_SetHoldHeading", "type": "EntityCommandType"},
		{"name": "CMD_DefuseMine", "type": "EntityCommandType"},
		{"name": "CMD_AttackMove", "type": "EntityCommandType"},
		{"name": "CMD_Fidget", "type": "EntityCommandType"},
		{"name": "CMD_Stop", "type": "EntityCommandType"},
		{"name": "CMD_PlaceCharge", "type": "EntityCommandType"},
		{"name": "CMD_Paradrop", "type": "EntityCommandType"},
		{"name": "CMD_Destroy", "type": "EntityCommandType"},
		{"name": "CMD_Load", "type": "EntityCommandType"},
		{"name": "CMD_Ability", "type": "EntityCommandType"},
		{"name": "CMD_Move", "type": "EntityCommandType"},
		{"name": "CMD_InstantUpgrade", "type": "EntityCommandType"},
		{"name": "CMD_UnloadSquads", "type": "EntityCommandType"},
		{"name": "CMD_Casualty", "type": "EntityCommandType"},
		{"name": "CMD_BuildSquad", "type": "EntityCommandType"},
		{"name": "CMD_Halt", "type": "EntityCommandType"},
		{"name": "CMD_Attack", "type": "EntityCommandType"},
		{"name": "CMD_Capture", "type": "EntityCommandType"},
		{"name": "CMD_AttackForced", "type": "EntityCommandType"},
		{"name": "CMD_Death", "type": "EntityCommandType"},
		{"name": "CMD_Unload", "type": "EntityCommandType"},
		{"name": "CMD_Evacuate", "type": "EntityCommandType"},
		{"name": "CMD_BuildEntity", "type": "EntityCommandType"},
		{"name": "CMD_Vault", "type": "EntityCommandType"},
		{"name": "CMD_AttackFromHold", "type": "EntityCommandType"},
		{"name": "CMD_RallyPoint", "type": "EntityCommandType"},
		{"name": "CMD_DefaultAction", "type": "EntityCommandType"},
		{"name": "CMD_Upgrade", "type": "EntityCommandType"},
		{"name": "CMD_ChooseResource", "type": "EntityCommandType"},
		{"name": "CMD_Projectile", "type": "EntityCommandType"},
		{"name": "STATEID_Capture", "type": "EntityStateID"},
		{"name": "STATEID_Idle", "type": "EntityStateID"},
		{"name": "STATEID_Evacuate", "type": "EntityStateID"},
		{"name": "STATEID_StructureBuilding", "type": "EntityStateID"},
		{"name": "STATEID_RepairEngineer", "type": "EntityStateID"},
		{"name": "STATEID_Move", "type": "EntityStateID"},
		{"name": "STATEID_Dead", "type": "EntityStateID"},
		{"name": "STATEID_DefuseMine", "type": "EntityStateID"},
		{"name": "GE_ProjectileFired", "type": "GameEventType"},
		{"name": "GE_AIPlayer_Migrated", "type": "GameEventType"},
		{"name": "GE_EntityKilled", "type": "GameEventType"},
		{"name": "GE_TerritoryEntered", "type": "GameEventType"},
		{"name": "GE_ConstructionComplete", "type": "GameEventType"},
		{"name": "GE_NonGlobalCamoDetected", "type": "GameEventType"},
		{"name": "GE_SquadPinned", "type": "GameEventType"},
		{"name": "GE_BuildItemComplete", "type": "GameEventType"},
		{"name": "GE_PlayerKilled", "type": "GameEventType"},
		{"name": "GE_EntityCommandIssued", "type": "GameEventType"},
		{"name": "GE_StrategicPointChanged", "type": "GameEventType"},
		{"name": "GE_PlayerDonation", "type": "GameEventType"},
		{"name": "GE_AbilityExecuted", "type": "GameEventType"},
		{"name": "GE_PlayerDropped", "type": "GameEventType"},
		{"name": "GE_PlayerBeingAttacked", "type": "GameEventType"},
		{"name": "GE_UpgradeComplete", "type": "GameEventType"},
		{"name": "GE_PlayerSkipNIS", "type": "GameEventType"},
		{"name": "GE_AIPlayer_ObjectiveNotification", "type": "GameEventType"},
		{"name": "GE_ResourceDepleted", "type": "GameEventType"},
		{"name": "GE_CustomUIEvent", "type": "GameEventType"},
		{"name": "GE_SquadKilled", "type": "GameEventType"},
		{"name": "GE_PlayerSurrendered", "type": "GameEventType"},
		{"name": "GE_SquadCommandIssued", "type": "GameEventType"},
		{"name": "GE_EntityParadropComplete", "type": "GameEventType"},
		{"name": "GE_PlayerCheat", "type": "GameEventType"},
		{"name": "GE_InfoPointActivated", "type": "GameEventType"},
		{"name": "GE_SpawnActionComplete", "type": "GameEventType"},
		{"name": "GE_PlayerCommandIssued", "type": "GameEventType"},
		{"name": "GE_PlayerHostMigrated", "type": "GameEventType"},
		{"name": "GE_SquadParadropComplete", "type": "GameEventType"},
		{"name": "GE_PlayerPhaseUp", "type": "GameEventType"},
		{"name": "HPAT_Hint", "type": "HintPointActionType"},
		{"name": "HPAT_MovementLooping", "type": "HintPointActionType"},
		{"name": "HPAT_Bonus", "type": "HintPointActionType"},
		{"name": "HPAT_Vaulting", "type": "HintPointActionType"},
		{"name": "HPAT_Detonation", "type": "HintPointActionType"},
		{"name": "HPAT_CoverRed", "type": "HintPointActionType"},
		{"name": "HPAT_CoverYellow", "type": "HintPointActionType"},
		{"name": "HPAT_Artillery", "type": "HintPointActionType"},
		{"name": "HPAT_FormationSetup", "type": "HintPointActionType"},
		{"name": "HPAT_Movement", "type": "HintPointActionType"},
		{"name": "HPAT_Critical", "type": "HintPointActionType"},
		{"name": "HPAT_Objective", "type": "HintPointActionType"},
		{"name": "HPAT_AttackLooping", "type": "HintPointActionType"},
		{"name": "HPAT_DeepSnow", "type": "HintPointActionType"},
		{"name": "HPAT_CoverGreen", "type": "HintPointActionType"},
		{"name": "HPAT_Attack", "type": "HintPointActionType"},
		{"name": "HPAT_RallyPoint", "type": "HintPointActionType"},
		{"name": "HUDF_None", "type": "HUDFeatureType"},
		{"name": "HUDF_AbilityCard", "type": "HUDFeatureType"},
		{"name": "HUDF_Upgrades", "type": "HUDFeatureType"},
		{"name": "HUDF_CommandCard", "type": "HUDFeatureType"},
		{"name": "HUDF_MiniMap", "type": "HUDFeatureType"},
		{"name": "LOOP_NORMAL", "type": "LoopType"},
		{"name": "LOOP_TOGGLE_DIRECTION", "type": "LoopType"},
		{"name": "LOOP_NONE", "type": "LoopType"},
		{"name": "MAP_Confirmed", "type": "ModalAbilityPhase"},
		{"name": "MAP_Placing", "type": "ModalAbilityPhase"},
		{"name": "MAP_Facing", "type": "ModalAbilityPhase"},
		{"name": "MAT_Entity", "type": "ModifierApplicationType"},
		{"name": "MAT_Player", "type": "ModifierApplicationType"},
		{"name": "MAT_Weapon", "type": "ModifierApplicationType"},
		{"name": "MAT_Upgrade", "type": "ModifierApplicationType"},
		{"name": "MAT_EntityType", "type": "ModifierApplicationType"},
		{"name": "MAT_Ability", "type": "ModifierApplicationType"},
		{"name": "MAT_Squad", "type": "ModifierApplicationType"},
		{"name": "MAT_WeaponType", "type": "ModifierApplicationType"},
		{"name": "MAT_SquadType", "type": "ModifierApplicationType"},
		{"name": "MUT_Multiplication", "type": "ModifierUsageType"},
		{"name": "MUT_MultiplyAdd", "type": "ModifierUsageType"},
		{"name": "MUT_Addition", "type": "ModifierUsageType"},
		{"name": "MUT_Enable", "type": "ModifierUsageType"},
		{"name": "PBG_Weapon", "type": "ModPropertyBagGroupTypes"},
		{"name": "PBG_MoveType", "type": "ModPropertyBagGroupTypes"},
		{"name": "PBG_SlotItem", "type": "ModPropertyBagGroupTypes"},
		{"name": "PBG_UITacticalMap", "type": "ModPropertyBagGroupTypes"},
		{"name": "PBG_HitMaterial", "type": "ModPropertyBagGroupTypes"},
		{"name": "PBG_PassType", "type": "ModPropertyBagGroupTypes"},
		{"name": "PBG_Race", "type": "ModPropertyBagGroupTypes"},
		{"name": "PBG_UISelection", "type": "ModPropertyBagGroupTypes"},
		{"name": "PBG_Critical", "type": "ModPropertyBagGroupTypes"},
		{"name": "PBG_CamouflageStance", "type": "ModPropertyBagGroupTypes"},
		{"name": "PBG_Material", "type": "ModPropertyBagGroupTypes"},
		{"name": "PBG_Tuning", "type": "ModPropertyBagGroupTypes"},
		{"name": "PBG_Ability", "type": "ModPropertyBagGroupTypes"},
		{"name": "PBG_Upgrade", "type": "ModPropertyBagGroupTypes"},
		{"name": "PBG_Posture", "type": "ModPropertyBagGroupTypes"},
		{"name": "PBG_UITerritory", "type": "ModPropertyBagGroupTypes"},
		{"name": "MM_ForceTense", "type": "MoodMode"},
		{"name": "MM_ForceCalm", "type": "MoodMode"},
		{"name": "MM_Auto", "type": "MoodMode"},
		{"name": "FN_OnShow", "type": "ObjectiveFunction"},
		{"name": "FN_OnCounterDisplay", "type": "ObjectiveFunction"},
		{"name": "FN_OnActivate", "type": "ObjectiveFunction"},
		{"name": "FN_LuaTableQuery", "type": "ObjectiveFunction"},
		{"name": "FN_OnSelect", "type": "ObjectiveFunction"},
		{"name": "OS_Complete", "type": "ObjectiveState"},
		{"name": "OS_Incomplete", "type": "ObjectiveState"},
		{"name": "OS_Off", "type": "ObjectiveState"},
		{"name": "OS_Failed", "type": "ObjectiveState"},
		{"name": "OT_Secondary", "type": "ObjectiveType"},
		{"name": "OT_Primary", "type": "ObjectiveType"},
		{"name": "OT_Ally", "type": "OwnerType"},
		{"name": "OT_Neutral", "type": "OwnerType"},
		{"name": "OT_Player", "type": "OwnerType"},
		{"name": "OT_Enemy", "type": "OwnerType"},
		{"name": "PCMD_MunitionDonation", "type": "PlayerCommandType"},
		{"name": "PCMD_SlotItemRemove", "type": "PlayerCommandType"},
		{"name": "PCMD_CriticalHit", "type": "PlayerCommandType"},
		{"name": "PCMD_CheatBuildTime", "type": "PlayerCommandType"},
		{"name": "PCMD_Ability", "type": "PlayerCommandType"},
		{"name": "PCMD_SetCommander", "type": "PlayerCommandType"},
		{"name": "PCMD_CheatRevealAll", "type": "PlayerCommandType"},
		{"name": "PCMD_ManpowerDonation", "type": "PlayerCommandType"},
		{"name": "PCMD_UpgradeRemove", "type": "PlayerCommandType"},
		{"name": "PCMD_ConstructField", "type": "PlayerCommandType"},
		{"name": "PCMD_CancelProduction", "type": "PlayerCommandType"},
		{"name": "PCMD_CheatKillSelf", "type": "PlayerCommandType"},
		{"name": "PCMD_Upgrade", "type": "PlayerCommandType"},
		{"name": "PCMD_ConstructFence", "type": "PlayerCommandType"},
		{"name": "PCMD_FuelDonation", "type": "PlayerCommandType"},
		{"name": "PCMD_DetonateCharges", "type": "PlayerCommandType"},
		{"name": "PCMD_CheatResources", "type": "PlayerCommandType"},
		{"name": "PCMD_AIPlayer", "type": "PlayerCommandType"},
		{"name": "PCMD_AIPlayer_ObjectiveNotification", "type": "PlayerCommandType"},
		{"name": "PCMD_ConstructStructure", "type": "PlayerCommandType"},
		{"name": "PCMD_InstantUpgrade", "type": "PlayerCommandType"},
		{"name": "PITEM_SquadUpgrade", "type": "ProductionItemType"},
		{"name": "PITEM_SquadReinforce", "type": "ProductionItemType"},
		{"name": "PITEM_Spawn", "type": "ProductionItemType"},
		{"name": "PITEM_Upgrade", "type": "ProductionItemType"},
		{"name": "PT_Rectangle", "type": "ProximityType"},
		{"name": "PT_Circle", "type": "ProximityType"},
		{"name": "R_NEUTRAL", "type": "Relationship"},
		{"name": "R_ENEMY", "type": "Relationship"},
		{"name": "R_UNDEFINED", "type": "Relationship"},
		{"name": "R_ALLY", "type": "Relationship"},
		{"name": "RT_SovietOrder227", "type": "ResourceType"},
		{"name": "RT_Command", "type": "ResourceType"},
		{"name": "RT_SovietProgression", "type": "ResourceType"},
		{"name": "RT_Popcap", "type": "ResourceType"},
		{"name": "RT_Manpower", "type": "ResourceType"},
		{"name": "RT_Munition", "type": "ResourceType"},
		{"name": "RT_Fuel", "type": "ResourceType"},
		{"name": "RT_Action", "type": "ResourceType"},
		{"name": "RUIITEM_Population", "type": "ResourceUIItem"},
		{"name": "RUIITEM_ResourceBar", "type": "ResourceUIItem"},
		{"name": "RUIITEM_Munitions", "type": "ResourceUIItem"},
		{"name": "RUIITEM_Manpower", "type": "ResourceUIItem"},
		{"name": "RUIITEM_Fuel", "type": "ResourceUIItem"},
		{"name": "ST_MARKER", "type": "ScarType"},
		{"name": "ST_PBG", "type": "ScarType"},
		{"name": "ST_SCARPOS", "type": "ScarType"},
		{"name": "ST_AIPLAYER", "type": "ScarType"},
		{"name": "ST_TABLE", "type": "ScarType"},
		{"name": "ST_EGROUP", "type": "ScarType"},
		{"name": "ST_AISTATSMILITARYPOINT", "type": "ScarType"},
		{"name": "ST_AISQUAD", "type": "ScarType"},
		{"name": "ST_ENTITY", "type": "ScarType"},
		{"name": "ST_NUMBER", "type": "ScarType"},
		{"name": "ST_FUNCTION", "type": "ScarType"},
		{"name": "ST_SQUAD", "type": "ScarType"},
		{"name": "ST_PLAYER", "type": "ScarType"},
		{"name": "ST_BOOLEAN", "type": "ScarType"},
		{"name": "ST_NIL", "type": "ScarType"},
		{"name": "ST_CONSTPLAYER", "type": "ScarType"},
		{"name": "ST_UNKNOWN", "type": "ScarType"},
		{"name": "ST_SGROUP", "type": "ScarType"},
		{"name": "ST_STRING", "type": "ScarType"},
		{"name": "ST_AICAPTUREPOINT", "type": "ScarType"},
		{"name": "PBG_TurnPlan", "type": "SimPropertyBagGroupTypes"},
		{"name": "PBG_EntityProperties", "type": "SimPropertyBagGroupTypes"},
		{"name": "PBG_SquadFormation", "type": "SimPropertyBagGroupTypes"},
		{"name": "PBG_SquadProperties", "type": "SimPropertyBagGroupTypes"},
		{"name": "PBG_Formation", "type": "SimPropertyBagGroupTypes"},
		{"name": "DEBUG_SELECTOR", "type": "SpeechDebugMode"},
		{"name": "DEBUG_COMBATZONES", "type": "SpeechDebugMode"},
		{"name": "SCMD_Attack", "type": "SquadCommandType"},
		{"name": "SCMD_Upgrade", "type": "SquadCommandType"},
		{"name": "SCMD_StationaryAttack", "type": "SquadCommandType"},
		{"name": "SCMD_SlotItemRemove", "type": "SquadCommandType"},
		{"name": "SCMD_Pilfer", "type": "SquadCommandType"},
		{"name": "SCMD_SetMoveType", "type": "SquadCommandType"},
		{"name": "SCMD_Ability", "type": "SquadCommandType"},
		{"name": "SCMD_Move", "type": "SquadCommandType"},
		{"name": "SCMD_BuildStructure", "type": "SquadCommandType"},
		{"name": "SCMD_InstantLoad", "type": "SquadCommandType"},
		{"name": "SCMD_Merge", "type": "SquadCommandType"},
		{"name": "SCMD_UnloadSquads", "type": "SquadCommandType"},
		{"name": "SCMD_Retreat", "type": "SquadCommandType"},
		{"name": "SCMD_DefaultAction", "type": "SquadCommandType"},
		{"name": "SCMD_RescueCasualty", "type": "SquadCommandType"},
		{"name": "SCMD_Stop", "type": "SquadCommandType"},
		{"name": "SCMD_SetCamouflageStance", "type": "SquadCommandType"},
		{"name": "SCMD_AttackMove", "type": "SquadCommandType"},
		{"name": "SCMD_RevertFieldSupport", "type": "SquadCommandType"},
		{"name": "SCMD_CancelProduction", "type": "SquadCommandType"},
		{"name": "SCMD_Capture", "type": "SquadCommandType"},
		{"name": "SCMD_Surprise", "type": "SquadCommandType"},
		{"name": "SCMD_ReinforceUnit", "type": "SquadCommandType"},
		{"name": "SCMD_CaptureTeamWeapon", "type": "SquadCommandType"},
		{"name": "SCMD_Patrol", "type": "SquadCommandType"},
		{"name": "SCMD_Face", "type": "SquadCommandType"},
		{"name": "SCMD_Recrew", "type": "SquadCommandType"},
		{"name": "SCMD_DoPlan", "type": "SquadCommandType"},
		{"name": "SCMD_DefuseCharge", "type": "SquadCommandType"},
		{"name": "SCMD_PickUpSlotItem", "type": "SquadCommandType"},
		{"name": "SCMD_BuildSquad", "type": "SquadCommandType"},
		{"name": "SCMD_InstantReinforceUnit", "type": "SquadCommandType"},
		{"name": "SCMD_Load", "type": "SquadCommandType"},
		{"name": "SCMD_InstantSetupTeamWeapon", "type": "SquadCommandType"},
		{"name": "SCMD_RallyPoint", "type": "SquadCommandType"},
		{"name": "SCMD_AbandonTeamWeapon", "type": "SquadCommandType"},
		{"name": "SCMD_Unload", "type": "SquadCommandType"},
		{"name": "SCMD_DefuseMine", "type": "SquadCommandType"},
		{"name": "SCMD_Destroy", "type": "SquadCommandType"},
		{"name": "SCMD_PlaceCharge", "type": "SquadCommandType"},
		{"name": "SCMD_InstantUpgrade", "type": "SquadCommandType"},
		{"name": "SQUADSTATEID_Capture", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_CaptureTeamWeapon", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_Move", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_Retreat", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_Plan", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_AttackMove", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_Load", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_Defuse", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_DefuseMine", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_Stop", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_Patrol", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_Ability", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_CombatStance", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_RevertFieldSupport", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_Unload", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_HoldUnload", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_PickUpSlotItem", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_Construction", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_Idle", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_WeaponTransition", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_Recrew", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_PlaceCharges", "type": "SquadStateID"},
		{"name": "SQUADSTATEID_Combat", "type": "SquadStateID"},
		{"name": "UIE_UpgradeComplete", "type": "UIEventType"},
		{"name": "UIE_PlayerPingOfShameLocal", "type": "UIEventType"},
		{"name": "UIE_EnemyReveal", "type": "UIEventType"},
		{"name": "UIE_InfoPointActivated", "type": "UIEventType"},
		{"name": "UIE_AITakeOver", "type": "UIEventType"},
		{"name": "UIE_VehicleComplete", "type": "UIEventType"},
		{"name": "UIE_AllyAttacked", "type": "UIEventType"},
		{"name": "UIE_CommanderAbilityUnlocked", "type": "UIEventType"},
		{"name": "UIE_CommandersUnlocked", "type": "UIEventType"},
		{"name": "UIE_CommandPointGained", "type": "UIEventType"},
		{"name": "UIE_SquadFreezing", "type": "UIEventType"},
		{"name": "UIE_SquadCold", "type": "UIEventType"},
		{"name": "UIE_CasualtySquadSpawned", "type": "UIEventType"},
		{"name": "UIE_SquadVeterancy", "type": "UIEventType"},
		{"name": "UIE_VehicleReplaced", "type": "UIEventType"},
		{"name": "UIE_InfantryReplaced", "type": "UIEventType"},
		{"name": "UIE_Sniped", "type": "UIEventType"},
		{"name": "UIE_BoobyTrap", "type": "UIEventType"},
		{"name": "UIE_MineDetected", "type": "UIEventType"},
		{"name": "UIE_AbilityExectued", "type": "UIEventType"},
		{"name": "UIE_StrategicPointCaptured", "type": "UIEventType"},
		{"name": "UIE_StrategicPointReverting", "type": "UIEventType"},
		{"name": "UIE_EnemyTerritoryEntered", "type": "UIEventType"},
		{"name": "UIE_TerritoryEntered", "type": "UIEventType"},
		{"name": "UIE_PlayerSurrendered", "type": "UIEventType"},
		{"name": "UIE_PlayerAttacked", "type": "UIEventType"},
		{"name": "UIE_VehicleAttacked", "type": "UIEventType"},
		{"name": "UIE_PlayerKilled", "type": "UIEventType"},
		{"name": "UIE_PlayerKicked", "type": "UIEventType"},
		{"name": "UIE_PlayerLagComplaint", "type": "UIEventType"},
		{"name": "UIE_PlayerPingOfShame", "type": "UIEventType"},
		{"name": "UIE_PlayerDropped", "type": "UIEventType"},
		{"name": "UIE_ConstructionComplete", "type": "UIEventType"},
		{"name": "UIE_StrategicPointSecured", "type": "UIEventType"},
		{"name": "UIE_ResourceDepleted", "type": "UIEventType"},
		{"name": "UIE_SquadPinned", "type": "UIEventType"},
		{"name": "UIE_InfantryAttacked", "type": "UIEventType"},
		{"name": "UIE_InfantryComplete", "type": "UIEventType"},
		{"name": "UIE_PlayerCheated", "type": "UIEventType"},
		{"name": "UIE_PhaseUp", "type": "UIEventType"},
		{"name": "UIE_HostMigrated", "type": "UIEventType"},
		{"name": "UIE_Default", "type": "UIEventType"},
		{"name": "UI_Cinematic", "type": "UIMode"},
		{"name": "UI_Fullscreen", "type": "UIMode"},
		{"name": "UI_Normal", "type": "UIMode"},
		{"name": "UOT_Player", "type": "UpgradeOwnerType"},
		{"name": "UOT_Self", "type": "UpgradeOwnerType"},
		{"name": "UOT_None", "type": "UpgradeOwnerType"},  
		{"name": "BIS_Icon", "type": "ButtonIconStyle"},  
		{"name": "BIS_IconState", "type": "ButtonIconStyle"},  
		{"name": "LAH_Justify", "type": "LabelAlignHorizontal"},  
		{"name": "LAH_Left", "type": "LabelAlignHorizontal"},  
		{"name": "LAH_Center", "type": "LabelAlignHorizontal"},  
		{"name": "LAH_Right", "type": "LabelAlignHorizontal"},  
		{"name": "LAV_None", "type": "LabelAlignVertical"},  
		{"name": "LAV_Top", "type": "LabelAlignVertical"},  
		{"name": "LAV_Center", "type": "LabelAlignVertical"},  
		{"name": "LAV_Bottom", "type": "LabelAlignVertical"}
	]
}