{
	"functions": [
		{
			"name": "_IntelDebugNext",
			"returnType": "void",
			"parameters": [
			],
			"description": "Plays the next intel event in the debug queue. IntelEvents are played sequentially as they are defined in a mission's .events file."
		}, 
		{
			"name": "_IntelDebugPrev",
			"returnType": "void",
			"parameters": [
			],
			"description": "Plays the next intel event in the debug queue. IntelEvents are played sequentially as they are defined in a mission's .events file."
		}, 
		{
			"name": "_IntelDebugReplay",
			"returnType": "void",
			"parameters": [
			],
			"description": "Replays the last intel event that was debugged."
		}, 
		{
			"name": "Actor_Clear",
			"returnType": "Void",
			"parameters": [
				{"name": "actor", "type": "ActorTable"}
			],
			"description": "Clear ties between an actor and any units."
		}, 
		{
			"name": "Actor_PlaySpeech",
			"returnType": "Void",
			"parameters": [
				{"name": "actor", "type": "ActorTable"}, 
				{"name": "locID", "type": "Integer"}, 
				{"name": "continueButton", "type": "Boolean"}, 
				{"name": "stickySubtitle", "type": "Boolean"}, 
				{"name": "blockInput", "type": "Boolean"}
			],
			"description": "Plays a speech event for a given actor WITH a portrait and subtitle."
		}, 
		{
			"name": "Actor_PlaySpeechWithoutPortrait",
			"returnType": "Void",
			"parameters": [
				{"name": "actor", "type": "ActorTable"}, 
				{"name": "locID", "type": "Integer"}, 
				{"name": "continueButton", "type": "Boolean"}, 
				{"name": "stickySubtitle", "type": "Boolean"}, 
				{"name": "blockInput", "type": "Boolean"}
			],
			"description": "Plays a speech event for a given actor WITHOUT a portrait or subtitle. See Actor_PlaySpeech for more details."
		}, 
		{
			"name": "Actor_SetFromSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "actor", "type": "ActorTable"}, 
				{"name": "sgroup", "type": "SGroupID"}
			],
			"description": "Tie an entire sgroup to an actor, so audio comes from a squad member."
		}, 
		{
			"name": "Actor_SetFromSquad",
			"returnType": "Void",
			"parameters": [
				{"name": "actor", "type": "ActorTable"}, 
				{"name": "squad", "type": "SquadID"}
			],
			"description": "Tie a single squad to an actor, so audio comes from a squad member."
		}, 
		{
			"name": "AIObjective_Notify_SetFailureCallback",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective *"}, 
				{"name": "f", "type": "LuaConfig::RefFunction"}
			],
			"description": "Sets the failure notification callback for objective."
		}, 
		{
			"name": "AIObjective_Notify_SetOnTransitionCallback",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective *"}, 
				{"name": "f", "type": "LuaConfig::RefFunction"}
			],
			"description": "Sets the transition notification callback for objective."
		}, 
		{
			"name": "AIObjective_Notify_SetSuccessCallback",
			"returnType": "void",
			"parameters": [
				{"name": "pObjective", "type": "AIObjective *"}, 
				{"name": "f", "type": "LuaConfig::RefFunction"}
			],
			"description": "Sets the success notification callback for objective."
		}, 
		{
			"name": "AIPlayer_GetBestClumpForSquadIdx",
			"returnType": "int",
			"parameters": [
				{"name": "pPlayer", "type": "AIPlayer *"}, 
				{"name": "pSquad", "type": "AISquad *"}, 
				{"name": "pAbilityPBG", "type": "const PropertyBagGroup *"}, 
				{"name": "minRange", "type": "float"}, 
				{"name": "maxRange", "type": "float"}, 
				{"name": "targetFilterFlags", "type": "uint32_t"}
			],
			"description": "returns a 0-based index of the best clump of enemy squads within the given tolerance to the AI squad"
		}, 
		{
			"name": "AIPlayer_GetBestClumpIdx",
			"returnType": "int",
			"parameters": [
				{"name": "pPlayer", "type": "AIPlayer *"}, 
				{"name": "pAbilityPBG", "type": "const PropertyBagGroup *"}, 
				{"name": "minRange", "type": "float"}, 
				{"name": "maxRange", "type": "float"}, 
				{"name": "clumpSelectionGlobalBestMinRatio", "type": "float"}, 
				{"name": "targetFilterFlags", "type": "uint32_t"}
			],
			"description": "returns a 0-based index of the best clump of enemy squads within the given tolerance to the AI player"
		}, 
		{
			"name": "AIPlayer_GetClumpPosition",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "pPlayer", "type": "AIPlayer *"}, 
				{"name": "clumpIndex", "type": "int"}, 
				{"name": "targetFilterFlags", "type": "uint32_t"}
			],
			"description": "Used for tactics; returns a \"special error position\" on failure that's nowhere inside the world."
		}, 
		{
			"name": "AIPlayer_GetLocal",
			"returnType": "AIPlayer *",
			"parameters": [
				{"name": "playerId", "type": "uint32_t"}
			],
			"description": "Returns the local AIPlayer given a PlayerId (1000-1008)"
		}, 
		{
			"name": "AIPlayer_GetLocalFromPlayer",
			"returnType": "AIPlayer *",
			"parameters": [
				{"name": "pPlayerIn", "type": "const ModPlayer *"}
			],
			"description": "Returns the local AIPlayer given a ModPlayer pointer."
		}, 
		{
			"name": "AIPlayer_UpdateSkirmishAttackAndCaptureTasks",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "AIPlayer *"}
			],
			"description": "Requests the skirmish AI to update attack objectives and capture tasks."
		}, 
		{
			"name": "AIPlayer_UpdateSkirmishPlayerAbilities",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "AIPlayer *"}
			],
			"description": "Requests the skirmish AI to update player abilities."
		}, 
		{
			"name": "AIPlayer_UpdateSkirmishProduction",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "AIPlayer *"}
			],
			"description": "Updates what the skirmish AI is trying to produce."
		}, 
		{
			"name": "AISquad_FindFilteredCoverCompareCurrent",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "player", "type": "AIPlayer *"}, 
				{"name": "aiSquad", "type": "AISquad *"}, 
				{"name": "maxPathDistanceFromGoal", "type": "float"}, 
				{"name": "compareToCurrentCover", "type": "bool"}
			],
			"description": "Tries to find cover within a certain radius of a position, traveling a max distance to get there, and possibly comparing against current position's cover. If no cover is found, it returns an invalid position."
		}, 
		{
			"name": "AISquad_GetClosestCuttableObstruction",
			"returnType": "Entity *",
			"parameters": [
				{"name": "pSquad", "type": "AISquad *"}, 
				{"name": "radius", "type": "float"}
			],
			"description": "Returns the closest cuttable obstruction entity to the given squad."
		}, 
		{
			"name": "AISquad_GetClosestObstruction",
			"returnType": "Entity *",
			"parameters": [
				{"name": "pSquad", "type": "AISquad *"}, 
				{"name": "radius", "type": "float"}, 
				{"name": "bFilterAllied", "type": "bool"}
			],
			"description": "Returns the closest obstruction entity to the given squad."
		}, 
		{
			"name": "AISquad_GetClosestObstructionOfType",
			"returnType": "Entity *",
			"parameters": [
				{"name": "pSquad", "type": "AISquad *"}, 
				{"name": "radius", "type": "float"}, 
				{"name": "pbgtype", "type": "const PropertyBagGroup *"}
			],
			"description": "Returns the closest obstruction entity to the given squad."
		}, 
		{
			"name": "AISquad_HasBeenAttacked",
			"returnType": "bool",
			"parameters": [
				{"name": "pAISquad", "type": "AISquad *"}, 
				{"name": "historyTicks", "type": "size_t"}
			],
			"description": "Checks if the squad has been attacked within this time."
		}, 
		{
			"name": "AISquad_HasFiredWeapon",
			"returnType": "bool",
			"parameters": [
				{"name": "pAISquad", "type": "AISquad *"}, 
				{"name": "historyTicks", "type": "size_t"}
			],
			"description": "Checks if the squad has fired its weapon within this time."
		}, 
		{
			"name": "AITargetFilterContext_GetAbilityToUse",
			"returnType": "const PropertyBagGroup *",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Returns the Ability to use in the current AI Target Filter Context."
		}, 
		{
			"name": "AITargetFilterContext_GetRangeMax",
			"returnType": "float",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Returns the maximum range value in the current AI Target Filter Context."
		}, 
		{
			"name": "AITargetFilterContext_GetRangeMin",
			"returnType": "float",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Returns the minimum range value in the current AI Target Filter Context."
		}, 
		{
			"name": "AITargetFilterContext_GetSuggestedPosition",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Returns the suggested position in the current AI Target Filter Context."
		}, 
		{
			"name": "AITargetFilterContext_GetTargetEntityGroup",
			"returnType": "EGroup *",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Returns the Entity Group in the current AI Target Filter Context."
		}, 
		{
			"name": "AITargetFilterContext_GetTargetSquadGroup",
			"returnType": "SGroup *",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Returns the Squad Group in the current AI Target Filter Context."
		}, 
		{
			"name": "AutoCinematic",
			"returnType": "Void",
			"parameters": [
				{"name": "out", "type": "Boolean in/"}, 
				{"name": "seconds", "type": "Real"}
			],
			"description": "Toggles all cinematic related settings. true = go to cinematic, false = go back to normal."
		}, 
		{
			"name": "AutoReinforce_AddSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "origin", "type": "Variable"}
			],
			"description": "Adds an SGroup to the auto-reinforce functions."
		}, 
		{
			"name": "AutoReinforce_RemoveAll",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "any"}
			],
			"description": "Stops monitoring all squads from the auto-reinforce functions."
		}, 
		{
			"name": "AutoReinforce_RemoveSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}
			],
			"description": "Removes an SGroup from the auto-reinforce functions."
		}, 
		{
			"name": "AutoRetreat_AddSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "destination", "type": "MarkerID/Position/EGroupID"}, 
				{"name": "threshold", "type": "Real"}, 
				{"name": "onTrigger", "type": "LuaFunction"}
			],
			"description": "Sets an sgroup to retreat to the given destination or building once pinned for a certain duration, or reduced to a third of it's original size."
		}, 
		{
			"name": "AutoRetreat_RemoveAll",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "any"}
			],
			"description": "Stops monitoring all squads from the auto-retreat functions."
		}, 
		{
			"name": "AutoRetreat_RemoveSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}
			],
			"description": "Removes a squad from being monitored by the auto-retreat functions."
		}, 
		{
			"name": "BeginnerHint_AddOpportunity",
			"returnType": "OpportunityID",
			"parameters": [
				{"name": "where", "type": "Pos/Group/Table"}, 
				{"name": "ability", "type": "AbilityID/Table"}, 
				{"name": "repeating", "type": "Bool"}, 
				{"name": "message", "type": "LocText"}, 
				{"name": "icon", "type": "String"}, 
				{"name": "arrow", "type": "HPAT"}, 
				{"name": "max_difficulty", "type": "GD"}, 
				{"name": "ignore_timers", "type": "Bool"}
			],
			"description": "Add an opportunity that may get highlighted by the hint manager system on easier difficulty modes. THIS IS NOT MP-SAFE!"
		}, 
		{
			"name": "BeginnerHint_AddOpportunity",
			"returnType": "OpportunityID",
			"parameters": [
				{"name": "where", "type": "Pos/Group/Table"}, 
				{"name": "ability", "type": "AbilityID/Table"}, 
				{"name": "repeating", "type": "Bool"}, 
				{"name": "message", "type": "LocText"}, 
				{"name": "icon", "type": "String"}, 
				{"name": "arrow", "type": "HPAT"}, 
				{"name": "max_difficulty", "type": "GD"}, 
				{"name": "ignore_timers", "type": "Bool"}
			],
			"description": "Add an opportunity that may get highlighted by the hint manager system on easier difficulty modes. THIS IS NOT MP-SAFE!"
		}, 
		{
			"name": "BeginnerHint_RemoveAllOpportunities",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "any"}
			],
			"description": "Remove all opportunities in one fell swoop!"
		}, 
		{
			"name": "BeginnerHint_RemoveAllOpportunities",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "any"}
			],
			"description": "Remove all opportunities in one fell swoop!"
		}, 
		{
			"name": "BeginnerHint_RemoveOpportunity",
			"returnType": "Void",
			"parameters": [
				{"name": "where", "type": "Pos/OpportunityID"}
			],
			"description": "Remove an opportunity, either by ID or all opportunities at a location."
		}, 
		{
			"name": "BeginnerHint_RemoveOpportunity",
			"returnType": "Void",
			"parameters": [
				{"name": "where", "type": "Pos/OpportunityID"}
			],
			"description": "Remove an opportunity, either by ID or all opportunities at a location."
		}, 
		{
			"name": "BP_GetAbilityBlueprint",
			"returnType": "ScarAbilityPBG",
			"parameters": [
				{"name": "pbgShortname", "type": "const char *"}
			],
			"description": "Returns an ability property bag group."
		}, 
		{
			"name": "BP_GetCamouflageStanceBlueprint",
			"returnType": "ScarCamouflageStancePBG",
			"parameters": [
				{"name": "pbgShortname", "type": "const char *"}
			],
			"description": "Returns a camouflage stance property bag group."
		}, 
		{
			"name": "BP_GetCriticalBlueprint",
			"returnType": "ScarCriticalPBG",
			"parameters": [
				{"name": "pbgShortname", "type": "const char *"}
			],
			"description": "Returns a critical property bag group."
		}, 
		{
			"name": "BP_GetEntityBlueprint",
			"returnType": "ScarEntityPBG",
			"parameters": [
				{"name": "pbgShortname", "type": "const char *"}
			],
			"description": "Returns an entity property bag group."
		}, 
		{
			"name": "BP_GetMoveTypeBlueprint",
			"returnType": "ScarMoveTypePBG",
			"parameters": [
				{"name": "pbgShortname", "type": "const char *"}
			],
			"description": "Returns a move type property bag group."
		}, 
		{
			"name": "BP_GetName",
			"returnType": "const char *",
			"parameters": [
				{"name": "pbg", "type": "const PropertyBagGroup *"}
			],
			"description": "Return the short name of the group."
		}, 
		{
			"name": "BP_GetPropertyBagGroupCount",
			"returnType": "int",
			"parameters": [
				{"name": "type", "type": "LuaBinding::StackVar"}
			],
			"description": "Return the number of property bag groups of the same type."
		}, 
		{
			"name": "BP_GetPropertyBagGroupPathName",
			"returnType": "const char *",
			"parameters": [
				{"name": "type", "type": "LuaBinding::StackVar"}, 
				{"name": "index", "type": "size_t"}
			],
			"description": "Return the path name of the group at the specified index."
		}, 
		{
			"name": "BP_GetSlotItemBlueprint",
			"returnType": "ScarSlotItemPBG",
			"parameters": [
				{"name": "pbgShortname", "type": "const char *"}
			],
			"description": "Returns a slot item property bag group."
		}, 
		{
			"name": "BP_GetSquadBlueprint",
			"returnType": "ScarSquadPBG",
			"parameters": [
				{"name": "pbgShortname", "type": "const char *"}
			],
			"description": "Returns a squad property bag group."
		}, 
		{
			"name": "BP_GetUpgradeBlueprint",
			"returnType": "ScarUpgradePBG",
			"parameters": [
				{"name": "pbgShortname", "type": "const char *"}
			],
			"description": "Returns an upgrade property bag group."
		}, 
		{
			"name": "BP_GetWeaponBlueprint",
			"returnType": "ScarWeaponPBG",
			"parameters": [
				{"name": "pbgShortname", "type": "const char *"}
			],
			"description": "Returns a weapon property bag group."
		}, 
		{
			"name": "BridgeTerritory_Add",
			"returnType": "Void",
			"parameters": [
				{"name": "bridge_egroup", "type": "EGroupID"}, 
				{"name": "bridgepoint", "type": "EGroupID"}, 
				{"name": "bank1point", "type": "EGroupID"}, 
				{"name": "bank2point", "type": "EGroupID"}
			],
			"description": "Add a bridge to the Bridge Territory Manager."
		}, 
		{
			"name": "Camera_CyclePositions",
			"returnType": "Void",
			"parameters": [
				{"name": "list", "type": "Table"}, 
				{"name": "pan", "type": "Boolean"}, 
				{"name": "panRate", "type": "Float"}, 
				{"name": "callback", "type": "ScarFn"}
			],
			"description": "Moves the camera through a list of positions."
		}, 
		{
			"name": "Camera_Follow",
			"returnType": "Void",
			"parameters": [
				{"name": "var", "type": "Variable"}
			],
			"description": "Set the camera to follow an sgroup/squad/egroup/entity."
		}, 
		{
			"name": "Camera_MoveTo",
			"returnType": "Void",
			"parameters": [
				{"name": "var", "type": "Variable"}, 
				{"name": "pan", "type": "Boolean"}, 
				{"name": "panRate", "type": "Float"}, 
				{"name": "keepInputLocked", "type": "Boolean"}, 
				{"name": "resetToDefault", "type": "Boolean"}
			],
			"description": "Move the camera to an entity/marker/pos/egroup/sgroup/squad."
		}, 
		{
			"name": "Camera_MoveToIfClose",
			"returnType": "Void",
			"parameters": [
				{"name": "var", "type": "Variable"}
			],
			"description": "Slightly refocus the camera to rest on an entity/squad/squad/sgroup/egroup/pos/marker if it's close by."
		}, 
		{
			"name": "Camera_SetDefault",
			"returnType": "Void",
			"parameters": [
				{"name": "height", "type": "Float"}, 
				{"name": "declination", "type": "Float"}, 
				{"name": "angle", "type": "Float"}
			],
			"description": "Helper function to set the default camera parameters."
		}, 
		{
			"name": "Ceasefire_AddSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "function", "type": "LuaFunction"}
			],
			"description": "Stops an SGroup from auto-targetting, until one of their members is explicity given an attack order or Ceasefire_RemoveSGroup() is called (at which point they all start firing again)"
		}, 
		{
			"name": "Ceasefire_RemoveSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}
			],
			"description": "Removes the ceasefire effect from an sgroup. This may already have been removed by issuing an attack order directly to the group."
		}, 
		{
			"name": "Clone",
			"returnType": "Table",
			"parameters": [
				{"name": "data", "type": "Table"}
			],
			"description": "Clones a table (recursively) allowing for unadulterated use of the data."
		}, 
		{
			"name": "Cmd_AbandonTeamWeapon",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupid", "type": "SGroupID"}, 
				{"name": "preserveCrew", "type": "Boolean"}, 
				{"name": "queued", "type": "Boolean"}
			],
			"description": "Order a squad group to abandon their current team weapon if they have it and they could (tuning value in attribute editor)"
		}, 
		{
			"name": "Cmd_Ability",
			"returnType": "Void",
			"parameters": [
				{"name": "user", "type": "PlayerID/EGroupID/SGroupID"}, 
				{"name": "blueprint", "type": "AbilityBlueprint"}, 
				{"name": "target", "type": "Position/SGroupID/EGroupID"}, 
				{"name": "direction", "type": "Position"}, 
				{"name": "skipCostPrereq", "type": "Bool"}, 
				{"name": "queued", "type": "Bool"}
			],
			"description": "Sends an ability command to a player, egroup or sgroup. extra parameters are provided if the ability requires them."
		}, 
		{
			"name": "Cmd_AttachSquads",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "sgroupAttachee", "type": "SGroupID"}
			],
			"description": "Attach the squad from sgroupnameAttachee to sgroupname. Both SGroups must contain only one squad."
		}, 
		{
			"name": "Cmd_Attack",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "target", "type": "SGroup/EGroup/Pos/Marker"}, 
				{"name": "queued", "type": "Boolean"}, 
				{"name": "stationary", "type": "Boolean"}, 
				{"name": "plan", "type": "String"}
			],
			"description": "Issues an attack command to an SGroup."
		}, 
		{
			"name": "Cmd_AttackMove",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "targetposition", "type": "Position"}, 
				{"name": "queued", "type": "Boolean"}, 
				{"name": "plan", "type": "String"}, 
				{"name": "coverSearchRadius", "type": "Real"}, 
				{"name": "deleteWhenNearMarker", "type": "MarkerID"}
			],
			"description": "Order a squad group to attack move to a position (anything whose position can be queried). can be queued, can follow a plan, can search for cover within a radius."
		}, 
		{
			"name": "Cmd_AttackMoveThenCapture",
			"returnType": "Void",
			"parameters": [
				{"name": "attacker", "type": "SGroupID"}, 
				{"name": "target", "type": "EGroupID"}, 
				{"name": "queued", "type": "Boolean"}
			],
			"description": "Command attacker sgroup to attack move to strategic point target; when it is capturable, the sgroup would capture it."
		}, 
		{
			"name": "Cmd_CaptureTeamWeapon",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupid", "type": "SGroupID"}, 
				{"name": "targetid", "type": "EGroupID"}, 
				{"name": "queued", "type": "Boolean"}
			],
			"description": "Order a squad group to capture team weapon entity group."
		}, 
		{
			"name": "Cmd_Construct",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupid", "type": "SGroup"}, 
				{"name": "blueprint", "type": "Entity"}, 
				{"name": "targetid", "type": "EGroupID/Position/Marker"}, 
				{"name": "Facing", "type": "Position"}, 
				{"name": "queued", "type": "Boolean"}
			],
			"description": "Orders a squad to contruct a building at specified position, or to continue construction on an existing building."
		}, 
		{
			"name": "Cmd_CriticalHit",
			"returnType": "Void",
			"parameters": [
				{"name": "playerid", "type": "PlayerID"}, 
				{"name": "target", "type": "SGroupID/EGroupID/Squad/Entity"}, 
				{"name": "criticalid", "type": "CriticalID"}, 
				{"name": "removeAtHealth", "type": "Real"}
			],
			"description": "Applies critical hit to entity/squad/sgroup/egroup."
		}, 
		{
			"name": "Cmd_DetonateDemolitions",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "target", "type": "EGroupID"}, 
				{"name": "queued", "type": "Boolean"}
			],
			"description": "Detonates a building's demolitions."
		}, 
		{
			"name": "Cmd_EjectOccupants",
			"returnType": "Void",
			"parameters": [
				{"name": "fromgroupid", "type": "EGroupID/SGroupID"}, 
				{"name": "destination", "type": "Position"}, 
				{"name": "queued", "type": "Boolean"}
			],
			"description": "Orders an EGroup or SGroup to kick out its occupants. If no position is specified, the occupants stay at the exit."
		}, 
		{
			"name": "Cmd_Garrison",
			"returnType": "EntityID",
			"parameters": [
				{"name": "fromsgroupid", "type": "SGroupID"}, 
				{"name": "togroupid", "type": "EGroupID/SGroupID"}, 
				{"name": "overload", "type": "Bool"}, 
				{"name": "queued", "type": "Bool"}, 
				{"name": "instant", "type": "Bool"}
			],
			"description": "Order a squad group to load at a random entity or squad of the group."
		}, 
		{
			"name": "Cmd_InstantReinforceUnit",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "count", "type": "Integer"}
			],
			"description": "Sends a instant reinforce command to all squads in a group. count represents the number of commands to send."
		}, 
		{
			"name": "Cmd_InstantReinforceUnitPos",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "count", "type": "Integer"}, 
				{"name": "spawnlocation", "type": "MarkerID/Pos"}, 
				{"name": "checktype", "type": "Integer"}, 
				{"name": "failtype", "type": "Integer"}
			],
			"description": "Sends a instant reinforce command to all squads in a group. count represents the number of commands to send. spawnlocation is where the reinforced unit will spawn. You can optionally find a hidden position by specifying a checktype (CHECK_OFFCAMERA, CHECK_IN_FOW or CHECK_BOTH), and what to do if a hidden position can't be found (SPAWN_ATMARKER, SPAWN_ATSQUAD, or DO_NOTHING) - SPAWN_ATMARKER is the default."
		}, 
		{
			"name": "Cmd_InstantSetupTeamWeapon",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupid", "type": "SGroupID"}, 
				{"name": "queued", "type": "Boolean"}
			],
			"description": "Order a squad group to instant setup their team weapon."
		}, 
		{
			"name": "Cmd_InstantUpgrade",
			"returnType": "Void",
			"parameters": [
				{"name": "target", "type": "PlayerID/EGroupID/SGroupID"}, 
				{"name": "blueprint", "type": "UpgradeBlueprint/Table"}, 
				{"name": "count", "type": "Integer"}
			],
			"description": "Sends an instant upgrade command to a player, egroup or sgroup. accepts a single upgrade or table of upgrades."
		}, 
		{
			"name": "Cmd_Move",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "position", "type": "Pos/SGroupID/EGroupID/MarkerID"}, 
				{"name": "queued", "type": "Boolean"}, 
				{"name": "deleteWhenNearMarker", "type": "MarkerID"}, 
				{"name": "facing", "type": "Position"}, 
				{"name": "offset", "type": "Integer"}, 
				{"name": "distance", "type": "Real"}, 
				{"name": "coverSearchRadius", "type": "Real"}
			],
			"description": "Move a squad group to a given position."
		}, 
		{
			"name": "Cmd_MoveAwayFromPos",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "position", "type": "Pos"}, 
				{"name": "radius", "type": "Int"}, 
				{"name": "queued", "type": "Boolean"}
			],
			"description": "Move a squad group out of a position to a certain radius."
		}, 
		{
			"name": "Cmd_MoveToAndDespawn",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "marker", "type": "MarkerID"}, 
				{"name": "queued", "type": "boolean"}
			],
			"description": "Moves a squad group to the indicated Marker and destroys it."
		}, 
		{
			"name": "Cmd_MoveToClosestMarker",
			"returnType": "markerID",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "markertable", "type": "Table"}
			],
			"description": "Moves a squad group to the closest marker in a list/table of MarkerIDs."
		}, 
		{
			"name": "Cmd_MoveToThenCapture",
			"returnType": "Void",
			"parameters": [
				{"name": "attacker", "type": "SGroupID"}, 
				{"name": "target", "type": "EGroupID"}, 
				{"name": "queued", "type": "Boolean"}
			],
			"description": "Command attacker sgroup to attack move to strategic point target; when it is capturable, the sgroup would capture it."
		}, 
		{
			"name": "Cmd_RecrewVehicle",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupid", "type": "SGroupID"}, 
				{"name": "targetid", "type": "EGroupID"}, 
				{"name": "queued", "type": "Boolean"}
			],
			"description": "Order a squad group to recrew an abandoned vehicle."
		}, 
		{
			"name": "Cmd_ReinforceUnit",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "count", "type": "Integer"}
			],
			"description": "Sends a reinforce command to all squads in a group. count represents the number of commands to send."
		}, 
		{
			"name": "Cmd_ReinforceUnitPos",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "count", "type": "Integer"}, 
				{"name": "spawnlocation", "type": "MarkerID/Pos"}, 
				{"name": "checktype", "type": "Integer"}, 
				{"name": "failtype", "type": "Integer"}
			],
			"description": "Sends a reinforce command to all squads in a group. count represents the number of commands to send. spawnlocation is where the reinforced unit will spawn. You can optionally find a hidden position by specifying a checktype (CHECK_OFFCAMERA, CHECK_IN_FOW or CHECK_BOTH), and what to do if a hidden position can't be found (SPAWN_ATMARKER, SPAWN_ATSQUAD, or DO_NOTHING) - SPAWN_ATMARKER is the default."
		}, 
		{
			"name": "Cmd_Retreat",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "location", "type": "Position"}, 
				{"name": "deleteWhenNearMarker", "type": "Bool/MarkerID/ScarPos"}, 
				{"name": "queued", "type": "Boolean"}, 
				{"name": "saveEncounters", "type": "Boolean"}, 
				{"name": "vulnerableRetreat", "type": "Boolean"}
			],
			"description": "Order a squad group to retreat, optionally to a specific location. The sgroup can be deleted when in proximity of a marker (it assumes a proximity of 5 if you forget to set one on the marker)"
		}, 
		{
			"name": "Cmd_RevertOccupiedBuilding",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupid", "type": "SGroupID"}, 
				{"name": "targetid", "type": "EGroupID"}, 
				{"name": "queued", "type": "Boolean"}
			],
			"description": "Order a squad group to revert occupied building."
		}, 
		{
			"name": "Cmd_SetDemolitions",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupid", "type": "SGroupID"}, 
				{"name": "targetid", "type": "EGroupID"}, 
				{"name": "skipCostPrereq", "type": "Boolean"}, 
				{"name": "queued", "type": "Boolean"}
			],
			"description": "Orders a squad group to place demolition charges on a building (egroup). Function does nothing if egroup cannot be detonated, or player can't afford the demolitions."
		}, 
		{
			"name": "Cmd_SquadCamouflageStance",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "stanceid", "type": "CamouflageStanceID"}
			],
			"description": "Sends an camouflage stance command to all squads in a group. stanceid should be the number returned by Util_GetCamouflageStanceID( stancename )"
		}, 
		{
			"name": "Cmd_SquadPath",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "pathName", "type": "String"}, 
				{"name": "bFromClosest", "type": "Boolean"}, 
				{"name": "loop", "type": "Integer"}, 
				{"name": "bAttackMove", "type": "Boolean"}, 
				{"name": "pauseTime", "type": "Float"}, 
				{"name": "deleteWhenNearMarker", "type": "MarkerID"}, 
				{"name": "queued", "type": "Boolean"}, 
				{"name": "bMoveForward", "type": "Boolean"}
			],
			"description": "Send a command to the squad to follow a path. Can wait at each waypoint. The sgroup can be deleted when in proximity of a marker if you pass in the marker as the 7th argument (it assumes a proximity of 5 if you forget to set one on the marker)"
		}, 
		{
			"name": "Cmd_SquadPatrolMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "marker", "type": "MarkerID"}
			],
			"description": "Causes a squad to patrol a marker attacking any enemies that come within its radius. If used on circular markers, the radius must be at least 5. To stop the squad from patrolling the marker, use Cmd_Stop."
		}, 
		{
			"name": "Cmd_StaggeredRetreat",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "markers", "type": "Table"}, 
				{"name": "maxTries", "type": "Integer"}, 
				{"name": "vulnerableRetreat", "type": "Boolean"}
			],
			"description": "Retreats large numbers of units in a staggered, realistic manner."
		}, 
		{
			"name": "Cmd_Stop",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "EGroupID/SGroupID"}
			],
			"description": "Sends a stop command to egroup or sgroup."
		}, 
		{
			"name": "Cmd_StopSquadsExcept",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup1", "type": "SGroupID"}, 
				{"name": "stopCapture", "type": "Boolean"}, 
				{"name": "stopBuild", "type": "Boolean"}
			],
			"description": "Pass in a group to command to 'stop'. Pass in booleans for capturing and building."
		}, 
		{
			"name": "Cmd_Surrender",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupid", "type": "SGroup"}, 
				{"name": "actionpoints", "type": "Integer"}, 
				{"name": "exitpos", "type": "Position"}, 
				{"name": "deleteAtExit", "type": "Boolean"}, 
				{"name": "removeWeapon", "type": "Boolean"}
			],
			"description": "Orders a squad to surrender and awards the local player with an appropriate number of action points."
		}, 
		{
			"name": "Cmd_UngarrisonSquad",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupid", "type": "SGroupID"}, 
				{"name": "destination", "type": "Position"}, 
				{"name": "queued", "type": "Boolean"}
			],
			"description": "Orders an sgroup to exit the building or vehicle that it's in. If no position is specified, the sgroup stays at the exit."
		}, 
		{
			"name": "Cmd_Upgrade",
			"returnType": "Void",
			"parameters": [
				{"name": "user", "type": "PlayerID/EGroupID/SGroupID"}, 
				{"name": "blueprint", "type": "UpgradeBlueprint/Table"}, 
				{"name": "count", "type": "Integer"}, 
				{"name": "instant", "type": "Boolean"}
			],
			"description": "Sends an upgrade command to a player, egroup or sgroup. accepts a single upgrade or table of upgrades."
		}, 
		{
			"name": "Command_Entity",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "entityCommand", "type": "EntityCommandType"}
			],
			"description": "Send a entity command to a entity group(CMD_DefaultAction, CMD_Stop, CMD_Destroy, CMD_BuildSquad, CMD_CancelProduction, CMD_RallyPoint, CMD_AttackForced)"
		}, 
		{
			"name": "Command_EntityAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "abilityPBG", "type": "ScarAbilityPBG"}, 
				{"name": "skipCostAndPrereq", "type": "bool"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send an entity ability command (CMD_Ability) to an entity."
		}, 
		{
			"name": "Command_EntityBuildSquad",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "squadPbg", "type": "ScarSquadPBG"}
			],
			"description": "Send a squad command to a entity group with custom data."
		}, 
		{
			"name": "Command_EntityEntity",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "entityCommand", "type": "EntityCommandType"}, 
				{"name": "target", "type": "EGroup *"}
			],
			"description": "Send a entity-based command to an entity group."
		}, 
		{
			"name": "Command_EntityExt",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "entityCommand", "type": "EntityCommandType"}, 
				{"name": "cmdparam", "type": "uint32_t"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a squad command to a squad group with custom data."
		}, 
		{
			"name": "Command_EntityPos",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "entityCommand", "type": "EntityCommandType"}, 
				{"name": "target", "type": "ScarPosition"}
			],
			"description": "Send a position command to an entity group."
		}, 
		{
			"name": "Command_EntityPosAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "abilityPBG", "type": "ScarAbilityPBG"}, 
				{"name": "skipCostAndPrereq", "type": "bool"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a positional ability command (CMD_Ability) to an entity."
		}, 
		{
			"name": "Command_EntityPosDirAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "dir", "type": "ScarPosition"}, 
				{"name": "abilityPBG", "type": "ScarAbilityPBG"}, 
				{"name": "skipCostAndPrereq", "type": "bool"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a positional/directional ability command (CMD_Ability) to an entity."
		}, 
		{
			"name": "Command_EntityPosSquad",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "entityCommand", "type": "EntityCommandType"}, 
				{"name": "target", "type": "ScarPosition"}, 
				{"name": "sgroup", "type": "SGroup *"}
			],
			"description": "Send a dual target (position and squad) command to an entity group."
		}, 
		{
			"name": "Command_EntitySquad",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "entityCommand", "type": "EntityCommandType"}, 
				{"name": "target", "type": "SGroup *"}
			],
			"description": "Send a squad-based command to an entity group."
		}, 
		{
			"name": "Command_EntityTargetEntityAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "entityTarget", "type": "Entity *"}, 
				{"name": "abilityPBG", "type": "ScarAbilityPBG"}, 
				{"name": "skipCostAndPrereq", "type": "bool"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send an entity-targeting ability command (CMD_Ability) to an entity."
		}, 
		{
			"name": "Command_EntityTargetSquadAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "squadTarget", "type": "Squad *"}, 
				{"name": "abilityPBG", "type": "ScarAbilityPBG"}, 
				{"name": "skipCostAndPrereq", "type": "bool"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send an squad-targeting ability command (CMD_Ability) to an entity."
		}, 
		{
			"name": "Command_EntityUpgrade",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "upgrade", "type": "ScarUpgradePBG"}, 
				{"name": "instant", "type": "bool"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a squad command to a entity group with custom data."
		}, 
		{
			"name": "Command_Player",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "dest", "type": "Player *"}, 
				{"name": "playerCommand", "type": "PlayerCommandType"}
			],
			"description": "Send a player command to a player."
		}, 
		{
			"name": "Command_PlayerAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "dest", "type": "Player *"}, 
				{"name": "abilityPBG", "type": "ScarAbilityPBG"}, 
				{"name": "skipCostAndPrereq", "type": "bool"}
			],
			"description": "Send a player ability command (PCMD_Ability) to a player."
		}, 
		{
			"name": "Command_PlayerEntity",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "dest", "type": "Player *"}, 
				{"name": "playerCommand", "type": "PlayerCommandType"}, 
				{"name": "target", "type": "EGroup *"}
			],
			"description": "Send an entity command to a player."
		}, 
		{
			"name": "Command_PlayerEntityCriticalHit",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "playerCommand", "type": "PlayerCommandType"}, 
				{"name": "criticalPBG", "type": "ScarCriticalPBG"}, 
				{"name": "removeAtHealth", "type": "float"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a player command to itself to act upon single with custom parameter and index data (PCMD_CriticalHit)"
		}, 
		{
			"name": "Command_PlayerExt",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "dest", "type": "Player *"}, 
				{"name": "playerCommand", "type": "PlayerCommandType"}, 
				{"name": "cmdparam", "type": "uint32_t"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a player command to a player with a custom flag."
		}, 
		{
			"name": "Command_PlayerPos",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "dest", "type": "Player *"}, 
				{"name": "playerCommand", "type": "PlayerCommandType"}, 
				{"name": "pos", "type": "ScarPosition"}
			],
			"description": "Send a position command to a player."
		}, 
		{
			"name": "Command_PlayerPosAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "dest", "type": "Player *"}, 
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "abilityPBG", "type": "ScarAbilityPBG"}, 
				{"name": "skipCostAndPrereq", "type": "bool"}
			],
			"description": "Send a positional ability command (PCMD_Ability) to a player."
		}, 
		{
			"name": "Command_PlayerPosDirAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "dest", "type": "Player *"}, 
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "dir", "type": "ScarPosition"}, 
				{"name": "abilityPBG", "type": "ScarAbilityPBG"}, 
				{"name": "skipCostAndPrereq", "type": "bool"}
			],
			"description": "Send a positional/directional ability command (PCMD_Ability) to a player."
		}, 
		{
			"name": "Command_PlayerPosExt",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "dest", "type": "Player *"}, 
				{"name": "playerCommand", "type": "PlayerCommandType"}, 
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "cmdparam", "type": "uint32_t"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a position command to a player with extra info."
		}, 
		{
			"name": "Command_PlayerSquadConstructBuilding",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "ebp", "type": "ScarEntityPBG"}, 
				{"name": "position", "type": "ScarPosition"}, 
				{"name": "facing", "type": "ScarPosition"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a player command to itself to order squads in the sgroup to construct the building at specific position and facing."
		}, 
		{
			"name": "Command_PlayerSquadConstructFence",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "ebp", "type": "ScarEntityPBG"}, 
				{"name": "posStart", "type": "ScarPosition"}, 
				{"name": "posEnd", "type": "ScarPosition"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a player command to itself to order squads in the sgroup to construct fences from posStart to posEnd."
		}, 
		{
			"name": "Command_PlayerSquadConstructField",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "ebp", "type": "ScarEntityPBG"}, 
				{"name": "posStart", "type": "ScarPosition"}, 
				{"name": "posEnd", "type": "ScarPosition"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a player command to itself to order squads in the sgroup to construct a field ranging from posStart to posEnd."
		}, 
		{
			"name": "Command_PlayerSquadCriticalHit",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "playerCommand", "type": "PlayerCommandType"}, 
				{"name": "criticalPBG", "type": "ScarCriticalPBG"}, 
				{"name": "removeAtHealth", "type": "float"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a player command to itself to act upon all entities in the sgroup with custom parameter and index data (PCMD_CriticalHit)"
		}, 
		{
			"name": "Command_PlayerUpgrade",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "upgrade", "type": "ScarUpgradePBG"}, 
				{"name": "instant", "type": "bool"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Sends an upgrade command to a player."
		}, 
		{
			"name": "Command_Squad",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "squadCommand", "type": "SquadCommandType"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a squad command to a squad group."
		}, 
		{
			"name": "Command_SquadAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "abilityPBG", "type": "ScarAbilityPBG"}, 
				{"name": "skipCostAndPrereq", "type": "bool"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a ability command (SCMD_Ability) to a squad."
		}, 
		{
			"name": "Command_SquadAttackMovePos",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "squadCommand", "type": "SquadCommandType"}, 
				{"name": "target", "type": "ScarPosition"}, 
				{"name": "planName", "type": "const char *"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a position ATTACK MOVE command to a squad group with custom data."
		}, 
		{
			"name": "Command_SquadDoCustomPlan",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "planFile", "type": "const char *"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a custom squad AI plan command to the squad to execute the plan specified towards the position."
		}, 
		{
			"name": "Command_SquadDoCustomPlanTarget",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "planFile", "type": "const char *"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a custom squad AI plan command to the squad to execute the plan specified towards the position."
		}, 
		{
			"name": "Command_SquadEntity",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "squadCommand", "type": "SquadCommandType"}, 
				{"name": "target", "type": "EGroup *"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send an entity command to a squad group."
		}, 
		{
			"name": "Command_SquadEntityAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "target", "type": "EGroup *"}, 
				{"name": "abilityPBG", "type": "ScarAbilityPBG"}, 
				{"name": "skipCostAndPrereq", "type": "bool"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a entity ability command (SCMD_Ability) to a squad."
		}, 
		{
			"name": "Command_SquadEntityAttack",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "target", "type": "EGroup *"}, 
				{"name": "bCheckFOW", "type": "bool"}, 
				{"name": "bStationary", "type": "bool"}, 
				{"name": "planName", "type": "const char *"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send an entity command ATTACK to a squad group."
		}, 
		{
			"name": "Command_SquadEntityBool",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "squadCommand", "type": "SquadCommandType"}, 
				{"name": "target", "type": "EGroup *"}, 
				{"name": "cmdparam", "type": "bool"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a entity command to a squad group with custom BOOLEAN data."
		}, 
		{
			"name": "Command_SquadEntityExt",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "squadCommand", "type": "SquadCommandType"}, 
				{"name": "target", "type": "EGroup *"}, 
				{"name": "cmdparam", "type": "uint32_t"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a entity command to a squad group with custom data."
		}, 
		{
			"name": "Command_SquadEntityLoad",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "squadCommand", "type": "SquadCommandType"}, 
				{"name": "target", "type": "EGroup *"}, 
				{"name": "bOverLoad", "type": "bool"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send special squad command to a squad group with squad load parameters."
		}, 
		{
			"name": "Command_SquadExt",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "squadCommand", "type": "SquadCommandType"}, 
				{"name": "cmdparam", "type": "uint32_t"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a squad command to a squad group with custom data."
		}, 
		{
			"name": "Command_SquadMovePos",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "target", "type": "ScarPosition"}, 
				{"name": "queued", "type": "bool"}, 
				{"name": "reverseMove", "type": "bool"}
			],
			"description": "Send a move to position command for a squad group."
		}, 
		{
			"name": "Command_SquadMovePosFacing",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "target", "type": "ScarPosition"}, 
				{"name": "facing", "type": "ScarPosition"}, 
				{"name": "queued", "type": "bool"}, 
				{"name": "reverseMove", "type": "bool"}
			],
			"description": "Send a move-facing command to a squad group."
		}, 
		{
			"name": "Command_SquadPos",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "squadCommand", "type": "SquadCommandType"}, 
				{"name": "target", "type": "ScarPosition"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a position command to a squad group."
		}, 
		{
			"name": "Command_SquadPosAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "abilityPBG", "type": "ScarAbilityPBG"}, 
				{"name": "skipCostAndPrereq", "type": "bool"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a positional ability command (SCMD_Ability) to a squad."
		}, 
		{
			"name": "Command_SquadPosExt",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "squadCommand", "type": "SquadCommandType"}, 
				{"name": "target", "type": "ScarPosition"}, 
				{"name": "cmdparam", "type": "uint32_t"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a position command to a squad group with custom data."
		}, 
		{
			"name": "Command_SquadPositionAttack",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "target", "type": "ScarPosition"}, 
				{"name": "bCheckFOW", "type": "bool"}, 
				{"name": "bStationary", "type": "bool"}, 
				{"name": "planName", "type": "const char *"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send an position command ATTACK to a squad group."
		}, 
		{
			"name": "Command_SquadSquad",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "squadCommand", "type": "SquadCommandType"}, 
				{"name": "target", "type": "SGroup *"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send an squad-based command to a squad group."
		}, 
		{
			"name": "Command_SquadSquadAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "target", "type": "SGroup *"}, 
				{"name": "abilityPBG", "type": "ScarAbilityPBG"}, 
				{"name": "skipCostAndPrereq", "type": "bool"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a squad ability command (SCMD_Ability) to a squad."
		}, 
		{
			"name": "Command_SquadSquadAttack",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "target", "type": "SGroup *"}, 
				{"name": "bCheckFOW", "type": "bool"}, 
				{"name": "bStationary", "type": "bool"}, 
				{"name": "planName", "type": "const char *"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send an squad-based command to a squad group."
		}, 
		{
			"name": "Command_SquadSquadExt",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "squadCommand", "type": "SquadCommandType"}, 
				{"name": "target", "type": "SGroup *"}, 
				{"name": "cmdparam", "type": "uint32_t"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send a squad command to a squad group with custom data."
		}, 
		{
			"name": "Command_SquadSquadLoad",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "squadCommand", "type": "SquadCommandType"}, 
				{"name": "target", "type": "SGroup *"}, 
				{"name": "bOverLoad", "type": "bool"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Send special squad command to a squad group with squad load parameters."
		}, 
		{
			"name": "Command_SquadUpgrade",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "upgrade", "type": "ScarUpgradePBG"}, 
				{"name": "instant", "type": "bool"}, 
				{"name": "queued", "type": "bool"}
			],
			"description": "Sends an upgrade command to a squad group."
		}, 
		{
			"name": "EBP_Exists",
			"returnType": "bool",
			"parameters": [
				{"name": "pbgShortname", "type": "const char *"}
			],
			"description": "Returns true if an entity blueprint exists with the given name."
		}, 
		{
			"name": "EGroup_Add",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "EGroup *"}, 
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Adds an entity to the end of a group if the group doesnt already have it."
		}, 
		{
			"name": "EGroup_AddEGroup",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "EGroup *"}, 
				{"name": "grouptoadd", "type": "EGroup *"}
			],
			"description": "Appends the entities in one group to another group."
		}, 
		{
			"name": "EGroup_CanSeeEGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "targetegroup", "type": "EGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ALL or ANY entities in a group can see ALL or ANY entities in a given egroup."
		}, 
		{
			"name": "EGroup_CanSeeSGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "targetsgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ALL or ANY entities in a group can see ALL or ANY squads in a given sgroup."
		}, 
		{
			"name": "EGroup_Clear",
			"returnType": "void",
			"parameters": [
				{"name": "egroup", "type": "EGroup *"}
			],
			"description": "Removes all entities from a group."
		}, 
		{
			"name": "EGroup_Compare",
			"returnType": "bool",
			"parameters": [
				{"name": "group1", "type": "EGroup *"}, 
				{"name": "group2", "type": "EGroup *"}
			],
			"description": "Returns true if the contents of the two groups are equal. Order of the entities does not matter."
		}, 
		{
			"name": "EGroup_ContainsBlueprints",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "blueprint", "type": "BP/Table"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Check if a group contains ALL or ANY of the blueprints."
		}, 
		{
			"name": "EGroup_ContainsEGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup1", "type": "EGroupID"}, 
				{"name": "egroup2", "type": "EGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if EGroup1 contains ANY or ALL of EGroup2."
		}, 
		{
			"name": "EGroup_ContainsEntity",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "entity", "type": "EntityID"}
			],
			"description": "Returns true if EGroup contains a particular EntityID."
		}, 
		{
			"name": "EGroup_Count",
			"returnType": "int",
			"parameters": [
				{"name": "egroup", "type": "EGroup *"}
			],
			"description": "Returns the total number of spawned and despawned entities in a group."
		}, 
		{
			"name": "EGroup_CountAlive",
			"returnType": "int",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}
			],
			"description": "Get the number of alive entities (both spawned and despawned)"
		}, 
		{
			"name": "EGroup_CountDeSpawned",
			"returnType": "int",
			"parameters": [
				{"name": "egroup", "type": "EGroup *"}
			],
			"description": "Returns the number of despawned entities in a group."
		}, 
		{
			"name": "EGroup_CountSpawned",
			"returnType": "int",
			"parameters": [
				{"name": "egroup", "type": "EGroup *"}
			],
			"description": "Returns the number of spawned entities in a group."
		}, 
		{
			"name": "EGroup_Create",
			"returnType": "EGroup *",
			"parameters": [
				{"name": "name", "type": "const char *"}
			],
			"description": "Returns a new entity group with the given name."
		}, 
		{
			"name": "EGroup_CreateIfNotFound",
			"returnType": "EGroupID",
			"parameters": [
				{"name": "egroupname", "type": "String"}
			],
			"description": "Find a entity group from name. Creates a new one with given name if it doesnt exist."
		}, 
		{
			"name": "EGroup_CreateKickerMessage",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "EGroupID"}, 
				{"name": "PlayerID", "type": "any"}, 
				{"name": "player", "type": "any"}, 
				{"name": "textid", "type": "LocString"}
			],
			"description": "Create and display kicker message on the each entity in the egroup to the player."
		}, 
		{
			"name": "EGroup_CreateTable",
			"returnType": "LuaTable",
			"parameters": [
				{"name": "format", "type": "String"}, 
				{"name": "size", "type": "Integer"}
			],
			"description": "Returns a table of egroups NOT in the world builder."
		}, 
		{
			"name": "EGroup_DeSpawn",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}
			],
			"description": "Despawn all spawned entities in a group."
		}, 
		{
			"name": "EGroup_Destroy",
			"returnType": "void",
			"parameters": [
				{"name": "egroup", "type": "EGroup *"}
			],
			"description": "Manually destroy a group that you dont need anymore."
		}, 
		{
			"name": "EGroup_DestroyAllEntities",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}
			],
			"description": "Destroys all spawned and despawned entities in a group."
		}, 
		{
			"name": "EGroup_Duplicate",
			"returnType": "Void",
			"parameters": [
				{"name": "egroupid1", "type": "EGroupID"}, 
				{"name": "egroupid2", "type": "EGroupID"}
			],
			"description": "Duplicates an EGroup."
		}, 
		{
			"name": "EGroup_EnableMinimapIndicator",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "enable", "type": "Boolean"}
			],
			"description": "Enables or disables the minimap indicator for all entities in a group."
		}, 
		{
			"name": "EGroup_EnableUIDecorator",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID"}, 
				{"name": "enable", "type": "Boolean"}, 
				{"name": "enableSelection", "type": "Boolean"}
			],
			"description": "Enable or disable decorators on all entities in the egroup. Sets selection visuals as well unless enableSelection is specified."
		}, 
		{
			"name": "EGroup_Exists",
			"returnType": "bool",
			"parameters": [
				{"name": "name", "type": "const char *"}
			],
			"description": "Returns true if the entity group with the given name exists."
		}, 
		{
			"name": "EGroup_Filter",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "blueprint", "type": "String/ID/Table"}, 
				{"name": "filtertype", "type": "Integer"}, 
				{"name": "splitGroup", "type": "EGroupID"}
			],
			"description": "Filters an EGroup by blueprint."
		}, 
		{
			"name": "EGroup_FilterUnderConstruction",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "filtertype", "type": "Integer"}
			],
			"description": "Filters an EGroup by construction status."
		}, 
		{
			"name": "EGroup_ForEach",
			"returnType": "bool",
			"parameters": [
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "f", "type": "LuaBinding::StackVarFunction"}
			],
			"description": "Call a lua function for each item in a group. Function will recieve (groupid, itemindex, itemid) and should return true to break or false to continue."
		}, 
		{
			"name": "EGroup_ForEachAllOrAny",
			"returnType": "bool",
			"parameters": [
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "all", "type": "bool"}, 
				{"name": "f", "type": "LuaBinding::StackVarFunction"}
			],
			"description": "Call a lua function for each item in a group. Function will receive (groupid, itemindex, itemid) and should return a bool."
		}, 
		{
			"name": "EGroup_ForEachAllOrAnyEx",
			"returnType": "bool",
			"parameters": [
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "all", "type": "bool"}, 
				{"name": "f", "type": "LuaBinding::StackVarFunction"}, 
				{"name": "spawned", "type": "bool"}, 
				{"name": "despawned", "type": "bool"}
			],
			"description": "Same as EGroup_ForEachAllOrAny except you have a choice to iterate over spawned entities, despawned entities, or both."
		}, 
		{
			"name": "EGroup_ForEachEx",
			"returnType": "bool",
			"parameters": [
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "f", "type": "LuaBinding::StackVarFunction"}, 
				{"name": "spawned", "type": "bool"}, 
				{"name": "despawned", "type": "bool"}
			],
			"description": "Same as EGroup_ForEach except you have a choice to iterate over spawned entities, despawned entities, or both."
		}, 
		{
			"name": "EGroup_FromName",
			"returnType": "EGroup *",
			"parameters": [
				{"name": "name", "type": "const char *"}
			],
			"description": "Find an entity group with a given name."
		}, 
		{
			"name": "EGroup_GetAvgHealth",
			"returnType": "Real",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}
			],
			"description": "Returns the average health of all units in a entity group."
		}, 
		{
			"name": "EGroup_GetDeSpawnedEntityAt",
			"returnType": "Entity *",
			"parameters": [
				{"name": "group", "type": "EGroup *"}, 
				{"name": "index", "type": "unsigned int"}
			],
			"description": "Returns the despawned entity at the given index."
		}, 
		{
			"name": "EGroup_GetInvulnerable",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Check invulnerablity state for ALL or ANY entity in an entity group."
		}, 
		{
			"name": "EGroup_GetLastAttacker",
			"returnType": "Void",
			"parameters": [
				{"name": "EGroupVictim", "type": "EGroup"}, 
				{"name": "SGroupAttacker", "type": "SGroup"}
			],
			"description": "Gets the last attacker(s) for all the entities in an EGroup Gets the last attacker for all the squads in an SGroup and stores that in SGroupAttacker."
		}, 
		{
			"name": "EGroup_GetName",
			"returnType": "const char *",
			"parameters": [
				{"name": "egroup", "type": "EGroup *"}
			],
			"description": "Returns the name of a given entity group."
		}, 
		{
			"name": "EGroup_GetOffsetPosition",
			"returnType": "Position",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "offset", "type": "Integer"}, 
				{"name": "value", "type": "Real"}
			],
			"description": "Returns a position (a certain distance away) relative to an entity's current position/orientation. see ScarUtil.scar for explanation of 'offset' parameter."
		}, 
		{
			"name": "EGroup_GetPosition",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "group", "type": "EGroup *"}
			],
			"description": "Returns the center position of an entity group."
		}, 
		{
			"name": "EGroup_GetRandomSpawnedEntity",
			"returnType": "EntityID",
			"parameters": [
				{"name": "egroupid", "type": "EGroup"}
			],
			"description": "Get a random spawned entity from egroup."
		}, 
		{
			"name": "EGroup_GetSequence",
			"returnType": "Table",
			"parameters": [
				{"name": "name", "type": "String"}
			],
			"description": "Builds a table of EGroupIDs that are named in a sequence. i.e. a name of \"eg_building\" will find groups \"eg_building1\", \"eg_building2\" and so on, up until it looks for a group that isn't there."
		}, 
		{
			"name": "EGroup_GetSpawnedEntityAt",
			"returnType": "Entity *",
			"parameters": [
				{"name": "group", "type": "EGroup *"}, 
				{"name": "index", "type": "unsigned int"}
			],
			"description": "Returns the spawned entity at the given index."
		}, 
		{
			"name": "EGroup_GetSpawnedEntityFilter",
			"returnType": "EntityID",
			"parameters": [
				{"name": "egroupid", "type": "EGroup"}, 
				{"name": "condition", "type": "function"}
			],
			"description": "Get the first spawned entity from egroup that meets the condition (a function that takes an entity)"
		}, 
		{
			"name": "EGroup_GetSpread",
			"returnType": "Real",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}
			],
			"description": "Returns the distance from the centre of the group of the entity that furthest out."
		}, 
		{
			"name": "EGroup_GetSquadsHeld",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "sgroupRecipient", "type": "SGroupID"}
			],
			"description": "Returns an sgroup containing all squads held by any entities in an egroup."
		}, 
		{
			"name": "EGroup_GetWBTable",
			"returnType": "LuaTable",
			"parameters": [
				{"name": "format", "type": "String"}
			],
			"description": "Returns a table of egroups from the world builder."
		}, 
		{
			"name": "EGroup_HasUpgrade",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "upgrade", "type": "UpgradeID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns whether ANY or ALL entities in an EGroup have the specified upgrade."
		}, 
		{
			"name": "EGroup_Hide",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "hide", "type": "Bool"}
			],
			"description": "Hide or show all entities in an EGroup."
		}, 
		{
			"name": "EGroup_InstantCaptureStrategicPoint",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "player", "type": "PlayerID"}
			],
			"description": "Change the ownership of a Strategic Point."
		}, 
		{
			"name": "EGroup_InstantRevertOccupiedBuilding",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}
			],
			"description": "Reverts an occupied building."
		}, 
		{
			"name": "EGroup_Intersection",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "EGroup *"}, 
				{"name": "grouptointersect", "type": "EGroup *"}
			],
			"description": "Performs a group intersection."
		}, 
		{
			"name": "EGroup_IsBurning",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "ALL", "type": "Boolean"}
			],
			"description": "Checks if ANY or ALL entities in an egroup are on fire (ignition threshold exceeded)"
		}, 
		{
			"name": "EGroup_IsCapturedByPlayer",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "playerId", "type": "PlayerID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if all or any strategic points in a group have been captured. Use ANY or ALL."
		}, 
		{
			"name": "EGroup_IsCapturedByTeam",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "teamId", "type": "TeamID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if all or any strategic points in a group have been captured. Use ANY or ALL."
		}, 
		{
			"name": "EGroup_IsDoingAttack",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "all", "type": "Boolean"}, 
				{"name": "time", "type": "Float"}
			],
			"description": "Returns true if ALL or ANY entities are attacking within the time."
		}, 
		{
			"name": "EGroup_IsEmpty",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}
			],
			"description": "Returns true if a named entity group contains no spawned or despawned entities."
		}, 
		{
			"name": "EGroup_IsHoldingAny",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}
			],
			"description": "Returns whether any entity in an EGroup has a hold on anything."
		}, 
		{
			"name": "EGroup_IsInCover",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ALL or ANY entities are in cover."
		}, 
		{
			"name": "EGroup_IsMoving",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroupid", "type": "EGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ANY or ALL entities in an EGroup are moving."
		}, 
		{
			"name": "EGroup_IsOnScreen",
			"returnType": "Bool",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "group", "type": "EGroupID"}, 
				{"name": "all", "type": "Bool"}, 
				{"name": "percent", "type": "Float"}
			],
			"description": "Returns true if ANY or ALL (use those keywords) of the enities in the group are present onscreen. You can pass in a percentage of the screen to check, so 0.8 would be a centered rectangle occupying 80% of the screen."
		}, 
		{
			"name": "EGroup_IsProducingSquads",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ALL or ANY entities in a group are currently producing squads."
		}, 
		{
			"name": "EGroup_IsSpawned",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "ALL", "type": "Boolean"}
			],
			"description": "Checks if ANY or ALL entities in an group are currently spawned or not."
		}, 
		{
			"name": "EGroup_IsUnderAttack",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "all", "type": "Boolean"}, 
				{"name": "time", "type": "Float"}
			],
			"description": "Returns true if ALL or ANY entities are under attack within the time."
		}, 
		{
			"name": "EGroup_IsUnderAttackByPlayer",
			"returnType": "Bool",
			"parameters": [
				{"name": "group", "type": "EGroupID"}, 
				{"name": "attackerplayer", "type": "PlayerID"}, 
				{"name": "duration", "type": "Float"}
			],
			"description": "Check if the entities are attacked by the player."
		}, 
		{
			"name": "EGroup_IsUnderAttackFromDirection",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "all", "type": "Boolean"}, 
				{"name": "offset", "type": "Integer/Table"}, 
				{"name": "time", "type": "Float"}
			],
			"description": "Returns true if ALL or ANY entities are under attack from a direction within the time. see ScarUtil.scar for types of directions. you can pass in a table of offsets."
		}, 
		{
			"name": "EGroup_IsUsingAbility",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "ALL", "type": "Boolean"}
			],
			"description": "Checks if ANY or ALL squads within an EGroup are using an ability."
		}, 
		{
			"name": "EGroup_Kill",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}
			],
			"description": "Kill all entities in an EGroup."
		}, 
		{
			"name": "EGroup_NotifyOnPlayerDemolition",
			"returnType": "Void",
			"parameters": [
				{"name": "id", "type": "EGroupID"}, 
				{"name": "function", "type": "LuaFunction"}
			],
			"description": "Calls a function when any entity in an EGroup gets destroyed by the player clicking the \"Detonate me\" button."
		}, 
		{
			"name": "EGroup_Remove",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "EGroup *"}, 
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Removes an entity from a group."
		}, 
		{
			"name": "EGroup_RemoveDemolitions",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}
			],
			"description": "Removes all demolition charges on an egroup."
		}, 
		{
			"name": "EGroup_RemoveGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID"}, 
				{"name": "grouptoremove", "type": "SGroupID"}
			],
			"description": "Remove from the first SGroup all squads contained in the second SGroup. SGroup2 remains untouched."
		}, 
		{
			"name": "EGroup_RemoveUpgrade",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "upgrade", "type": "UpgradeBlueprint/Table"}
			],
			"description": "Removes upgrade(s) from an egroup."
		}, 
		{
			"name": "EGroup_ReSpawn",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}
			],
			"description": "Respawn all despawned entities in a group."
		}, 
		{
			"name": "EGroup_SetAnimatorAction",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "actionName", "type": "String"}
			],
			"description": "Trigger animation action for an EGroup. Please only use this for simple animations."
		}, 
		{
			"name": "EGroup_SetAnimatorEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "eventName", "type": "String"}
			],
			"description": "Set animation event for an EGroup. Please only use this for simple animations."
		}, 
		{
			"name": "EGroup_SetAnimatorState",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "stateMachineName", "type": "String"}, 
				{"name": "stateName", "type": "String"}
			],
			"description": "Set animation state of a state machine for an EGroup. Please only use this for simple animations."
		}, 
		{
			"name": "EGroup_SetAnimatorVariable",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "variableName", "type": "String"}, 
				{"name": "value", "type": "Real"}
			],
			"description": "Set animation variable value for an EGroup. Please only use this for simple animations."
		}, 
		{
			"name": "EGroup_SetAutoTargetting",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "EGroupID"}, 
				{"name": "hardpoint", "type": "String"}, 
				{"name": "enable", "type": "Bool"}
			],
			"description": "Sets whether a weapon to auto-target things or not."
		}, 
		{
			"name": "EGroup_SetAvgHealth",
			"returnType": "Real",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "healthPercent", "type": "Real"}
			],
			"description": "Sets the health of each unit in an entity group to a given percent [0.0, 1.0]."
		}, 
		{
			"name": "EGroup_SetCrushable",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "crushable", "type": "Boolean"}
			],
			"description": "Overrides crushable behavior for an egroup."
		}, 
		{
			"name": "EGroup_SetDemolitions",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "egroupid", "type": "EGroupID"}, 
				{"name": "numcharges", "type": "Integer"}
			],
			"description": "Instantly wires a building for demolitions."
		}, 
		{
			"name": "EGroup_SetHealthMinCap",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "minhealth", "type": "float"}
			],
			"description": "Set the minimum health for this entity."
		}, 
		{
			"name": "EGroup_SetInvulnerable",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "enabled", "type": "Boolean"}, 
				{"name": "reset_time", "type": "Float"}
			],
			"description": "Enable/Disable invulnerablity for an entire entity group. Use true and false for simple on/off, or use a number between 0.0 and 1.0 for more precise control on how much damage an entity can take before it takes no more."
		}, 
		{
			"name": "EGroup_SetPlayerOwner",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroup"}, 
				{"name": "owner", "type": "PlayerID"}
			],
			"description": "Changes the player owner for all spawned and despawned entities of an EGroup."
		}, 
		{
			"name": "EGroup_SetRallyPoint",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "target", "type": "Position"}
			],
			"description": "Set the rally point for this entity."
		}, 
		{
			"name": "EGroup_SetRecrewable",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "EGroupID"}, 
				{"name": "recrewable", "type": "Boolean"}
			],
			"description": "Sets all entities in an egroup to be recrewable or not when abandoned."
		}, 
		{
			"name": "EGroup_SetSelectable",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "selectable", "type": "Bool"}
			],
			"description": "Set player selectable state of entities in the egroup."
		}, 
		{
			"name": "EGroup_SetSharedProductionQueue",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "enable", "type": "Boolean"}
			],
			"description": "Enables shared team production on a building (teammates can build using THEIR resources)"
		}, 
		{
			"name": "EGroup_SetStrategicPointNeutral",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}
			],
			"description": "Sets a strategic point to neutral (not owned by any team)"
		}, 
		{
			"name": "EGroup_SetWorldOwned",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}
			],
			"description": "Makes an egroup neutral."
		}, 
		{
			"name": "EGroup_Single",
			"returnType": "EGroupID",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "entity", "type": "entityID"}
			],
			"description": "Creates an entity group containing a single entity."
		}, 
		{
			"name": "Entity_ApplyCritical",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}, 
				{"name": "criticalPBG", "type": "ScarCriticalPBG"}, 
				{"name": "removeAtHealth", "type": "float"}
			],
			"description": "Trigger a critical hit on an entity."
		}, 
		{
			"name": "Entity_BuildingPanelInfo",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}, 
				{"name": "cam", "type": "ScarPosition"}, 
				{"name": "terrain", "type": "ScarPosition"}
			],
			"description": "Displays info about the panel that is intersected by the passed in ray."
		}, 
		{
			"name": "Entity_CalculatePassableSpawnPosition",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "ebp", "type": "ScarEntityPBG"}, 
				{"name": "pos", "type": "ScarPosition"}
			],
			"description": "pass in a entity and position to resolve the position into a open space position, if the position is not free, position returned will try to be the closest position near the original position"
		}, 
		{
			"name": "Entity_CanAttackNow",
			"returnType": "bool",
			"parameters": [
				{"name": "attacker", "type": "Entity *"}, 
				{"name": "target", "type": "ScarPosition"}
			],
			"description": "Returns whether an entity can attack a target without moving or turning."
		}, 
		{
			"name": "Entity_CancelProductionQueueItem",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "index", "type": "uint32_t"}
			],
			"description": "Cancels an item in a production queue. Index 0 is the currently producing item."
		}, 
		{
			"name": "Entity_CanLoadSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "squad", "type": "Squad *"}, 
				{"name": "bCheckSquadState", "type": "bool"}, 
				{"name": "bOverload", "type": "bool"}
			],
			"description": "Check if the entity can load squad or not."
		}, 
		{
			"name": "Entity_CanSeeEntity",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "target", "type": "Entity *"}
			],
			"description": "Returns true if the distance between a target entity and the source entity is less than it entity's sight distance. There is no LOS or FOW check."
		}, 
		{
			"name": "Entity_CanSeeSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "target", "type": "Squad *"}
			],
			"description": "Returns true if the distance between a target squad and the source entity is less than it entity's sight distance. There is no LOS or FOW check."
		}, 
		{
			"name": "Entity_ClearPostureSuggestion",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Clears any previous posture suggestions made to an entity."
		}, 
		{
			"name": "Entity_ClearTagDebug",
			"returnType": "void",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Clears the tagged entity used for debugging."
		}, 
		{
			"name": "Entity_CompleteUpgrade",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}, 
				{"name": "upgradePBG", "type": "ScarUpgradePBG"}
			],
			"description": "Instantly adds an upgrade to a given entity."
		}, 
		{
			"name": "Entity_Create",
			"returnType": "Entity *",
			"parameters": [
				{"name": "ebp", "type": "ScarEntityPBG"}, 
				{"name": "player", "type": "Player *"}, 
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "toward", "type": "ScarPosition"}
			],
			"description": "Creates an entity at a given position and assigns it to a given player. 'blueprint' is a string value containing the name of the entity blueprint. This function does not spawn the entity so you will need to call Entity_Spawn to see this entity."
		}, 
		{
			"name": "Entity_CreateENV",
			"returnType": "Entity *",
			"parameters": [
				{"name": "ebp", "type": "ScarEntityPBG"}, 
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "toward", "type": "ScarPosition"}
			],
			"description": "Creates an entity at a given position and assigns it to a given player. 'blueprint' is a string value containing the name of the entity blueprint. This function spawns the entity so there is no need to call Entity_Spawn."
		}, 
		{
			"name": "Entity_DeSpawn",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "DeSpawn the entity at its current position."
		}, 
		{
			"name": "Entity_Destroy",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Remove an entity from the world and destroy it."
		}, 
		{
			"name": "Entity_DisableBuildingDeath",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}, 
				{"name": "bDisableDeath", "type": "bool"}
			],
			"description": "Disables the death of the given entity building, only works for panel based destructible buldings."
		}, 
		{
			"name": "Entity_DoBuildingDamageRay",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}, 
				{"name": "cam", "type": "ScarPosition"}, 
				{"name": "terrain", "type": "ScarPosition"}, 
				{"name": "dmgType", "type": "size_t"}, 
				{"name": "isDestroy", "type": "bool"}, 
				{"name": "radius", "type": "float"}
			],
			"description": "Damages this entity but only if its a destructible building."
		}, 
		{
			"name": "Entity_EnableAttention",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "attentive", "type": "bool"}
			],
			"description": "Sets whether an entity pays attention to its surroundings."
		}, 
		{
			"name": "Entity_EnableProductionQueue",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "enable", "type": "bool"}
			],
			"description": "Sets whether an entity can produce anything (including upgrades)"
		}, 
		{
			"name": "Entity_EnableStrategicPoint",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "enable", "type": "bool"}
			],
			"description": "Sets whether an strategic point is active."
		}, 
		{
			"name": "Entity_ForceConstruct",
			"returnType": "void",
			"parameters": [
				{"name": "e", "type": "Entity *"}
			],
			"description": "Force constructs this entity but only if its a building."
		}, 
		{
			"name": "Entity_FromWorldID",
			"returnType": "Entity *",
			"parameters": [
				{"name": "id", "type": "uint32_t"}
			],
			"description": "Get an entity from a mission editor ID."
		}, 
		{
			"name": "Entity_GetActiveCommand",
			"returnType": "EntityStateID",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns the active entity command."
		}, 
		{
			"name": "Entity_GetBlueprint",
			"returnType": "ScarEntityPBG",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns the entity's blueprint."
		}, 
		{
			"name": "Entity_GetBuildingProgress",
			"returnType": "float",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}
			],
			"description": "Returns the construction progress (with range [0.0, 1.0] for a given entity. Returns 0.0 if the entity is not a building."
		}, 
		{
			"name": "Entity_GetCoverValue",
			"returnType": "float",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Get cover safety value from the where the entity is standing. The safety value is number from -.5 to .5."
		}, 
		{
			"name": "Entity_GetGameID",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns the entities unique id in the world."
		}, 
		{
			"name": "Entity_GetHeading",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns the heading of the entity. The heading is currently a lua table with three entries (x, y, z)"
		}, 
		{
			"name": "Entity_GetHealth",
			"returnType": "float",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns the health of an entity."
		}, 
		{
			"name": "Entity_GetHealthMax",
			"returnType": "float",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns the max health of an entity."
		}, 
		{
			"name": "Entity_GetHealthPercentage",
			"returnType": "float",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns the percentage health, taking into account destructible buildings."
		}, 
		{
			"name": "Entity_GetInvulnerable",
			"returnType": "Bool",
			"parameters": [
				{"name": "squad", "type": "SquadID"}
			],
			"description": "Check if the entity is invulnerable or not."
		}, 
		{
			"name": "Entity_GetInvulnerableMinCap",
			"returnType": "float",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns the invulnerable point in terms of percentage."
		}, 
		{
			"name": "Entity_GetInvulnerableToCritical",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "get if an entity is invulnerable to critical effects"
		}, 
		{
			"name": "Entity_GetLastAttacker",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "group", "type": "SGroup *"}
			],
			"description": "Find the last squad attacker on this entity. If found, the squad is added to the sgroup."
		}, 
		{
			"name": "Entity_GetLastAttackers",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "group", "type": "SGroup *"}, 
				{"name": "timeSeconds", "type": "float"}
			],
			"description": "Find the squad attackers on this entity from the last seconds specified. If found, the squads are added to the sgroup. Building attackers are ignored."
		}, 
		{
			"name": "Entity_GetMaxCaptureCrewSize",
			"returnType": "int",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Gets the maximum capture crew size from a recrewable entity."
		}, 
		{
			"name": "Entity_GetOffsetPosition",
			"returnType": "Position",
			"parameters": [
				{"name": "entity", "type": "EntityID"}, 
				{"name": "offset", "type": "Integer"}, 
				{"name": "distance", "type": "Real"}
			],
			"description": "Returns a position relative to an entity's current position and orientation. see ScarUtil.scar for explanation of 'offset' parameter."
		}, 
		{
			"name": "Entity_GetPlayerOwner",
			"returnType": "Player *",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns the Player owner of the given entity. Entity MUST NOT be owned by the world."
		}, 
		{
			"name": "Entity_GetPosition",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns the position of the entity. The position is currently a lua table with three entries (x, y, z)"
		}, 
		{
			"name": "Entity_GetProductionQueueItem",
			"returnType": "const PropertyBagGroup *",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "index", "type": "uint32_t"}
			],
			"description": "Returns the blueprint for a production queue item with index."
		}, 
		{
			"name": "Entity_GetProductionQueueItemType",
			"returnType": "ProductionItemType",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "index", "type": "uint32_t"}
			],
			"description": "Returns the production type (PITEM_Upgrade, PITEM_Spawn, PITEM_SquadUpgrade, PITEM_SquadReinforce, PITEM_PlayerUpgrade) for a production queue item with index."
		}, 
		{
			"name": "Entity_GetProductionQueueSize",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns the number of items in the entities production queue."
		}, 
		{
			"name": "Entity_GetResourceType",
			"returnType": "ResourceAmount::ResourceType",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns the resource type of this point."
		}, 
		{
			"name": "Entity_GetSightInnerHeight",
			"returnType": "float",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns the inner sight radius for this entity."
		}, 
		{
			"name": "Entity_GetSightInnerRadius",
			"returnType": "float",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns the inner sight radius for this entity."
		}, 
		{
			"name": "Entity_GetSightOuterHeight",
			"returnType": "float",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns the outer sight radius for this entity."
		}, 
		{
			"name": "Entity_GetSightOuterRadius",
			"returnType": "float",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns the outer sight radius for this entity."
		}, 
		{
			"name": "Entity_GetSquad",
			"returnType": "Squad *",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}
			],
			"description": "Returns the Squad for the passed Entity. (May be nullptr)"
		}, 
		{
			"name": "Entity_GetSquadsHeld",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}, 
				{"name": "sgroup", "type": "SGroup *"}
			],
			"description": "Adds squads held by an entity to an SGroup."
		}, 
		{
			"name": "Entity_GetTotalPanelCount",
			"returnType": "size_t",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}
			],
			"description": "Gets the total number of panels in a building (returns 0 for anything but panel based destructible buldings)"
		}, 
		{
			"name": "Entity_GetUndestroyedPanelCount",
			"returnType": "size_t",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}
			],
			"description": "Gets the current number of undestroyed panels in a building (returns 0 for anything but panel based destructible buldings)"
		}, 
		{
			"name": "Entity_GetWeaponBlueprint",
			"returnType": "ScarWeaponPBG",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "hardPointIndex", "type": "int"}
			],
			"description": "Returns a weapon hardpoint ( 0 indexed )"
		}, 
		{
			"name": "Entity_GetWeaponHardpointCount",
			"returnType": "size_t",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns how many hardpoints an entity has."
		}, 
		{
			"name": "Entity_HasAnyCritical",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}
			],
			"description": "Return true if the entity has any critical applied to it."
		}, 
		{
			"name": "Entity_HasCritical",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}, 
				{"name": "criticalPBG", "type": "ScarCriticalPBG"}
			],
			"description": "Return true if the entity has the given criticalID applied to it."
		}, 
		{
			"name": "Entity_HasProductionQueue",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns true if an entity has a production queue."
		}, 
		{
			"name": "Entity_HasUpgrade",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}, 
				{"name": "upgradePBG", "type": "ScarUpgradePBG"}
			],
			"description": "Return true if the entity has purchased the specified upgrade."
		}, 
		{
			"name": "Entity_InstantCaptureStrategicPoint",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "player", "type": "Player *"}
			],
			"description": "Strategic point will be captured instantly by the team of the supplied player."
		}, 
		{
			"name": "Entity_InstantRevertOccupiedBuilding",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Reverts an occupied building."
		}, 
		{
			"name": "Entity_IsAlive",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}
			],
			"description": "Returns true if entity is still alive."
		}, 
		{
			"name": "Entity_IsAttacking",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "time", "type": "float"}
			],
			"description": "Returns true if the entity is attacking within the time."
		}, 
		{
			"name": "Entity_IsBuilding",
			"returnType": "bool",
			"parameters": [
				{"name": "e", "type": "Entity *"}
			],
			"description": "Returns true if the given entity is a building."
		}, 
		{
			"name": "Entity_IsBurning",
			"returnType": "bool",
			"parameters": [
				{"name": "e", "type": "Entity *"}
			],
			"description": "Returns true if the given entity is burning (buildings on fire or non-buildings with burn_exts)"
		}, 
		{
			"name": "Entity_IsCamouflaged",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns whether the entity is camouflaged."
		}, 
		{
			"name": "Entity_IsCapturableBuilding",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns true if the entity is a capturable building."
		}, 
		{
			"name": "Entity_IsCasualty",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns true if entity is a casualty else false."
		}, 
		{
			"name": "Entity_IsCuttable",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns whether this entity is cuttable."
		}, 
		{
			"name": "Entity_IsDemolitionReady",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns whether this entity's demolition charges are ready to be detonated."
		}, 
		{
			"name": "Entity_IsEBPBuilding",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "ebp", "type": "ScarEntityPBG"}
			],
			"description": "Returns true if the given blueprint is a building."
		}, 
		{
			"name": "Entity_IsEBPObjCover",
			"returnType": "bool",
			"parameters": [
				{"name": "ebp", "type": "ScarEntityPBG"}
			],
			"description": "Returns true if the given blueprint is objcover."
		}, 
		{
			"name": "Entity_IsEBPOfType",
			"returnType": "bool",
			"parameters": [
				{"name": "ebp", "type": "ScarEntityPBG"}, 
				{"name": "type", "type": "const char *"}
			],
			"description": "Returns true if the given blueprint is of the given type. Types are defined in type_ext/unit_type_list."
		}, 
		{
			"name": "Entity_IsHardpointActive",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "hardPointIndex", "type": "int"}
			],
			"description": "Returns whether a hardpoint is active ( 0 indexed )"
		}, 
		{
			"name": "Entity_IsHoldingAny",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Check if the entity has a hold on anything."
		}, 
		{
			"name": "Entity_IsInCover",
			"returnType": "Boolean",
			"parameters": [
				{"name": "entityId", "type": "EntityID"}
			],
			"description": "Returns true if entity is in cover."
		}, 
		{
			"name": "Entity_IsMoving",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}
			],
			"description": "Returns whether an entity is moving."
		}, 
		{
			"name": "Entity_IsOfType",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "type", "type": "const char *"}
			],
			"description": "Determines if this entity is of the given type. Types are defined in type_ext/unit_type_list."
		}, 
		{
			"name": "Entity_IsPartOfSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}
			],
			"description": "Returns true if the entity is part of a squad."
		}, 
		{
			"name": "Entity_IsPlane",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}
			],
			"description": "Returns whether an entity is a plane (has a flight extension)"
		}, 
		{
			"name": "Entity_IsSlotItem",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Return true if the entity is a slot item."
		}, 
		{
			"name": "Entity_IsSoldier",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}
			],
			"description": "Returns whether an entity is a soldier."
		}, 
		{
			"name": "Entity_IsSpawned",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "if entity is spawned return true"
		}, 
		{
			"name": "Entity_IsStartingPosition",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns true if the entity is a starting position."
		}, 
		{
			"name": "Entity_IsStrategicPoint",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns true if the entity is a strategic point."
		}, 
		{
			"name": "Entity_IsStrategicPointCapturedBy",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "player", "type": "Player *"}
			],
			"description": "Returns true if strategic point is captured by the team of the player provided."
		}, 
		{
			"name": "Entity_IsSyncWeapon",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Return true if the entity is a team weapon."
		}, 
		{
			"name": "Entity_IsUnderAttack",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "time", "type": "float"}
			],
			"description": "Returns true if the entity is under attack."
		}, 
		{
			"name": "Entity_IsUnderAttackByPlayer",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "pAttackerOwner", "type": "Player *"}, 
				{"name": "time", "type": "float"}
			],
			"description": "Returns true if the entity is under attack by a certain player."
		}, 
		{
			"name": "Entity_IsUnderAttackFromDirection",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "offset", "type": "int"}, 
				{"name": "timeSeconds", "type": "float"}
			],
			"description": "Returns true if the entity was under attack from a certain direction (8 offset types, see ScarUtil.scar)"
		}, 
		{
			"name": "Entity_IsValid",
			"returnType": "bool",
			"parameters": [
				{"name": "id", "type": "uint32_t"}
			],
			"description": "Check if an entity with the given ID can be found in the world."
		}, 
		{
			"name": "Entity_IsVaultable",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}
			],
			"description": "Returns whether an entity can be vaulted."
		}, 
		{
			"name": "Entity_IsVehicle",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}
			],
			"description": "Returns whether an entity is a vehicle."
		}, 
		{
			"name": "Entity_IsVictoryPoint",
			"returnType": "bool",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}
			],
			"description": "Returns true if entityID is a victory point."
		}, 
		{
			"name": "Entity_Kill",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Kill the entity. Sets health to 0, and triggers death effects."
		}, 
		{
			"name": "Entity_NotifyOnPlayerDemolition",
			"returnType": "Void",
			"parameters": [
				{"name": "entity", "type": "Entity"}, 
				{"name": "function", "type": "LuaFunction"}
			],
			"description": "Calls a function when an entity gets destroyed by the player clicking the \"Detonate me\" button next to an entity."
		}, 
		{
			"name": "Entity_Population",
			"returnType": "float",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "type", "type": "CapType"}
			],
			"description": "get entity pop cost, use CT_Personnel, CT_Vehicle, CT_Medic for captype"
		}, 
		{
			"name": "Entity_RemoveBoobyTraps",
			"returnType": "void",
			"parameters": [
				{"name": "pEntityTarget", "type": "Entity *"}
			],
			"description": "Removes all booby-traps on this entity."
		}, 
		{
			"name": "Entity_RemoveCritical",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}, 
				{"name": "criticalPBG", "type": "ScarCriticalPBG"}
			],
			"description": "Remove a critical from a given entity."
		}, 
		{
			"name": "Entity_RemoveDemolitions",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Removes all demolition charges on an entity."
		}, 
		{
			"name": "Entity_RemoveUpgrade",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "upgrade", "type": "ScarUpgradePBG"}
			],
			"description": "Removes an upgrade from an entity."
		}, 
		{
			"name": "Entity_SetAnimatorAction",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}, 
				{"name": "actionName", "type": "const char *"}
			],
			"description": "Trigger animation action for an entity. Please only use this for simple animations."
		}, 
		{
			"name": "Entity_SetAnimatorActionParameter",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}, 
				{"name": "actionParameterName", "type": "const char *"}, 
				{"name": "actionParameterValue", "type": "const char *"}
			],
			"description": "Set animation action parameter for an entity. Please only use this for simple animations."
		}, 
		{
			"name": "Entity_SetAnimatorEvent",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}, 
				{"name": "eventName", "type": "const char *"}
			],
			"description": "Set animation event for an entity. Please only use this for simple animations."
		}, 
		{
			"name": "Entity_SetAnimatorState",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}, 
				{"name": "stateMachineName", "type": "const char *"}, 
				{"name": "stateName", "type": "const char *"}
			],
			"description": "Set animation state of a state machine for an entity. Please only use this for simple animations."
		}, 
		{
			"name": "Entity_SetAnimatorVariable",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}, 
				{"name": "variableName", "type": "const char *"}, 
				{"name": "value", "type": "float"}
			],
			"description": "Set animation variable value for an entity. Please only use this for simple animations."
		}, 
		{
			"name": "Entity_SetBuildingVisualFireState",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}, 
				{"name": "newFireState", "type": "BuildingDestructionExt::BuildingFireState"}
			],
			"description": "Set the visual fire state of a building (doesn't actually set the building on fire)"
		}, 
		{
			"name": "Entity_SetCrushable",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "crushable", "type": "bool"}
			],
			"description": "Overrides crushable behavior for an entity."
		}, 
		{
			"name": "Entity_SetCrushMode",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "mode", "type": "CrushExtInfo::CrushMode"}
			],
			"description": "Changes the crush mode of a given entity. Entity must have a crush extension."
		}, 
		{
			"name": "Entity_SetDemolitions",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "entity", "type": "Entity *"}, 
				{"name": "numcharges", "type": "int"}
			],
			"description": "Fully wires this entity for demolitions, if it's set up to be demolishable. 'player' is the one that owns the demolitions and can detonate them."
		}, 
		{
			"name": "Entity_SetEnableCasualty",
			"returnType": "void",
			"parameters": [
				{"name": "enable", "type": "bool"}, 
				{"name": "pEntity", "type": "Entity *"}
			],
			"description": "enable or disable the casualtext"
		}, 
		{
			"name": "Entity_SetHeading",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "bInterpolate", "type": "bool"}
			],
			"description": "Sets the heading of the entity. The position is currently a lua table with three entries (x, y, z)"
		}, 
		{
			"name": "Entity_SetHealth",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "healthPercent", "type": "float"}
			],
			"description": "Set the health of an entity. healthPercent must be in the range [0.0, 1.0]."
		}, 
		{
			"name": "Entity_SetInvulnerable",
			"returnType": "Void",
			"parameters": [
				{"name": "entity", "type": "EntityID"}, 
				{"name": "enable", "type": "Bool"}, 
				{"name": "reset_time", "type": "Float"}
			],
			"description": "Set invulnerability on the entity. Reset time is in seconds. If it it set, the invulnerability will expire after this time."
		}, 
		{
			"name": "Entity_SetInvulnerableMinCap",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "minHealthPercentage", "type": "float"}, 
				{"name": "resetTime", "type": "float"}
			],
			"description": "Make an entity invulnerable to physical damage when health is below the minimum health percentage."
		}, 
		{
			"name": "Entity_SetInvulnerableToCritical",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "invulnerable", "type": "bool"}
			],
			"description": "set an entity invulnerable to critical effects. Invulnerable to critical also means that kills a entity will not have effect"
		}, 
		{
			"name": "Entity_SetOnFire",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}
			],
			"description": "Sets an object on fire (also works on buildings)"
		}, 
		{
			"name": "Entity_SetPlayerOwner",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "owner", "type": "Player *"}
			],
			"description": "Changes the owner of the given squad."
		}, 
		{
			"name": "Entity_SetPosition",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "pos", "type": "ScarPosition"}
			],
			"description": "Sets the position of the entity. The position is currently a lua table with three entries (x, y, z)"
		}, 
		{
			"name": "Entity_SetProjectileCanExplode",
			"returnType": "void",
			"parameters": [
				{"name": "projectile", "type": "Entity *"}, 
				{"name": "canExplode", "type": "bool"}
			],
			"description": "Sets whether or not a projectile can explode."
		}, 
		{
			"name": "Entity_SetRecrewable",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "capturable", "type": "bool"}
			],
			"description": "Sets an entity to be recrewable or not when it becomes abandoned."
		}, 
		{
			"name": "Entity_SetSharedProductionQueue",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "shared", "type": "bool"}
			],
			"description": "Enables shared team production on a building (teammates can build using THEIR resources)"
		}, 
		{
			"name": "Entity_SetStrategicPointNeutral",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Sets a strategic point to neutral (not owned by any team)"
		}, 
		{
			"name": "Entity_SetWorldOwned",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Makes an entity neutral."
		}, 
		{
			"name": "Entity_SimHide",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "hide", "type": "bool"}
			],
			"description": "Shows/hides the entity in the simulation."
		}, 
		{
			"name": "Entity_Spawn",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Spawn the entity at its current position."
		}, 
		{
			"name": "Entity_StopAbility",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "ability", "type": "ScarAbilityPBG"}, 
				{"name": "bEarlyExit", "type": "bool"}
			],
			"description": "Abruptly stops an active ability."
		}, 
		{
			"name": "Entity_SuggestPosture",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "posture", "type": "unsigned"}, 
				{"name": "duration", "type": "float"}
			],
			"description": "Suggests a posture to an entity, lasting the passed duration."
		}, 
		{
			"name": "Entity_SupportsDemolition",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns whether this entity is set up to have demolitions placed on it."
		}, 
		{
			"name": "Entity_TagDebug",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Tags the entity to be used for debugging."
		}, 
		{
			"name": "Entity_VisHide",
			"returnType": "void",
			"parameters": [
				{"name": "pEntity", "type": "Entity *"}, 
				{"name": "bHide", "type": "bool"}
			],
			"description": "Hides or shows an entity visually."
		}, 
		{
			"name": "EntityQuery_CanCauseSuppression",
			"returnType": "bool",
			"parameters": [
				{"name": "aiPlayer", "type": "AIPlayer *"}, 
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Checks if this entity can cause suppression."
		}, 
		{
			"name": "EntityQuery_CanLoadSquadAndAttackCurrentTarget",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "squad", "type": "Squad *"}, 
				{"name": "bCheckSquadState", "type": "bool"}, 
				{"name": "bOverload", "type": "bool"}
			],
			"description": "Check if the entity can load squad and shoot its target after loading (This function should only be called by AI)"
		}, 
		{
			"name": "EntityQuery_FindClosestOpenPositionForStructure",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "aiPlayer", "type": "AIPlayer *"}, 
				{"name": "pEntityPBG", "type": "const PropertyBagGroup *"}, 
				{"name": "posIn", "type": "ScarPosition"}
			],
			"description": "Find the closest open position from a given position for a given Entity blueprint."
		}, 
		{
			"name": "Enum_ToNumber",
			"returnType": "int",
			"parameters": [
				{"name": "var", "type": "LuaBinding::StackVar"}
			],
			"description": "Converts any enum value to a number."
		}, 
		{
			"name": "Enum_ToString",
			"returnType": "std::string",
			"parameters": [
				{"name": "var", "type": "LuaBinding::StackVar"}
			],
			"description": "Converts any enum value to a string."
		}, 
		{
			"name": "Event_CreateAND",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "events", "type": "Table"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Creates a Callback Event that triggers when ALL of the specified events are triggered."
		}, 
		{
			"name": "Event_CreateOR",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "events", "type": "Table"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Creates a Callback Event that triggers when ANY of the specified events are triggered."
		}, 
		{
			"name": "Event_Delay",
			"returnType": "void",
			"parameters": [
				{"name": "seconds", "type": "float"}
			],
			"description": "Pauses for a given amount of time. This function MUST be called from a CTRL object in NISlet events only!"
		}, 
		{
			"name": "Event_ElementOnScreen",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "player", "type": "PlayerID"}, 
				{"name": "element", "type": "Marker/Pos/SGroup/EGroup"}, 
				{"name": "all", "type": "ANY/ALL"}, 
				{"name": "percent", "type": "Float"}, 
				{"name": "canSee", "type": "bool"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when the given squad/entity/position is on screen."
		}, 
		{
			"name": "Event_EncounterIsDead",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "encID", "type": "Table"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Trigger a Callback when an encounter is killed."
		}, 
		{
			"name": "Event_Exists",
			"returnType": "BOOL",
			"parameters": [
				{"name": "eventID", "type": "EventID"}
			],
			"description": "checks to see if the given event currently exists"
		}, 
		{
			"name": "Event_GroupBurning",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "entityID", "type": "EGroup/Entity group/"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when the egroup is burning."
		}, 
		{
			"name": "Event_GroupCount",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "ScarFN"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "group", "type": "EGroup/SGroup"}, 
				{"name": "count", "type": "Int"}, 
				{"name": "spawned", "type": "bool"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback when the number of squads/entities in a group is <= count."
		}, 
		{
			"name": "Event_GroupHasCritical",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "group", "type": "SGroup"}, 
				{"name": "delay", "type": "Float"}, 
				{"name": "Critical", "type": "BP"}, 
				{"name": "ALL", "type": "Bool ANY/"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when entire group has a specified critical."
		}, 
		{
			"name": "Event_GroupIsDead",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "group", "type": "EGroup/SGroup"}, 
				{"name": "delay", "type": "Float"}, 
				{"name": "retreating", "type": "Boolean"}
			],
			"description": "Callback given callback function with data, when group is dead (empty)."
		}, 
		{
			"name": "Event_GroupIsNotPinned",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "group", "type": "SGroup"}, 
				{"name": "ALL", "type": "bool ANY/"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when group is not pinned."
		}, 
		{
			"name": "Event_GroupIsNotSuppressed",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "group", "type": "SGroup"}, 
				{"name": "ALL", "type": "bool ANY/"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when group is not suppressed."
		}, 
		{
			"name": "Event_GroupIsPinned",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "group", "type": "SGroup"}, 
				{"name": "ALL", "type": "bool ANY/"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when group is pinned."
		}, 
		{
			"name": "Event_GroupIsSuppressed",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "group", "type": "SGroup"}, 
				{"name": "ALL", "type": "bool ANY/"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when group is suppressed."
		}, 
		{
			"name": "Event_GroupLeftAlive",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "group", "type": "EGroup/SGroup"}, 
				{"name": "amount", "type": "Int"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when the amount of entities left in a group drops below amount."
		}, 
		{
			"name": "Event_IsAnyRunning",
			"returnType": "Boolean",
			"parameters": [
				{"name": "priority_threshold", "type": "Integer"}
			],
			"description": "Returns true if any event is currently running [at or below (more important than) the priority threshold. If not specified, ignores threshold.]."
		}, 
		{
			"name": "Event_IsDoingAttack",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "group", "type": "EGroup/SGroup"}, 
				{"name": "all", "type": "ANY/ALL"}, 
				{"name": "attackTime", "type": "Float"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when group is doing an attack in the last attackTime seconds."
		}, 
		{
			"name": "Event_IsEngaged",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "group", "type": "EGroup/SGroup"}, 
				{"name": "all", "type": "ANY/ALL"}, 
				{"name": "attackTime", "type": "Float"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when group is doing an attack or is under attack in the last attackTime seconds."
		}, 
		{
			"name": "Event_IsHoldingAny",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "target", "type": "EGroup/SGroup/Entity/Squad"}, 
				{"name": "empty", "type": "Boolean"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when an element is holding anything or nothing."
		}, 
		{
			"name": "Event_IsHoldingBP",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "target", "type": "EGroup/SGroup/Entity/Squad"}, 
				{"name": "blueprint", "type": "SquadBP/Table"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when an element is holding a specific BP."
		}, 
		{
			"name": "Event_IsInHold",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "target", "type": "SGroup/Squad"}, 
				{"name": "inHold", "type": "Boolean"}, 
				{"name": "ALL", "type": "ANY/"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when a target element is in a hold or not."
		}, 
		{
			"name": "Event_IsQueued",
			"returnType": "bool",
			"parameters": [
				{"name": "f", "type": "LuaConfig::RefFunction"}
			],
			"description": "Returns true if a given event is running."
		}, 
		{
			"name": "Event_IsRunning",
			"returnType": "bool",
			"parameters": [
				{"name": "f", "type": "LuaConfig::RefFunction"}
			],
			"description": "Returns true if a given event is running."
		}, 
		{
			"name": "Event_IsSelected",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "target", "type": "SGroup/Squad/EGroup/entity"}, 
				{"name": "ALL", "type": "ANY/"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback when a target element is selected."
		}, 
		{
			"name": "Event_IsUnderAttack",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "group", "type": "EGroup/SGroup"}, 
				{"name": "ALL", "type": "bool ANY/"}, 
				{"name": "attackTime", "type": "Float"}, 
				{"name": "player", "type": "PlayerID"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when group is under attack in the last attackTime seconds."
		}, 
		{
			"name": "Event_MembersCount",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "amount", "type": "Int"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback when an SGroup's member count <= amount."
		}, 
		{
			"name": "Event_NarrativeEventsNotRunning",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when no narrative event are running."
		}, 
		{
			"name": "Event_NarrativeEventsRunning",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when narrative events are running."
		}, 
		{
			"name": "Event_ObjectiveStarted",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "Objective", "type": "ObjectiveID"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when the given objective has started."
		}, 
		{
			"name": "Event_OnHealth",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "target", "type": "EGroup/SGroup/Entity/Squad"}, 
				{"name": "threshold", "type": "Float"}, 
				{"name": "higher", "type": "Boolean"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when an element's health falls below (or above if higher is true) given threshold."
		}, 
		{
			"name": "Event_PlayerBuildingCount",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "player", "type": "PlayerID"}, 
				{"name": "amountOfBuilding", "type": "Int"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given function with data, when player has greater than or equal to amountOfBuildings."
		}, 
		{
			"name": "Event_PlayerCanNotSeeElement",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "player", "type": "PlayerID"}, 
				{"name": "element", "type": "SquadID/SGroupID/EntityID/EGroupID/Marker/Position Table"}, 
				{"name": "all", "type": "ANY/ALL"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when the given player can not see the element."
		}, 
		{
			"name": "Event_PlayerCanSeeElement",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "team", "type": "PlayerID/TeamID player/"}, 
				{"name": "element", "type": "SquadID/SGroupID/EntityID/EGroupID/Marker/Position Table"}, 
				{"name": "all", "type": "ANY/ALL"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when the given player can see the element."
		}, 
		{
			"name": "Event_PlayerDoesntOwnTerritory",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "player", "type": "PlayerID"}, 
				{"name": "entity", "type": "Int/Table/EGroup/Entity sectorID/group/"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when player owns none of the given territories."
		}, 
		{
			"name": "Event_PlayerOwnsElement",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "player", "type": "PlayerID"}, 
				{"name": "element", "type": "Entity/EGroup/Squad/SGroup"}, 
				{"name": "delay", "type": "Float"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Callback given function with data, when player owns the given element."
		}, 
		{
			"name": "Event_PlayerOwnsTerritory",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "player", "type": "PlayerID"}, 
				{"name": "territory", "type": "SectorID/EGroup/Entity/Table"}, 
				{"name": "all", "type": "ANY/ALL"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when player owns all given territories."
		}, 
		{
			"name": "Event_PlayerResourceLevel",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "player", "type": "PlayerID"}, 
				{"name": "resourceType", "type": "ResourceType"}, 
				{"name": "amount", "type": "Int"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when player has more than amount of resourceType."
		}, 
		{
			"name": "Event_PlayerSquadCount",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "player", "type": "PlayerID"}, 
				{"name": "amount", "type": "Int"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback when a player's squad count <= amount."
		}, 
		{
			"name": "Event_Proximity",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "target", "type": "PlayerID/Squad/Table/TeamID"}, 
				{"name": "location", "type": "Marker/Pos/SectorID/Table/SGroup/EGroup"}, 
				{"name": "range", "type": "REAL"}, 
				{"name": "all", "type": "ANY/ALL"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data when target enters location."
		}, 
		{
			"name": "Event_Remove",
			"returnType": "Void",
			"parameters": [
				{"name": "eventID", "type": "EventID"}
			],
			"description": "Remove the given callback."
		}, 
		{
			"name": "Event_RemoveAll",
			"returnType": "Void",
			"parameters": [
				{"name": "immediate", "type": "Bool"}
			],
			"description": "Remove all existing callback events."
		}, 
		{
			"name": "Event_Skip",
			"returnType": "void",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Completes execution of the event immediately (all calls to Wait() are ignored)"
		}, 
		{
			"name": "Event_Start",
			"returnType": "void",
			"parameters": [
				{"name": "f", "type": "LuaConfig::RefFunction"}, 
				{"name": "priority", "type": "unsigned int"}
			],
			"description": "Starts event. Event will not start until all rules are evaluated for this frame!"
		}, 
		{
			"name": "Event_StartEx",
			"returnType": "void",
			"parameters": [
				{"name": "f", "type": "LuaConfig::RefFunction"}, 
				{"name": "priority", "type": "unsigned int"}, 
				{"name": "onComplete", "type": "LuaConfig::RefFunction"}
			],
			"description": "Starts an event the same way as Event_Start, but calls a user defined function when the event is over."
		}, 
		{
			"name": "Event_TeamBuildingCount",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "team", "type": "TeamID"}, 
				{"name": "amountOfBuilding", "type": "Int"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given function with data, when player has greater than or equal to amountOfBuildings."
		}, 
		{
			"name": "Event_TeamCanNotSeeElement",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "team", "type": "TeamID"}, 
				{"name": "element", "type": "SquadID/SGroupID/EntityID/EGroupID/Marker/Position Table"}, 
				{"name": "all", "type": "ANY/ALL"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when the given team can not see the element."
		}, 
		{
			"name": "Event_TeamCanSeeElement",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "team", "type": "TeamID"}, 
				{"name": "element", "type": "SquadID/SGroupID/EntityID/EGroupID/Marker/Position Table"}, 
				{"name": "all", "type": "ANY/ALL"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when the given team can see the element."
		}, 
		{
			"name": "Event_TeamDoesntOwnTerritory",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "team", "type": "TeamID"}, 
				{"name": "entity", "type": "Int/Table/EGroup/Entity sectorID/group/"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when a team owns none of the given territories."
		}, 
		{
			"name": "Event_TeamOwnsElement",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "team", "type": "TeamID"}, 
				{"name": "element", "type": "Entity/EGroup/Squad/SGroup"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given function with data, when a team owns the given element."
		}, 
		{
			"name": "Event_TeamOwnsTerritory",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "team", "type": "TeamID"}, 
				{"name": "entity", "type": "Int/Table/EGroup/Entity sectorID/group/"}, 
				{"name": "all", "type": "ANY/ALL"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when a team owns all given territories."
		}, 
		{
			"name": "Event_TeamResourceLevel",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "team", "type": "TeamID"}, 
				{"name": "resourceType", "type": "ResourceType"}, 
				{"name": "amount", "type": "Int"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback given callback function with data, when a team has a combined amount more than amount of resourceType."
		}, 
		{
			"name": "Event_TeamSquadCount",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "team", "type": "TeamID"}, 
				{"name": "amount", "type": "Int"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback when a Team's squad count <= amount."
		}, 
		{
			"name": "Event_TerritoryInSupply",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "player", "type": "PlayerID"}, 
				{"name": "territory", "type": "ScarPos"}, 
				{"name": "inSupply", "type": "Boolean"}, 
				{"name": "delay", "type": "Float"}
			],
			"description": "Callback when a territory is/is not in supply."
		}, 
		{
			"name": "Event_Timer",
			"returnType": "EventID",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "data", "type": "Table"}, 
				{"name": "delay", "type": "INT/Table"}
			],
			"description": "Callback given callback function with data, after a specified delay."
		}, 
		{
			"name": "Event_ToggleDebug",
			"returnType": "Void",
			"parameters": [
			],
			"description": "Toggles the ScarEvent debugger ON and OFF."
		}, 
		{
			"name": "Event_View",
			"returnType": "Void",
			"parameters": [
				{"name": "eventID", "type": "INT"}
			],
			"description": "Calls the view_manager on a ScarEvent with a specific ID."
		}, 
		{
			"name": "EventCue_Create",
			"returnType": "event",
			"parameters": [
				{"name": "style", "type": "CueStyleID"}, 
				{"name": "title", "type": "LocString"}, 
				{"name": "description", "type": "LocString"}, 
				{"name": "cameratarget", "type": "Marker/Pos/EGroup/SGroup"}, 
				{"name": "hintpointtext", "type": "LocString"}, 
				{"name": "function", "type": "LuaFunction"}, 
				{"name": "lifetime", "type": "Float"}, 
				{"name": "dismissOnClick", "type": "Boolean"}
			],
			"description": "Creates an Event Cue message which automatically sends the camera to a specified point when clicked on."
		}, 
		{
			"name": "EventHandler_AddEncounterUnits",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table"}
			],
			"description": "Callback helper function for adding unitse an Encounter. Name of parameters: 'units'."
		}, 
		{
			"name": "EventHandler_AssignEncounterGoal",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table"}
			],
			"description": "Callback helper function for assigning a goal to an Encounter. Name of parameters: 'goalData', 'encounter'."
		}, 
		{
			"name": "EventHandler_ObjectiveComplete",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table"}
			],
			"description": "Callback helper function for completing an objective. Received parameters: Table objective, Bool showTitle, Bool skipIntel."
		}, 
		{
			"name": "EventHandler_ObjectiveStart",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table"}
			],
			"description": "Callback helper function for starting an objective, name of objective parameter is objective, additional parameters: Bool showTitle, Bool skipIntel."
		}, 
		{
			"name": "EventHandler_RemoveHint",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table"}
			],
			"description": "Callback helper function for removing in-game hints. Name of hintpointID parameter is 'hint'. Can receive a table of ID's."
		}, 
		{
			"name": "EventHandler_RemoveMinimapBlip",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table"}
			],
			"description": "Callback helper function for removing in minimap blips, name of blipID parameter is blip."
		}, 
		{
			"name": "EventHandler_RemoveObjectiveUI",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table"}
			],
			"description": "Callback helper function that removes objective UI elements, name of parameters: objective, element."
		}, 
		{
			"name": "EventHandler_Retreat",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table"}
			],
			"description": "Callback helper function that causes the input group to retreat, name of parameters: group, location, deleteAtMarker, queued."
		}, 
		{
			"name": "EventHandler_StaggeredRetreat",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table"}
			],
			"description": "Callback helper function that causes the input group to retreat, name of parameters: group, location, maxTries."
		}, 
		{
			"name": "EventHandler_StartIntel",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table"}
			],
			"description": "Callback helper function for Intel events, name of intel parameter is intel."
		}, 
		{
			"name": "EventHandler_StartNislet",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table"}
			],
			"description": "Callback helper function for Intel Nislet events, name of intel parameter is intel."
		}, 
		{
			"name": "EventHandler_StopFlashing",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table"}
			],
			"description": "Callback helper function for removing UI flashing. Name of ID parameter is flashID."
		}, 
		{
			"name": "EventHandler_TriggerEncounterGoal",
			"returnType": "Void",
			"parameters": [
				{"name": "data", "type": "Table"}
			],
			"description": "Callback helper function for triggering an Encounter goal. Name of parameters: 'encounter'."
		}, 
		{
			"name": "FOW_Enable",
			"returnType": "Void",
			"parameters": [
				{"name": "enable", "type": "Boolean"}
			],
			"description": "Enables or disables the FOW, including out of bound areas and all entities on the map."
		}, 
		{
			"name": "FOW_PlayerExploreAll",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}
			],
			"description": "Explores entire map for one player."
		}, 
		{
			"name": "FOW_PlayerRevealAll",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}
			],
			"description": "Reveal FOW for specified player."
		}, 
		{
			"name": "FOW_PlayerRevealArea",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "radius", "type": "float"}, 
				{"name": "durationSecs", "type": "float"}
			],
			"description": "Reveals a circular area for the given player over a given duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA."
		}, 
		{
			"name": "FOW_PlayerUnExploreAll",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}
			],
			"description": "Unexplores entire map for one player."
		}, 
		{
			"name": "FOW_PlayerUnRevealAll",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}
			],
			"description": "Use to undo a FOW_RevealAll for specified player."
		}, 
		{
			"name": "FOW_PlayerUnRevealArea",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "radius", "type": "float"}
			],
			"description": "UnReveals a circular area for a given player. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA."
		}, 
		{
			"name": "FOW_RevealAll",
			"returnType": "void",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Reveal FOW for all players."
		}, 
		{
			"name": "FOW_RevealArea",
			"returnType": "void",
			"parameters": [
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "radius", "type": "float"}, 
				{"name": "durationSecs", "type": "float"}
			],
			"description": "Reveals a circular area for all alive players over a given duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA."
		}, 
		{
			"name": "FOW_RevealEGroup",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "EGroup *"}, 
				{"name": "durationSecs", "type": "float"}
			],
			"description": "Reveals an entity groups line of sight(LOS) for all alive players over a given duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA."
		}, 
		{
			"name": "FOW_RevealEGroupOnly",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "EGroup *"}, 
				{"name": "durationSecs", "type": "float"}
			],
			"description": "Reveals an entity groups in FOW for all alive players over a given duration."
		}, 
		{
			"name": "FOW_RevealEntity",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "durationSecs", "type": "float"}
			],
			"description": "Reveals an entities line of sight (LOS) for all alive players over a given duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA."
		}, 
		{
			"name": "FOW_RevealMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "marker", "type": "MarkerID"}, 
				{"name": "duration", "type": "Real"}
			],
			"description": "Reveals an area the size of a given markers proximity at that markers position for a given amount of time. Pass in a duration of 1 for indefinite duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA."
		}, 
		{
			"name": "FOW_RevealSGroup",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "SGroup *"}, 
				{"name": "durationSecs", "type": "float"}
			],
			"description": "Reveals a squad groups line of sight(LOS) for all alive players over a given duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA."
		}, 
		{
			"name": "FOW_RevealSGroupOnly",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "SGroup *"}, 
				{"name": "durationSecs", "type": "float"}
			],
			"description": "Reveals a squad groups in fow for all alive players over a given duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA."
		}, 
		{
			"name": "FOW_RevealSquad",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "durationSecs", "type": "float"}
			],
			"description": "Reveals a squads line if sight(LOS) for all alive players over a given duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA."
		}, 
		{
			"name": "FOW_RevealTerritory",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "sectorID", "type": "int"}, 
				{"name": "durationSecs", "type": "float"}, 
				{"name": "mustOwn", "type": "bool"}
			],
			"description": "Reveals a territory to a player."
		}, 
		{
			"name": "FOW_UnRevealAll",
			"returnType": "void",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Use to undo a FOW_RevealAll."
		}, 
		{
			"name": "FOW_UnRevealArea",
			"returnType": "void",
			"parameters": [
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "radius", "type": "float"}
			],
			"description": "UnReveals a circular area for all alive players. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA."
		}, 
		{
			"name": "FOW_UnRevealMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "marker", "type": "MarkerID"}
			],
			"description": "Unreveals an area the size of a given markers proximity at that markers position. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA."
		}, 
		{
			"name": "FOW_UnRevealTerritory",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "sectorID", "type": "int"}
			],
			"description": "Unreveals a territory sector."
		}, 
		{
			"name": "Game_GetLocalPlayer",
			"returnType": "Player",
			"parameters": [
				{"name": "Void", "type": "any"}
			],
			"description": "Get the local player. (should only be used for UI purpose) (not strict)"
		}, 
		{
			"name": "Game_DefaultGameRestore",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "any"}
			],
			"description": "Restores various aspects of the single player game after loading a mission from a save game."
		}, 
		{
			"name": "Game_EndSP",
			"returnType": "Void",
			"parameters": [
				{"name": "win", "type": "Boolean"}, 
				{"name": "nis", "type": "Boolean"}, 
				{"name": "sandmap", "type": "Boolean"}
			],
			"description": "Ends the single player game (win/lose)."
		}, 
		{
			"name": "Game_FadeToBlack",
			"returnType": "Void",
			"parameters": [
				{"name": "direction", "type": "Bool"}, 
				{"name": "length", "type": "Real"}
			],
			"description": "Fades the screen to black - FADE_OUT to fade to black, FADE_IN to fade back in."
		}, 
		{
			"name": "Game_GetGameRestoreCallbackExists",
			"returnType": "Void",
			"parameters": [
				{"name": "callback", "type": "Function"}
			],
			"description": "Checks whether a callback."
		}, 
		{
			"name": "Game_RemoveGameRestoreCallback",
			"returnType": "Void",
			"parameters": [
				{"name": "callback", "type": "Function"}
			],
			"description": "Removes a callback from being called on game restore."
		}, 
		{
			"name": "Game_SetGameRestoreCallback",
			"returnType": "Void",
			"parameters": [
				{"name": "callback", "type": "Function"}, 
				{"name": "parmeter1", "type": "any"}, 
				{"name": "parameter2", "type": "any"}, 
				{"name": "...", "type": "any"}
			],
			"description": "Adds a function and set of arguments to be automatically called during restore from a saved game. Maxiumum of 9 parameters. Callback will be called like this: Callback(arg[1], arg[2], ...)"
		}, 
		{
			"name": "Game_SubTextFade",
			"returnType": "Void",
			"parameters": [
				{"name": "location", "type": "LocString"}, 
				{"name": "time", "type": "LocString"}, 
				{"name": "detail", "type": "LocString"}, 
				{"name": "in", "type": "Real"}, 
				{"name": "lifetime", "type": "Real"}, 
				{"name": "out", "type": "Real"}
			],
			"description": "Fade in and out two or three lines of subtext."
		}, 
		{
			"name": "HintMouseover_Add",
			"returnType": "Void",
			"parameters": [
				{"name": "hintText", "type": "LocString"}, 
				{"name": "hintTarget", "type": "Marker/Position/Egroup/Sgroup"}, 
				{"name": "targetRadius", "type": "Real"}, 
				{"name": "looping", "type": "Boolean"}
			],
			"description": "Adds a Hint Point that will only appear on Mouseover of the target."
		}, 
		{
			"name": "HintMouseover_Remove",
			"returnType": "Void",
			"parameters": [
				{"name": "hintText", "type": "LocString"}, 
				{"name": "hintTarget", "type": "Marker/Egroup/Sgroup"}
			],
			"description": "Removes a Mouseover Hint Point from the managing function."
		}, 
		{
			"name": "HintPoint_Add",
			"returnType": "HintPointID",
			"parameters": [
				{"name": "where", "type": "StackVar"}, 
				{"name": "bVisible", "type": "Boolean"}, 
				{"name": "hintText", "type": "LocString"}, 
				{"name": "height", "type": "number"}, 
				{"name": "actionType", "type": "HintPointActionType"}, 
				{"name": "iconName", "type": "String"}
			],
			"description": "Creates a hintpoint attached to a Marker, EGroup, SGroup or position."
		}, 
		{
			"name": "HintPoint_Remove",
			"returnType": "Void",
			"parameters": [
				{"name": "HintPointID", "type": "Integer"}
			],
			"description": "Removes a hintpoint."
		}, 
		{
			"name": "HintPoint_SetDisplayOffset",
			"returnType": "Void",
			"parameters": [
				{"name": "hintpointID", "type": "Integer"}, 
				{"name": "x", "type": "Real"}, 
				{"name": "y", "type": "Real"}, 
				{"name": "z", "type": "Real"}
			],
			"description": "Sets a hintpoint's display offset, which is 3D for world hintpoints and 2D for taskbar binding hintpoints (ignore z)"
		}, 
		{
			"name": "HintPoint_SetVisible",
			"returnType": "Void",
			"parameters": [
				{"name": "HintPointID", "type": "Integer"}, 
				{"name": "bVisible", "type": "Boolean"}
			],
			"description": "Sets a hintpoint's visibility. Currently, FOW is not accounted for."
		}, 
		{
			"name": "Import_Once",
			"returnType": "nil",
			"parameters": [
				{"name": "Path", "type": "String"}
			],
			"description": "Loads a scar file if it hasn't been loaded yet."
		}, 
		{
			"name": "Loc_FormatText",
			"returnType": "LocString",
			"parameters": [
				{"name": "FormatID", "type": "Integer"}, 
				{"name": "parameters", "type": "argc"}
			],
			"description": "Returns a formatted localized string."
		}, 
		{
			"name": "MapIcon_CreateArrow",
			"returnType": "Void",
			"parameters": [
				{"name": "position_from", "type": "Marker/Pos"}, 
				{"name": "position_to", "type": "Marker/Pos"}, 
				{"name": "red", "type": "Int"}, 
				{"name": "green", "type": "Int"}, 
				{"name": "blue", "type": "Int"}, 
				{"name": "alpha", "type": "Int"}
			],
			"description": "Creates an arrow on the metamap between the two locations provided."
		}, 
		{
			"name": "Marker_CleanUpTheDead",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "marker", "type": "MarkerID"}
			],
			"description": "Kill off a specific player's dead bodies (enter ALL to clean them all up) in a marker radius."
		}, 
		{
			"name": "Marker_DoesNumberAttributeExist",
			"returnType": "bool",
			"parameters": [
				{"name": "marker", "type": "ScarMarker"}, 
				{"name": "name", "type": "const char *"}
			],
			"description": "Returns true if a generic number attribute exists for the marker type."
		}, 
		{
			"name": "Marker_DoesStringAttributeExist",
			"returnType": "bool",
			"parameters": [
				{"name": "marker", "type": "ScarMarker"}, 
				{"name": "name", "type": "const char *"}
			],
			"description": "Returns true if a generic string attribute exists for the marker type."
		}, 
		{
			"name": "Marker_Exists",
			"returnType": "bool",
			"parameters": [
				{"name": "name", "type": "const char *"}, 
				{"name": "type", "type": "const char *"}
			],
			"description": "Returns true if marker exists. If you don't care about the type, pass in an empty string ( \"\" )"
		}, 
		{
			"name": "Marker_FromName",
			"returnType": "ScarMarker",
			"parameters": [
				{"name": "name", "type": "const char *"}, 
				{"name": "type", "type": "const char *"}
			],
			"description": "Returns a ScarMarker from the Mission Editor. If you don't care about the type, pass in an empty string ( \"\" )"
		}, 
		{
			"name": "Marker_GetDirection",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "marker", "type": "ScarMarker"}
			],
			"description": "Returns a vector for the marker direction."
		}, 
		{
			"name": "Marker_GetName",
			"returnType": "const char *",
			"parameters": [
				{"name": "marker", "type": "ScarMarker"}
			],
			"description": "Returns the name of a given marker. This value gets set in the Mission Editor."
		}, 
		{
			"name": "Marker_GetNonSequentialTable",
			"returnType": "LuaTable",
			"parameters": [
				{"name": "format", "type": "String"}, 
				{"name": "size", "type": "Integer"}
			],
			"description": "Returns a fixed size table of markers from the world builder. Markers that do not exist in the WB, will be nil in the table. This is why we call it 'non-sequential'."
		}, 
		{
			"name": "Marker_GetNumberAttribute",
			"returnType": "float",
			"parameters": [
				{"name": "marker", "type": "ScarMarker"}, 
				{"name": "name", "type": "const char *"}
			],
			"description": "Returns a generic number attribute defined in a marker."
		}, 
		{
			"name": "Marker_GetPosition",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "marker", "type": "ScarMarker"}
			],
			"description": "Returns the position of a given marker."
		}, 
		{
			"name": "Marker_GetProximityRadius",
			"returnType": "float",
			"parameters": [
				{"name": "marker", "type": "ScarMarker"}
			],
			"description": "Returns the proximity radius of a given marker. Only for marker with proximity type PT_Circle. This value gets set in the Mission Editor."
		}, 
		{
			"name": "Marker_GetProximityType",
			"returnType": "MarkerObj::ProximityType",
			"parameters": [
				{"name": "marker", "type": "ScarMarker"}
			],
			"description": "Returns the proximity type of a given marker. The possible results are PT_Circle and PT_Rectangle."
		}, 
		{
			"name": "Marker_GetSequence",
			"returnType": "Table",
			"parameters": [
				{"name": "name", "type": "String"}, 
				{"name": "type", "type": "String"}
			],
			"description": "Builds a table of MarkerIDs that are named in a sequence. i.e. a name of \"spot\" will find markers \"spot1\", \"spot2\" and so on, up until it looks for a marker that isn't there."
		}, 
		{
			"name": "Marker_GetStringAttribute",
			"returnType": "std::string",
			"parameters": [
				{"name": "marker", "type": "ScarMarker"}, 
				{"name": "name", "type": "const char *"}
			],
			"description": "Returns a generic string attribute defined in a marker."
		}, 
		{
			"name": "Marker_GetTable",
			"returnType": "LuaTable",
			"parameters": [
				{"name": "format", "type": "String"}
			],
			"description": "Returns a table of markers from the world builder. Creates as many as it finds."
		}, 
		{
			"name": "Marker_GetType",
			"returnType": "const char *",
			"parameters": [
				{"name": "marker", "type": "ScarMarker"}
			],
			"description": "Returns the typename of a given marker. This is the typename from the Mission Editor (name displayed when placing markers)"
		}, 
		{
			"name": "Marker_InProximity",
			"returnType": "bool",
			"parameters": [
				{"name": "marker", "type": "ScarMarker"}, 
				{"name": "pos", "type": "ScarPosition"}
			],
			"description": "Returns true if the given position is in the markers proximity radius or proximity rectangle (depending on the type)."
		}, 
		{
			"name": "MergeClone",
			"returnType": "Table",
			"parameters": [
				{"name": "defaultTable", "type": "Table"}, 
				{"name": "overrideTable", "type": "Table"}
			],
			"description": "Merge clones two table (recursively) into a single table combining into a new table allowing for unadulterated use of the data."
		}, 
		{
			"name": "MergeCloneTable",
			"returnType": "Void",
			"parameters": [
				{"name": "modifyGoalData", "type": "Table"}
			],
			"description": "Adjust default goal data. Sets the default GoalData to the current defaults plus additionalDefaultGoalData; any values specified are used for unspecified encounter goal values."
		}, 
		{
			"name": "Misc_DoWeaponHitEffectOnPosition",
			"returnType": "void",
			"parameters": [
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "weaponPBG", "type": "ScarWeaponPBG"}, 
				{"name": "penetrated", "type": "bool"}
			],
			"description": "Do weapon hit effect on the ground."
		}, 
		{
			"name": "Misc_GetScarFullFilename",
			"returnType": "const char *",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Returns the full path name to the main SCAR script."
		}, 
		{
			"name": "Misc_GetTerrainHeight",
			"returnType": "float",
			"parameters": [
				{"name": "p", "type": "ScarPosition"}
			],
			"description": "Returns the terrain height at the top-down co-ordinate specified (for terrain entities can walk on only)"
		}, 
		{
			"name": "Misc_IsEGroupOnScreen",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "EGroupID"}, 
				{"name": "percent", "type": "Real"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Test whether ANY or ALL of an EGroup is on screen currently (not strict)"
		}, 
		{
			"name": "Misc_IsEGroupSelected",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ANY or ALL of the EGroup is selected."
		}, 
		{
			"name": "Misc_IsSGroupOnScreen",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID"}, 
				{"name": "percent", "type": "Real"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Test whether ANY or ALL of an SGroup is on screen currently (not strict)"
		}, 
		{
			"name": "Misc_IsSGroupSelected",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ANY or ALL of the SGroup is selected."
		}, 
		{
			"name": "Misc_ToggleEntities",
			"returnType": "void",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Hide all world entities for NIS performance debugging."
		}, 
		{
			"name": "Modifier_IsEnabledOnEGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "modifier", "type": "String"}, 
				{"name": "modtype", "type": "String"}, 
				{"name": "all", "type": "Boolean"}, 
				{"name": "bEnabledByDefault", "type": "Boolean"}
			],
			"description": "Checks if a modifier is enabled on all or any entities in an egroup."
		}, 
		{
			"name": "Modifier_Remove",
			"returnType": "Void",
			"parameters": [
				{"name": "modifier", "type": "ModID"}
			],
			"description": "Remove an applied modifier."
		}, 
		{
			"name": "Modifier_RemoveAllFromEGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}
			],
			"description": "Removes all SCAR-applied modifiers for a specific EGroup."
		}, 
		{
			"name": "Modifier_RemoveAllFromSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}
			],
			"description": "Removes all SCAR-applied modifiers for a specific SGroup."
		}, 
		{
			"name": "Modify_AbilityDelayTime",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "ability", "type": "AbilityID"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies the initial delay time of an ability."
		}, 
		{
			"name": "Modify_AbilityDurationTime",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "ability", "type": "AbilityID"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies the duration of an ability."
		}, 
		{
			"name": "Modify_AbilityManpowerCost",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "ability", "type": "AbilityID"}, 
				{"name": "scalefactor", "type": "Real"}, 
				{"name": "mathtype", "type": "Integer"}
			],
			"description": "Modifies the manpower cost of an ability."
		}, 
		{
			"name": "Modify_AbilityMaxCastRange",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "ability", "type": "AbilityID"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies the maximum casting range of an ability. NOTE: it assumes that the actions that the ability executes can also handle the modified range."
		}, 
		{
			"name": "Modify_AbilityMinCastRange",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "ability", "type": "AbilityID"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies the minimum casting range of an ability. NOTE: it assumes that the actions that the ability executes can also handle the modified range."
		}, 
		{
			"name": "Modify_AbilityMunitionsCost",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "ability", "type": "AbilityID"}, 
				{"name": "scalefactor", "type": "Real"}, 
				{"name": "mathtype", "type": "Integer"}
			],
			"description": "Modifies the munitions cost of an ability."
		}, 
		{
			"name": "Modify_AbilityRechargeTime",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "ability", "type": "AbilityID"}, 
				{"name": "scalefactor", "type": "Real"}, 
				{"name": "mathtype", "type": "Integer"}
			],
			"description": "Modifies the recharge time of an ability."
		}, 
		{
			"name": "Modify_Armor",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID"}, 
				{"name": "scalefactor", "type": "Real"}, 
				{"name": "exclusive", "type": "Boolean"}
			],
			"description": "Modifies a squad or entity's armor."
		}, 
		{
			"name": "Modify_CaptureTime",
			"returnType": "ModID",
			"parameters": [
				{"name": "sgroup", "type": "EGroupID"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies the capture time of all strategic points in an EGroup. DO NOT USE THIS FUNCTION."
		}, 
		{
			"name": "Modify_DisableHold",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "EGroupID"}, 
				{"name": "disable", "type": "Boolean"}
			],
			"description": "Enable or disable hold (garrisoning) for an egroup or sgroup."
		}, 
		{
			"name": "Modify_Enable_ParadropReinforcements",
			"returnType": "Void",
			"parameters": [
				{"name": "playerId", "type": "PlayerID"}, 
				{"name": "enable", "type": "Boolean"}
			],
			"description": "Allows paratroopers to reinforce from the sky. Set to true to enable, false to disable."
		}, 
		{
			"name": "Modify_EntityBuildTime",
			"returnType": "ModID",
			"parameters": [
				{"name": "playerId", "type": "PlayerID"}, 
				{"name": "ebp", "type": "String"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies the time taken to build a particular EBP. This only affects the given player."
		}, 
		{
			"name": "Modify_EntityCost",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "blueprint", "type": "String"}, 
				{"name": "resourcetype", "type": "Integer"}, 
				{"name": "addition", "type": "Integer"}
			],
			"description": "Modifies the cost of an entity for a particular player. Possible resource types are RT_Manpower, RT_Munition, RT_Fuel, RT_Action."
		}, 
		{
			"name": "Modify_PlayerExperienceReceived",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "factor", "type": "Real"}
			],
			"description": "Modifies the veterancy experience received by a player."
		}, 
		{
			"name": "Modify_PlayerProductionRate",
			"returnType": "ModID",
			"parameters": [
				{"name": "sgroup", "type": "PlayerID"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies the production rate of a player."
		}, 
		{
			"name": "Modify_PlayerResourceCap",
			"returnType": "ModID",
			"parameters": [
				{"name": "playerId", "type": "PlayerID"}, 
				{"name": "resourceType", "type": "Integer"}, 
				{"name": "scalefactor", "type": "Real"}, 
				{"name": "mathtype", "type": "Integer"}
			],
			"description": "Modifies a player's resource cap. Possible resource types are RT_Manpower, RT_Munition, RT_Fuel. Possible math types are MUT_Multiplication, MUT_Addition."
		}, 
		{
			"name": "Modify_PlayerResourceGift",
			"returnType": "ModID",
			"parameters": [
				{"name": "playerId", "type": "PlayerID"}, 
				{"name": "resourceType", "type": "Integer"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies a player's resource bonus received (ie. one-time resource gifts) Possible resource types are RT_Manpower, RT_Munition, RT_Fuel, RT_Action."
		}, 
		{
			"name": "Modify_PlayerResourceRate",
			"returnType": "ModID",
			"parameters": [
				{"name": "playerId", "type": "PlayerID"}, 
				{"name": "resourceType", "type": "Integer"}, 
				{"name": "scalefactor", "type": "Real"}, 
				{"name": "mathtype", "type": "Integer"}
			],
			"description": "Modifies a player's incoming resource rate. Possible resource types are RT_Manpower, RT_Munition, RT_Fuel, RT_Action. Possible math types are MUT_Multiplication, MUT_Addition."
		}, 
		{
			"name": "Modify_PlayerSightRadius",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies the sight radius for a player."
		}, 
		{
			"name": "Modify_ProductionRate",
			"returnType": "ModID",
			"parameters": [
				{"name": "sgroup", "type": "EGroupID"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies the production rate of all factories in an EGroup."
		}, 
		{
			"name": "Modify_ProductionSpeed",
			"returnType": "ModID",
			"parameters": [
				{"name": "entity", "type": "Entity"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies the build time for a particular upgrade. This only affects the given player."
		}, 
		{
			"name": "Modify_ProjectileDelayTime",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "entityBP", "type": "PBG"}, 
				{"name": "factor", "type": "Real"}
			],
			"description": "Modifies a projectile's delay_detonate_time."
		}, 
		{
			"name": "Modify_ReceivedAccuracy",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID"}, 
				{"name": "scalefactor", "type": "Real"}, 
				{"name": "exclusive", "type": "Boolean"}
			],
			"description": "Modifies the chance of a squad/entity being hit."
		}, 
		{
			"name": "Modify_ReceivedDamage",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID"}, 
				{"name": "scalefactor", "type": "Real"}, 
				{"name": "exclusive", "type": "Boolean"}
			],
			"description": "Modifies the damage a squad/entity receives."
		}, 
		{
			"name": "Modify_ReceivedSuppression",
			"returnType": "ModID",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies the rate at which a squad gets suppressed."
		}, 
		{
			"name": "Modify_SetUpgradeCost",
			"returnType": "ModID",
			"parameters": [
				{"name": "playerId", "type": "PlayerID"}, 
				{"name": "upgrade", "type": "UpgradeID"}, 
				{"name": "resourceType", "type": "Integer"}, 
				{"name": "newCost", "type": "Real"}
			],
			"description": "Sets the cost of an upgrade. This only affects the given player."
		}, 
		{
			"name": "Modify_SightRadius",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies the sight radius for an egroup or an sgroup."
		}, 
		{
			"name": "Modify_SquadAvailability",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "blueprint", "type": "String"}, 
				{"name": "addition", "type": "Integer"}
			],
			"description": "Modifies the availability limit of a squad type for any given player."
		}, 
		{
			"name": "Modify_SquadCaptureRate",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies a squad's rate at which it will capture a strategic point."
		}, 
		{
			"name": "Modify_SquadTypeSightRadius",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "blueprint", "type": "String"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies the sight radius of a squad type for any given player."
		}, 
		{
			"name": "Modify_TargetPriority",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID"}, 
				{"name": "addition", "type": "Integer"}
			],
			"description": "Modifies the target priority of a squad or entity group from the attacker. The value is an addition."
		}, 
		{
			"name": "Modify_TeamWeapon",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID"}, 
				{"name": "modifier", "type": "String"}, 
				{"name": "scalefactor", "type": "Real"}, 
				{"name": "hardpoint", "type": "String"}
			],
			"description": "Modifies a sync weapon only."
		}, 
		{
			"name": "Modify_TerritoryRadius",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "EGroupID"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies the territory radius for an egroup or an sgroup."
		}, 
		{
			"name": "Modify_UnitSpeed",
			"returnType": "ModID",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies the maximum speed for a vehicle. This has no effect on infantry."
		}, 
		{
			"name": "Modify_UnitVeterancyValue",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroup/EGroup"}, 
				{"name": "scalefactor", "type": "Real"}, 
				{"name": "mathtype", "type": "Integer"}, 
				{"name": "exclusive", "type": "any"}
			],
			"description": "Modifies the Veterancy Experience value of the target SGroup, EGroup, Entity, or Squad. Mathtype is Multiplication by default."
		}, 
		{
			"name": "Modify_UpgradeBuildTime",
			"returnType": "ModID",
			"parameters": [
				{"name": "playerId", "type": "PlayerID"}, 
				{"name": "upgrade", "type": "UpgradeID"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies the build time for a particular upgrade. This only affects the given player."
		}, 
		{
			"name": "Modify_Upkeep",
			"returnType": "ModID",
			"parameters": [
				{"name": "playerId", "type": "PlayerID"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies the upkeep for a player."
		}, 
		{
			"name": "Modify_VehicleRepairRate",
			"returnType": "ModID",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "factor", "type": "Real"}, 
				{"name": "engineer_entity_blueprint", "type": "String"}
			],
			"description": "Modifies the vehicle repair rate of all a player's engineers."
		}, 
		{
			"name": "Modify_VehicleRotationSpeed",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "EGroupID/SGroupID"}, 
				{"name": "factor", "type": "Real"}
			],
			"description": "Modifies the vehicle rotation speed."
		}, 
		{
			"name": "Modify_VehicleTurretRotationSpeed",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID"}, 
				{"name": "hardpoint", "type": "String"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies the turret rotation speed of a vehicle squad."
		}, 
		{
			"name": "Modify_Vulnerability",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "EGroupID/SGroupID"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Increases the received accuracy, penetration, and damage on a squad by the scalefactor. For example, a scalefactor of 2 means that the squad gets 2x the received accuracy, 2x the received penetration, and 2x the received damage."
		}, 
		{
			"name": "Modify_WeaponAccuracy",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID"}, 
				{"name": "hardpoint", "type": "String"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies a squad's weapon accuracy."
		}, 
		{
			"name": "Modify_WeaponBurstLength",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID"}, 
				{"name": "hardpoint", "type": "String"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies a squad's weapon burst length (time)."
		}, 
		{
			"name": "Modify_WeaponBurstRateOfFire",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID"}, 
				{"name": "hardpoint", "type": "String"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies a squad's weapon rate of fire."
		}, 
		{
			"name": "Modify_WeaponCooldown",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID"}, 
				{"name": "hardpoint", "type": "String"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies a squad's weapon cooldown time."
		}, 
		{
			"name": "Modify_WeaponDamage",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID"}, 
				{"name": "hardpoint", "type": "String"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies a squad's weapon damage."
		}, 
		{
			"name": "Modify_WeaponEnabled",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID"}, 
				{"name": "hardpoint", "type": "String"}, 
				{"name": "enabled", "type": "Boolean"}
			],
			"description": "Enables or disables a weapon hardpoint."
		}, 
		{
			"name": "Modify_WeaponPenetration",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID"}, 
				{"name": "hardpoint", "type": "String"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies a squad's weapon penetration. Does not work on artillery (mortar, nebelwerfer, etc.)"
		}, 
		{
			"name": "Modify_WeaponRange",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID"}, 
				{"name": "hardpoint", "type": "String"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies a squad's weapon range. Does not work on artillery (mortar, nebelwerfer, etc.)"
		}, 
		{
			"name": "Modify_WeaponReload",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID"}, 
				{"name": "hardpoint", "type": "String"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies a squad's weapon reload time."
		}, 
		{
			"name": "Modify_WeaponScatter",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID"}, 
				{"name": "hardpoint", "type": "String"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies a squad's weapon scatter."
		}, 
		{
			"name": "Modify_WeaponSuppression",
			"returnType": "ModID",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID"}, 
				{"name": "hardpoint", "type": "String"}, 
				{"name": "scalefactor", "type": "Real"}
			],
			"description": "Modifies a squad's weapon suppression. Does not work on artillery (mortar, nebelwerfer, etc.)"
		}, 
		{
			"name": "ModMisc_MakeCasualtyAction",
			"returnType": "void",
			"parameters": [
				{"name": "pTargetEntity", "type": "Entity *"}
			],
			"description": "Make the passed entity a casualty by triggering the MakeCasualtyAction."
		}, 
		{
			"name": "ModMisc_OOCAction",
			"returnType": "void",
			"parameters": [
				{"name": "pTargetEntity", "type": "Entity *"}
			],
			"description": "Make the passed entity go out of control."
		}, 
		{
			"name": "MP_BlizzardInit",
			"returnType": "Void",
			"parameters": [
				{"name": "blizzard_atmosphere", "type": "String"}, 
				{"name": "default_atmosphere", "type": "String"}, 
				{"name": "startInBlizzard", "type": "Boolean"}, 
				{"name": "blizzardData", "type": "Table"}, 
				{"name": "useSpeech", "type": "Boolean"}, 
				{"name": "transitionOutAtmosphere", "type": "String"}
			],
			"description": "Initializes and starts cold weather and blizzard mechanics, taking in atmosphere presets to use in each condition. Uses MP values by default. Defaults to NOT starting in blizzard conditions."
		}, 
		{
			"name": "Objective_AddPing",
			"returnType": "PingID",
			"parameters": [
				{"name": "objectiveTable", "type": "LuaTable"}, 
				{"name": "pos", "type": "Position"}
			],
			"description": "Adds a tactical map ping to an objective."
		}, 
		{
			"name": "Objective_AddUIElements",
			"returnType": "ElementID",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}, 
				{"name": "pos", "type": "Position"}, 
				{"name": "ping", "type": "Boolean"}, 
				{"name": "hintpointText", "type": "LocString"}, 
				{"name": "worldArrow", "type": "Boolean"}, 
				{"name": "objectiveArrowOffset", "type": "Float/Position"}, 
				{"name": "objectiveArrowFacing", "type": "Entity/Squad/Position"}, 
				{"name": "actionType", "type": "HintPointActionType"}, 
				{"name": "iconName", "type": "String"}
			],
			"description": "Adds multiple UI elements on one position. 'pos' can be group/entity/squad/marker. worldArrow adds a 3D arrow which points to the thing in the world. hintpointText adds a hint point that appears on the thing when moused over. If you're adding an arrow or a hintpoint, this thing will be among those potentially pointed to by the 2D HUD arrow. objectiveArrowOffset is an offset applied to the arrow's position (you can specify a height offset or a 3D position offset)."
		}, 
		{
			"name": "Objective_AreAllPrimaryObjectivesComplete",
			"returnType": "Boolean",
			"parameters": [
				{"name": "none", "type": "any"}
			],
			"description": "Returns whether all primary objectives have been completed."
		}, 
		{
			"name": "Objective_Complete",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}, 
				{"name": "bShowTitle", "type": "Boolean"}, 
				{"name": "skipIntel", "type": "Boolean"}
			],
			"description": "'Completes' an objective. Wrapper function for Objective_SetState with a few other features. If you do not want the objective title to be shown on screen, pass in 'false' for bShowTitle"
		}, 
		{
			"name": "Objective_Fail",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}, 
				{"name": "bShowTitle", "type": "Boolean"}, 
				{"name": "skipIntel", "type": "Boolean"}
			],
			"description": "'Fails' an objective. Wrapper function for Objective_SetState with a few other features."
		}, 
		{
			"name": "Objective_GetCounter",
			"returnType": "Integer",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}
			],
			"description": "Returns the current count associated with this objective."
		}, 
		{
			"name": "Objective_GetTimerSeconds",
			"returnType": "Integer",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}
			],
			"description": "Returns the amount of seconds on the timer (time remaining or time elapsed, based on the type of timer used)"
		}, 
		{
			"name": "Objective_IncreaseCounter",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}, 
				{"name": "amount", "type": "Int"}
			],
			"description": "Increases the counter that is associated with this objective in the UI. You can provide an amount to increase by."
		}, 
		{
			"name": "Objective_IsComplete",
			"returnType": "Boolean",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}
			],
			"description": "Returns whether an objective is complete."
		}, 
		{
			"name": "Objective_IsCounterSet",
			"returnType": "Boolean",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}
			],
			"description": "Returns true if a counter has been set for this objective."
		}, 
		{
			"name": "Objective_IsFailed",
			"returnType": "Boolean",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}
			],
			"description": "Returns whether an objective is failed."
		}, 
		{
			"name": "Objective_IsStarted",
			"returnType": "Boolean",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}
			],
			"description": "Returns whether an objective has been started. Completed objectives will return true."
		}, 
		{
			"name": "Objective_IsTimerSet",
			"returnType": "Boolean",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}
			],
			"description": "Returns true if a timer has been set for this objective."
		}, 
		{
			"name": "Objective_IsVisible",
			"returnType": "Boolean",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}
			],
			"description": "Returns whether an objective is visible or not."
		}, 
		{
			"name": "Objective_PauseTimer",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}
			],
			"description": "Pauses the objective's timer. If a timer has not been set, it does nothing."
		}, 
		{
			"name": "Objective_Register",
			"returnType": "ObjectiveID",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}, 
				{"name": "owner", "type": "PlayerID/TeamID"}
			],
			"description": "'Registers' an objective. Wrapper function for Objective_Create with a few other features."
		}, 
		{
			"name": "Objective_RemovePing",
			"returnType": "Void",
			"parameters": [
				{"name": "objectiveTable", "type": "LuaTable"}, 
				{"name": "PingID", "type": "Integer"}
			],
			"description": "Removes a tactical map ping from an objective."
		}, 
		{
			"name": "Objective_RemoveUIElements",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}, 
				{"name": "elementID", "type": "Integer"}
			],
			"description": "Removes a group of UI elements that were added by Objective_AddUIElements."
		}, 
		{
			"name": "Objective_ResumeTimer",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}
			],
			"description": "Resume the objective's timer. If a timer has not been set, it does nothing."
		}, 
		{
			"name": "Objective_SetAlwaysShowDetails",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}, 
				{"name": "title", "type": "Boolean"}, 
				{"name": "hud_arrow", "type": "Boolean"}, 
				{"name": "hintpoints", "type": "Boolean"}
			],
			"description": "Sets whether this objective always shows detailed text, the HUD arrow, or the hintpoints. There can only be one objective at a time that forces the HUD arrow to show up. If you pass in 'nil' for hud_arrow then its behavior is not affected."
		}, 
		{
			"name": "Objective_SetCounter",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}, 
				{"name": "current", "type": "Float"}, 
				{"name": "maximum", "type": "Float"}
			],
			"description": "Sets a counter that is associated with this objective in the UI. You can provide a 'maximum' so that it shows up as \"1 of 5\"."
		}, 
		{
			"name": "Objective_Show",
			"returnType": "Void",
			"parameters": [
				{"name": "objective_table", "type": "LuaTable"}, 
				{"name": "off", "type": "Boolean on/"}
			],
			"description": "Shows or hides an objective from the UI and tactical map."
		}, 
		{
			"name": "Objective_Start",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}, 
				{"name": "bShowTitle", "type": "Boolean"}, 
				{"name": "skipIntel", "type": "Boolean"}
			],
			"description": "Shows an objective to the player and activates it."
		}, 
		{
			"name": "Objective_StartTimer",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}, 
				{"name": "direction", "type": "Integer"}, 
				{"name": "initialTime", "type": "Float"}, 
				{"name": "flashThreshold", "type": "Float"}
			],
			"description": "Starts a timer that is associated with this objective in the UI. Use COUNT_DOWN or COUNT_UP for the 'direction' parameter."
		}, 
		{
			"name": "Objective_StopCounter",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}
			],
			"description": "Stops the objective's counter. If a counter has not been set, it does nothing."
		}, 
		{
			"name": "Objective_StopTimer",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}
			],
			"description": "Stops the objective's timer. If a timer has not been set, it does nothing."
		}, 
		{
			"name": "Objective_TogglePings",
			"returnType": "Void",
			"parameters": [
				{"name": "objective_table", "type": "LuaTable"}, 
				{"name": "off", "type": "Boolean on/"}
			],
			"description": "Toggles minimap blips on or off."
		}, 
		{
			"name": "Objective_UpdateText",
			"returnType": "Void",
			"parameters": [
				{"name": "objTable", "type": "LuaTable"}, 
				{"name": "title", "type": "LocString"}, 
				{"name": "description", "type": "LocString"}, 
				{"name": "bShowTitle", "type": "Boolean"}
			],
			"description": "Updates the title and description for the objective. If you only want to set one of them, pass in nil for the other."
		}, 
		{
			"name": "Order227_Init",
			"returnType": "Void",
			"parameters": [
				{"name": "timeLimit", "type": "Integer"}, 
				{"name": "timeBetweenShots", "type": "Integer"}, 
				{"name": "noMercy", "type": "Boolean"}
			],
			"description": "Enable the HQ Commissar in CoH2 campaign missions. The noMercy flag allows the Commissar to execute more than one member of each squad."
		}, 
		{
			"name": "Player_AddAbility",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer *"}, 
				{"name": "pAbilityPBG", "type": "ScarAbilityPBG"}
			],
			"description": "Add an ability to a player."
		}, 
		{
			"name": "Player_AddAbilityLockoutZone",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "abilityPBG", "type": "ScarAbilityPBG"}, 
				{"name": "marker", "type": "ScarMarker"}
			],
			"description": "Specifies a marker where an ability cannot be used. This only applies to abilities where you use the cursor to pick a location in the world (like a location to paradrop at)."
		}, 
		{
			"name": "Player_AddResource",
			"returnType": "Void",
			"parameters": [
				{"name": "playerId", "type": "PlayerID"}, 
				{"name": "resourceType", "type": "Integer"}, 
				{"name": "value", "type": "Real"}
			],
			"description": "Add resource to player, as opposed to just setting it. Possible resource types are RT_Manpower, RT_Munition, RT_Fuel, RT_Action."
		}, 
		{
			"name": "Player_AddSquadsToSGroup",
			"returnType": "SGroupID",
			"parameters": [
				{"name": "playerId", "type": "PlayerID"}, 
				{"name": "squadgroupName", "type": "String"}
			],
			"description": "For the given player, get all of the squads gathered into a squadgroup of your naming."
		}, 
		{
			"name": "Player_AddUnspentCommandPoints",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "points", "type": "float"}
			],
			"description": "Gives the player new command points to spent on."
		}, 
		{
			"name": "Player_AreSquadsNearMarker",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID"}, 
				{"name": "marker", "type": "MarkerID"}
			],
			"description": "Returns true if ANY of a players squads are in proximity of a marker."
		}, 
		{
			"name": "Player_CanCastAbilityOnEntity",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "abilityPBG", "type": "ScarAbilityPBG"}, 
				{"name": "targetEntity", "type": "Entity *"}
			],
			"description": "Tests if the player can currently use an ability on target entity."
		}, 
		{
			"name": "Player_CanCastAbilityOnPlayer",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "abilityPBG", "type": "ScarAbilityPBG"}, 
				{"name": "targetPlayer", "type": "ModPlayer *"}
			],
			"description": "Tests if the player can currently use an ability on target player."
		}, 
		{
			"name": "Player_CanCastAbilityOnPosition",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "abilityPBG", "type": "ScarAbilityPBG"}, 
				{"name": "targetPosition", "type": "ScarPosition"}
			],
			"description": "Tests if the player can currently use an ability on target position."
		}, 
		{
			"name": "Player_CanCastAbilityOnSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "abilityPBG", "type": "ScarAbilityPBG"}, 
				{"name": "targetSquad", "type": "Squad *"}
			],
			"description": "Tests if the player can currently use an ability on target squad."
		}, 
		{
			"name": "Player_CanConstructOnPosition",
			"returnType": "Boolean",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "sgroupid", "type": "SGroup"}, 
				{"name": "ebp", "type": "Entity"}, 
				{"name": "targetid", "type": "EGroupID/Position/Marker"}, 
				{"name": "Facing", "type": "Position"}
			],
			"description": "Returns TRUE if player can construct the specified entity at specified position and facing. Otherwise, returns FALSE."
		}, 
		{
			"name": "Player_CanPlaceStructureOnPosition",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "ebp", "type": "ScarEntityPBG"}, 
				{"name": "position", "type": "ScarPosition"}, 
				{"name": "facing", "type": "ScarPosition"}
			],
			"description": "Check if a player of specified group can place an entity at the specified position and facing angle."
		}, 
		{
			"name": "Player_CanSeeEGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID"}, 
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if a player can see ALL or ANY items in an egroup."
		}, 
		{
			"name": "Player_CanSeeEntity",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}, 
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns true if a player can see a given entity (revealed in FOW)"
		}, 
		{
			"name": "Player_CanSeePosition",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}, 
				{"name": "pos", "type": "ScarPosition"}
			],
			"description": "Returns true if a player can see a given position."
		}, 
		{
			"name": "Player_CanSeeSGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID"}, 
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if a player can see ALL or ANY items in an sgroup."
		}, 
		{
			"name": "Player_CanSeeSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}, 
				{"name": "squad", "type": "Squad *"}, 
				{"name": "all", "type": "bool"}
			],
			"description": "Returns true if a player can see ALL or ANY units in a given squad (revealed in FOW)"
		}, 
		{
			"name": "Player_ClearArea",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "marker", "type": "MarkerID"}, 
				{"name": "invulnerable", "type": "Bool"}
			],
			"description": "Any of the player's units in the marker area move out of the area, and can be made invulnerable for a bit whilst they do it."
		}, 
		{
			"name": "Player_ClearAvailabilities",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}
			],
			"description": "Clears item, command and construction menu availabilities for the player."
		}, 
		{
			"name": "Player_ClearPopCapOverride",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}
			],
			"description": "Clears the pop cap override so that modifiers can take effect again."
		}, 
		{
			"name": "Player_CompleteUpgrade",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer *"}, 
				{"name": "pUpgradePBG", "type": "ScarUpgradePBG"}
			],
			"description": "Finish upgrade for a player."
		}, 
		{
			"name": "Player_FindFirstEnemyPlayer",
			"returnType": "ModPlayer *",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Searches the player list in the world and returns the id of the first enemy player."
		}, 
		{
			"name": "Player_FromId",
			"returnType": "ModPlayer *",
			"parameters": [
				{"name": "id", "type": "uint32_t"}
			],
			"description": "Returns a player given a player id from the ME."
		}, 
		{
			"name": "Player_GetAIType",
			"returnType": "Player::AIType",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer *"}
			],
			"description": "Returns the type of the given player if it is an AI."
		}, 
		{
			"name": "Player_GetAll",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "egroup", "type": "EGroupID"}
			],
			"description": "Creates/Clears groups that contain all of a player's units and buildings. Defaults - sg_allsquads and eg_allentities."
		}, 
		{
			"name": "Player_GetAllEntitiesNearMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "playerid", "type": "PlayerID"}, 
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "position", "type": "MarkerID/Pos/SectorID"}, 
				{"name": "range", "type": "Real"}
			],
			"description": "Gather together all of a player's entities that are in proximity to a marker, a position, or within a territory sector into an EGroup. The EGroup is cleared beforehand."
		}, 
		{
			"name": "Player_GetAllSquadsNearMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "position", "type": "MarkerID/Pos/SectorID"}, 
				{"name": "range", "type": "Real"}
			],
			"description": "Gather together all of a player's squads that are in proximity to a marker, a position, or within a territory sector into an SGroup. The SGroup is cleared beforehand."
		}, 
		{
			"name": "Player_GetBuildingID",
			"returnType": "EntityID",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "entitytypes", "type": "BlueprintTable"}
			],
			"description": "Returns the entityID of the first player owned building listed in the table."
		}, 
		{
			"name": "Player_GetBuildingsCount",
			"returnType": "Integer",
			"parameters": [
				{"name": "playerId", "type": "PlayerID"}
			],
			"description": "Returns the total number of buildings owned by this player."
		}, 
		{
			"name": "Player_GetBuildingsCountExcept",
			"returnType": "Integer",
			"parameters": [
				{"name": "playerId", "type": "PlayerID"}, 
				{"name": "exceptions", "type": "BlueprintTable"}
			],
			"description": "Returns the total number of buildings owned by this player (with exclusions)."
		}, 
		{
			"name": "Player_GetBuildingsCountOnly",
			"returnType": "Integer",
			"parameters": [
				{"name": "playerId", "type": "PlayerID"}, 
				{"name": "ebplist", "type": "BlueprintTable"}
			],
			"description": "Returns the number of buildings owned by this player (inclusive)."
		}, 
		{
			"name": "Player_GetCurrentPopulation",
			"returnType": "float",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}, 
				{"name": "capType", "type": "CapType"}
			],
			"description": "Use capType CT_Personnel to get current squad cap, CT_Vehicle to get current vehicle cap, CT_Medic to get current medic cap."
		}, 
		{
			"name": "Player_GetDisplayName",
			"returnType": "LocString",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns the players UI name."
		}, 
		{
			"name": "Player_GetEntities",
			"returnType": "EGroup *",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}
			],
			"description": "Returns an EntityGroupObs containing all the players entities."
		}, 
		{
			"name": "Player_GetEntitiesFromType",
			"returnType": "EGroup",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "unitType", "type": "String"}
			],
			"description": "Returns an EGroup containing all of the players entities of a specific unit_type (as defined by the type_ext on the entity)"
		}, 
		{
			"name": "Player_GetEntityConcentration",
			"returnType": "EGroup",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "popcapOnly", "type": "Boolean"}, 
				{"name": "includeBlueprints", "type": "Table"}, 
				{"name": "excludeBlueprints", "type": "Table"}, 
				{"name": "bLeastConcentrated", "type": "Boolean"}, 
				{"name": "onlyInThisMarker", "type": "MarkerID/Table"}
			],
			"description": "Finds the greatest (or least) concentration of entities owned by a player."
		}, 
		{
			"name": "Player_GetEntityCount",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns the number of entities a player currently owns."
		}, 
		{
			"name": "Player_GetEntityName",
			"returnType": "const char *",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}, 
				{"name": "index", "type": "int"}
			],
			"description": "Returns the name of an entity a player currently owns."
		}, 
		{
			"name": "Player_GetFatalityFunctionName",
			"returnType": "const char *",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns the player's post-game fatality function name (as defined in Fatalities.scar)"
		}, 
		{
			"name": "Player_GetID",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns the id of the player."
		}, 
		{
			"name": "Player_GetMaxPopulation",
			"returnType": "float",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}, 
				{"name": "capType", "type": "CapType"}
			],
			"description": "Use capType CT_Personnel to get max squad cap or CT_VehicleCap to get max vehicle cap."
		}, 
		{
			"name": "Player_GetNumStrategicPoints",
			"returnType": "int",
			"parameters": [
				{"name": "p", "type": "const ModPlayer *"}
			],
			"description": "Returns the number of strategic points (not objectives) this player owns."
		}, 
		{
			"name": "Player_GetNumVictoryPoints",
			"returnType": "int",
			"parameters": [
				{"name": "p", "type": "const ModPlayer *"}
			],
			"description": "Returns the number of strategic objectives this player owns."
		}, 
		{
			"name": "Player_GetPopulationPercentage",
			"returnType": "Real",
			"parameters": [
				{"name": "playerid", "type": "PlayerID"}, 
				{"name": "captype", "type": "Integer"}
			],
			"description": "Gets the current personnel or vehicle population as a percetange of the current max-cap. The captype is either CT_Personnel or CT_Vehicle."
		}, 
		{
			"name": "Player_GetRace",
			"returnType": "ScarRacePBG",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns the race for the given player."
		}, 
		{
			"name": "Player_GetRaceName",
			"returnType": "const char *",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns the name of the race for a given player (always in english)"
		}, 
		{
			"name": "Player_GetRelationship",
			"returnType": "ModAlliance::AllianceResult",
			"parameters": [
				{"name": "player1", "type": "const ModPlayer *"}, 
				{"name": "player2", "type": "ModPlayer *"}
			],
			"description": "Returns the relationship between 2 players."
		}, 
		{
			"name": "Player_GetResource",
			"returnType": "float",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}, 
				{"name": "type", "type": "ResourceAmount::ResourceType"}
			],
			"description": "Returns the amount of resources a given player has."
		}, 
		{
			"name": "Player_GetResourceRate",
			"returnType": "float",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}, 
				{"name": "type", "type": "ResourceAmount::ResourceType"}
			],
			"description": "Returns the amount of resources a given player is getting per second."
		}, 
		{
			"name": "Player_GetSquadBPCost",
			"returnType": "ResourceAmount",
			"parameters": [
				{"name": "pPlayer", "type": "const ModPlayer *"}, 
				{"name": "pbg", "type": "const PropertyBagGroup *"}
			],
			"description": "Returns the modified cost of the given unit including all modifications added by the given player."
		}, 
		{
			"name": "Player_GetSquadConcentration",
			"returnType": "SGroup",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "popcapOnly", "type": "Boolean"}, 
				{"name": "includeBlueprints", "type": "Table"}, 
				{"name": "excludeBlueprints", "type": "Table"}, 
				{"name": "bLeastConcentrated", "type": "Boolean"}, 
				{"name": "onlyInThisMarker", "type": "MarkerID/Table"}
			],
			"description": "Finds the greatest (or least) concentration of squads owned by a player."
		}, 
		{
			"name": "Player_GetSquadCount",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns the number of squads a player currently owns."
		}, 
		{
			"name": "Player_GetSquads",
			"returnType": "SGroup *",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns a SquadGroupObs containing all the players units."
		}, 
		{
			"name": "Player_GetStartingPosition",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns the starting position for this player."
		}, 
		{
			"name": "Player_GetStrategicPointCaptureProgress",
			"returnType": "float",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "strategicPoint", "type": "Entity *"}
			],
			"description": "Returns a value (-1.0 to 1.0) of how close a point is to being controlled by the team of the player provided."
		}, 
		{
			"name": "Player_GetTeam",
			"returnType": "int",
			"parameters": [
				{"name": "p", "type": "const ModPlayer *"}
			],
			"description": "Get the team a player is on."
		}, 
		{
			"name": "Player_GetUnitCount",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns the current number of units the player has."
		}, 
		{
			"name": "Player_GetUpgradeCost",
			"returnType": "float",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "upgradePBG", "type": "ScarUpgradePBG"}, 
				{"name": "resourceType", "type": "ResourceAmount::ResourceType"}
			],
			"description": "Returns the cost of an upgrade."
		}, 
		{
			"name": "Player_HasAbility",
			"returnType": "bool",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer *"}, 
				{"name": "pAbilityPBG", "type": "ScarAbilityPBG"}
			],
			"description": "Tests to see if a player has an ability."
		}, 
		{
			"name": "Player_HasBuilding",
			"returnType": "boolean",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "entitytypes", "type": "BlueprintTable"}
			],
			"description": "Returns true if this player owns any buildings listed in the table."
		}, 
		{
			"name": "Player_HasBuildingsExcept",
			"returnType": "boolean",
			"parameters": [
				{"name": "playerId", "type": "PlayerID"}, 
				{"name": "exceptions", "type": "BlueprintTable"}
			],
			"description": "Returns true if this player owns any buildings. (with exclusions)."
		}, 
		{
			"name": "Player_HasBuildingUnderConstruction",
			"returnType": "boolean",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "entitytypes", "type": "BlueprintTable"}
			],
			"description": "Returns true if this player owns any buildings listed in the table currently under construction."
		}, 
		{
			"name": "Player_HasCapturingSquadNearStrategicPoint",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "strategicPoint", "type": "Entity *"}
			],
			"description": "Returns true if the given player has units that are able to capture in the capturable area of the given strategic point."
		}, 
		{
			"name": "Player_HasMapEntryPosition",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}
			],
			"description": "Returns whether a player has a map entry position."
		}, 
		{
			"name": "Player_HasUpgrade",
			"returnType": "bool",
			"parameters": [
				{"name": "pPlayer", "type": "const ModPlayer *"}, 
				{"name": "upgradePBG", "type": "ScarUpgradePBG"}
			],
			"description": "Return true if the squad has purchased the specified upgrade."
		}, 
		{
			"name": "Player_IsAlive",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns true if player is still alive and false if player is dead. Will error if playerIdx is an invalid index."
		}, 
		{
			"name": "Player_IsAllied",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerId1", "type": "PlayerID"}, 
				{"name": "playerId2", "type": "PlayerID"}
			],
			"description": "Returns true if the players are allied and false if they are not."
		}, 
		{
			"name": "Player_IsHuman",
			"returnType": "bool",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer *"}
			],
			"description": "Returns whether a player is human controlled (local or remote), not dead, and not replaced by an AI."
		}, 
		{
			"name": "Player_IsSurrendered",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns true if player has surrendered and false if not. Will error if playerIdx is an invalid index."
		}, 
		{
			"name": "Player_NumUpgradeComplete",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}, 
				{"name": "upgradePBG", "type": "ScarSquadPBG"}
			],
			"description": "Returns the number of upgrades that this player has."
		}, 
		{
			"name": "Player_OwnsEGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID"}, 
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if a given player owns ALL or ANY items in a group."
		}, 
		{
			"name": "Player_OwnsEntity",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID"}, 
				{"name": "entity", "type": "EntityID"}
			],
			"description": "Returns true if a given player owns an entity."
		}, 
		{
			"name": "Player_OwnsSGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID"}, 
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if a given player owns ALL or ANY items in a group."
		}, 
		{
			"name": "Player_OwnsSquad",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID"}, 
				{"name": "squad", "type": "SquadID"}
			],
			"description": "Returns true if a given player owns a squad."
		}, 
		{
			"name": "Player_RemoveAbilityLockoutZone",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "abilityPBG", "type": "ScarAbilityPBG"}, 
				{"name": "marker", "type": "ScarMarker"}
			],
			"description": "Removes a marker that was previously a lockout zone."
		}, 
		{
			"name": "Player_RemoveUpgrade",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "upgrade", "type": "ScarUpgradePBG"}
			],
			"description": "Removes an upgrade from a player."
		}, 
		{
			"name": "Player_ResetResource",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "type", "type": "ResourceAmount::ResourceType"}
			],
			"description": "Reset the resource amount for a given player to zero. Also reset team weapon."
		}, 
		{
			"name": "Player_RestrictAddOnList",
			"returnType": "Void",
			"parameters": [
				{"name": "playerid", "type": "PlayerID"}, 
				{"name": "addonlist", "type": "Table"}
			],
			"description": "Restrict a list of addons."
		}, 
		{
			"name": "Player_RestrictBuildingList",
			"returnType": "Void",
			"parameters": [
				{"name": "playerid", "type": "PlayerID"}, 
				{"name": "blueprintlist", "type": "Table"}
			],
			"description": "Restrict a list of buildings."
		}, 
		{
			"name": "Player_RestrictResearchList",
			"returnType": "Void",
			"parameters": [
				{"name": "playerid", "type": "PlayerID"}, 
				{"name": "list", "type": "StringTable"}
			],
			"description": "Restrict a list of research items."
		}, 
		{
			"name": "Player_SetAbilityAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "bp", "type": "AbilityBlueprint/Table"}, 
				{"name": "availability", "type": "Integer"}
			],
			"description": "Sets the availability of an ability. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT."
		}, 
		{
			"name": "Player_SetAllCommandAvailabilityInternal",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "availability", "type": "ModPlayer::Availability"}, 
				{"name": "reason", "type": "LocString"}
			],
			"description": "Sets availability of ALL entity, squad and player commands."
		}, 
		{
			"name": "Player_SetCommandAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "command", "type": "Integer/Table"}, 
				{"name": "availability", "type": "Integer"}
			],
			"description": "Sets the availability of entity, squad and player commands. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT."
		}, 
		{
			"name": "Player_SetConstructionMenuAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "menuname", "type": "String/Table"}, 
				{"name": "availability", "type": "Integer"}
			],
			"description": "Sets the availability of a construction menu. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT."
		}, 
		{
			"name": "Player_SetDefaultSquadMoodMode",
			"returnType": "void",
			"parameters": [
				{"name": "pPlayer", "type": "ModPlayer *"}, 
				{"name": "mood", "type": "SquadCombatBehaviourExt::MoodMode"}
			],
			"description": "Set default squad mood mode which can be overrided by squad level mood mode settings."
		}, 
		{
			"name": "Player_SetEntityProductionAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "bp", "type": "EntityBlueprint/Table"}, 
				{"name": "availability", "type": "Integer"}
			],
			"description": "Sets the availability of an entity production item. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT."
		}, 
		{
			"name": "Player_SetHeatGainRate",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "gainRatePerSecond", "type": "float"}
			],
			"description": "Set the heat gain rate per second for this player. Heat is gained when near a heat source or garrisoned."
		}, 
		{
			"name": "Player_SetHeatLossRate",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "lossRatePerSecond", "type": "float"}
			],
			"description": "Set the heat loss rate per second for this player. Heat is lost when not garrisoned and not near a heat source and not in valid cover. A value of 0 turns off the Cold System for all squads belonging to this player. It will also reset all squads to the default heat level."
		}, 
		{
			"name": "Player_SetMaxCapPopulation",
			"returnType": "Void",
			"parameters": [
				{"name": "playerid", "type": "PlayerID"}, 
				{"name": "captype", "type": "Integer"}, 
				{"name": "newcap", "type": "Integer"}
			],
			"description": "Sets the current personnel or vehicle max-cap for a player. The captype is either CT_Personnel or CT_Vehicle (you can't adjust Medic caps just yet)."
		}, 
		{
			"name": "Player_SetMaxPopulation",
			"returnType": "Void",
			"parameters": [
				{"name": "playerid", "type": "PlayerID"}, 
				{"name": "captype", "type": "Integer"}, 
				{"name": "newcap", "type": "Integer"}
			],
			"description": "Sets the current personnel or vehicle cap for a player. The captype is either CT_Personnel or CT_Vehicle (you can't adjust Medic caps just yet)."
		}, 
		{
			"name": "Player_SetPopCapOverride",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "personnel", "type": "float"}
			],
			"description": "Sets a pop cap override that ignores any modifiers."
		}, 
		{
			"name": "Player_SetResource",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "type", "type": "ResourceAmount::ResourceType"}, 
				{"name": "amt", "type": "float"}
			],
			"description": "Set the resource amount for a given player. Ignores income cap and resource sharing."
		}, 
		{
			"name": "Player_SetSquadProductionAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "bp", "type": "SquadBlueprint/Table"}, 
				{"name": "availability", "type": "Integer"}
			],
			"description": "Sets the availability of a squad production item. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT."
		}, 
		{
			"name": "Player_SetUpgradeAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "bp", "type": "UpgradeBlueprint/Table"}, 
				{"name": "availability", "type": "Integer"}
			],
			"description": "Sets the availability of an upgrade. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT."
		}, 
		{
			"name": "Player_SetUpgradeCost",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "upgrade", "type": "UpgradeID"}, 
				{"name": "manpower", "type": "Real"}, 
				{"name": "fuel", "type": "Real"}, 
				{"name": "munition", "type": "Real"}, 
				{"name": "action", "type": "Real"}, 
				{"name": "command", "type": "Real"}
			],
			"description": "Sets the cost of an upgrade."
		}, 
		{
			"name": "Player_SpawnGlider",
			"returnType": "Entity *",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "glider", "type": "ScarEntityPBG"}, 
				{"name": "start", "type": "ScarPosition"}, 
				{"name": "end", "type": "ScarPosition"}
			],
			"description": "Spawns a glider and returns it."
		}, 
		{
			"name": "Player_StopAbility",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "ability", "type": "ScarAbilityPBG"}, 
				{"name": "bEarlyExit", "type": "bool"}
			],
			"description": "Abruptly stops an active ability."
		}, 
		{
			"name": "Player_StopEarningActionPoints",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID"}
			],
			"description": "Prevents a player from earning any action points (and by extention, command points)"
		}, 
		{
			"name": "Player_Triangulate",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "squads", "type": "SGroup *"}, 
				{"name": "eg", "type": "EGroup *"}
			],
			"description": "Returns the enemy squads and entities within a player's radio beacons. Radio beacons are shared among team members."
		}, 
		{
			"name": "Prox_AreEntitiesNearMarker",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "position", "type": "MarkerID/Position/SectorID"}, 
				{"name": "all", "type": "Boolean"}, 
				{"name": "range", "type": "Real"}
			],
			"description": "Returns true if ANY or ALL entities from a group are in range of a given position, marker, or territory sector."
		}, 
		{
			"name": "Prox_ArePlayerMembersNearMarker",
			"returnType": "Boolean",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "position", "type": "MarkerID/Position/SectorID"}, 
				{"name": "all", "type": "Boolean"}, 
				{"name": "range", "type": "Real"}, 
				{"name": "filterlist", "type": "SBP/Table"}, 
				{"name": "filtertype", "type": "Integer"}
			],
			"description": "Returns true if ANY or ALL of a player's members (i.e. individual guys, not squads as a whole) are in range of a given position, marker, or territory sector. DO NOT USE THIS FUNCTION UNLESS YOU ABSOLUTELY HAVE TO!!"
		}, 
		{
			"name": "Prox_ArePlayersNearMarker",
			"returnType": "Boolean",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "position", "type": "MarkerID/Position/SectorID"}, 
				{"name": "all", "type": "Boolean"}, 
				{"name": "range", "type": "Real"}, 
				{"name": "filterlist", "type": "SBP/Table"}, 
				{"name": "filtertype", "type": "Integer"}
			],
			"description": "Returns true if ANY or ALL of a player's squads are in range of a given position, marker, or territory sector. THIS FUNCTION IS VERY SLOW. DO NOT USE THIS UNLESS ABSOLUTELY NECESSARY."
		}, 
		{
			"name": "Prox_AreSquadMembersNearMarker",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "position", "type": "MarkerID/Position/SectorID"}, 
				{"name": "all", "type": "Boolean"}, 
				{"name": "range", "type": "Real"}
			],
			"description": "Returns true if ANY or ALL squad members (i.e. individual guys, not squads as a whole) from a group are in range of a given position, marker, or territory sector. DO NOT USE THIS FUNCTION UNLESS YOU ABSOLUTELY HAVE TO!!"
		}, 
		{
			"name": "Prox_AreSquadsNearMarker",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "position", "type": "MarkerID/Position/SectorID"}, 
				{"name": "all", "type": "Boolean"}, 
				{"name": "range", "type": "Real"}
			],
			"description": "Returns true if ANY or ALL squads from a group are in range of a given position, marker, or territory sector."
		}, 
		{
			"name": "Prox_AreTeamsNearMarker",
			"returnType": "Boolean",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "position", "type": "MarkerID/Position/SectorID"}, 
				{"name": "all", "type": "Boolean"}, 
				{"name": "range", "type": "Real"}, 
				{"name": "filterlist", "type": "SBP/Table"}, 
				{"name": "filtertype", "type": "Integer"}
			],
			"description": "Returns true if ANY or ALL of a teams's squads are in range of a given position, marker, or territory sector. THIS FUNCTION IS VERY SLOW. DO NOT USE THIS UNLESS ABSOLUTELY NECESSARY."
		}, 
		{
			"name": "Prox_EGroupEGroup",
			"returnType": "Real",
			"parameters": [
				{"name": "egroup1", "type": "EGroupID"}, 
				{"name": "egroup2", "type": "EGroupID"}, 
				{"name": "checktype", "type": "ProxType"}
			],
			"description": "Returns the distance between two entity groups. use checktype PROX_SHORTEST, PROX_LONGEST, or PROX_CENTER."
		}, 
		{
			"name": "Prox_EGroupSGroup",
			"returnType": "Real",
			"parameters": [
				{"name": "egroup1", "type": "EGroupID"}, 
				{"name": "sgroup2", "type": "SGroupID"}, 
				{"name": "checktype", "type": "ProxType"}
			],
			"description": "Returns the distance between an entity group and a squad group. use checktype PROX_SHORTEST, PROX_LONGEST, or PROX_CENTER."
		}, 
		{
			"name": "Prox_EntitiesInProximityOfEntities",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup1", "type": "EGroupID"}, 
				{"name": "egroup2", "type": "EGroupID"}, 
				{"name": "proximity", "type": "Real"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Checks if ALL or ANY entities are in proximity of a given entity group."
		}, 
		{
			"name": "Prox_GetRandomPosition",
			"returnType": "Position",
			"parameters": [
				{"name": "item", "type": "Object"}, 
				{"name": "radius", "type": "Integer"}, 
				{"name": "minimum", "type": "Integer"}
			],
			"description": "Takes something (Entity, Squad, SGroup, EGroup, Position) in, then returns a random position."
		}, 
		{
			"name": "Prox_MarkerEGroup",
			"returnType": "Real",
			"parameters": [
				{"name": "marker", "type": "MarkerID"}, 
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "checktype", "type": "ProxType"}
			],
			"description": "Returns the distance between a marker and an entity group. use checktype PROX_SHORTEST, PROX_LONGEST, or PROX_CENTER."
		}, 
		{
			"name": "Prox_MarkerSGroup",
			"returnType": "Real",
			"parameters": [
				{"name": "marker", "type": "MarkerID"}, 
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "checktype", "type": "ProxType"}
			],
			"description": "Returns the distance between a marker and a squad group. use checktype PROX_SHORTEST, PROX_LONGEST, or PROX_CENTER."
		}, 
		{
			"name": "Prox_PlayerEntitiesInProximityOfEntities",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID"}, 
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "proximity", "type": "Real"}, 
				{"name": "all", "type": "Boolean"}, 
				{"name": "exclude", "type": "EntityID"}
			],
			"description": "Checks if ALL or ANY players squads are in proximity of a given entity group."
		}, 
		{
			"name": "Prox_PlayerEntitiesInProximityOfPlayerSquads",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerentities", "type": "PlayerID"}, 
				{"name": "playersquads", "type": "PlayerID"}, 
				{"name": "proximity", "type": "Real"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Checks if ALL or ANY players entities are in proximity of a given squad group."
		}, 
		{
			"name": "Prox_PlayerEntitiesInProximityOfSquads",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID"}, 
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "proximity", "type": "Real"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Checks if ALL or ANY players entities are in proximity of a given squad group."
		}, 
		{
			"name": "Prox_PlayerSquadsInProximityOfEntities",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID"}, 
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "proximity", "type": "Real"}, 
				{"name": "all", "type": "Boolean"}, 
				{"name": "filterlist", "type": "SBP/Table"}, 
				{"name": "filtertype", "type": "Int"}
			],
			"description": "Checks if ALL or ANY players squads are in proximity of a given entity group."
		}, 
		{
			"name": "Prox_PlayerSquadsInProximityOfPlayerEntities",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playersquads", "type": "PlayerID"}, 
				{"name": "playerentities", "type": "PlayerID"}, 
				{"name": "proximity", "type": "Real"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Checks if ALL or ANY players squads are in proximity of a given players entities."
		}, 
		{
			"name": "Prox_PlayerSquadsInProximityOfPlayerSquads",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid1", "type": "PlayerID"}, 
				{"name": "playerid2", "type": "PlayerID"}, 
				{"name": "proximity", "type": "Real"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Checks if ALL or ANY players squads are in proximity of a given players squads."
		}, 
		{
			"name": "Prox_PlayerSquadsInProximityOfSquads",
			"returnType": "Boolean",
			"parameters": [
				{"name": "playerid", "type": "PlayerID"}, 
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "proximity", "type": "Real"}, 
				{"name": "all", "type": "Boolean"}, 
				{"name": "exclude", "type": "SquadID"}, 
				{"name": "filterlist", "type": "SBP/Table"}, 
				{"name": "filtertype", "type": "Int"}
			],
			"description": "Checks if ALL or ANY players squads are in proximity of a given squad group."
		}, 
		{
			"name": "Prox_SGroupSGroup",
			"returnType": "Real",
			"parameters": [
				{"name": "sgroup1", "type": "SGroupID"}, 
				{"name": "sgroup2", "type": "SGroupID"}, 
				{"name": "checktype", "type": "ProxType"}
			],
			"description": "Returns the distance between two squad groups. use checktype PROX_SHORTEST, PROX_LONGEST, or PROX_CENTER."
		}, 
		{
			"name": "Prox_SquadsInProximityOfEntities",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "proximity", "type": "Real"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Checks if ALL or ANY squads are in proximity of a given entity group."
		}, 
		{
			"name": "Prox_SquadsInProximityOfSquads",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup1", "type": "SGroupID"}, 
				{"name": "sgroup2", "type": "SGroupID"}, 
				{"name": "proximity", "type": "Real"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Checks if ALL or ANY squads are in proximity of a given squad group."
		}, 
		{
			"name": "Resources_Disable",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "any"}
			],
			"description": "Disables any resource income - useful to stop resources accruing during the opening movie."
		}, 
		{
			"name": "Resources_Enable",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "any"}
			],
			"description": "Re-enables resource income."
		}, 
		{
			"name": "Rule_Add",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}, 
				{"name": "priority", "type": "Integer"}
			],
			"description": "Add a rule to be executed every frame. Priority can be from 0 to 1000, with 0 being the lowest. Priority is used in conjunction with Rule_RemoveAll so that rules with high priority do not get removed."
		}, 
		{
			"name": "Rule_AddDelayedInterval",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}, 
				{"name": "delay", "type": "Real"}, 
				{"name": "interval", "type": "Real"}, 
				{"name": "priority", "type": "Integer"}
			],
			"description": "Add a rule to be executed at every 'interval' seconds, after an initial delay. Priority can be from 0 to 1000, with 0 being the lowest. Priority is used in conjunction with Rule_RemoveAll so that rules with high priority do not get removed."
		}, 
		{
			"name": "Rule_AddDelayedIntervalEx",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}, 
				{"name": "delay", "type": "Real"}, 
				{"name": "interval", "type": "Real"}, 
				{"name": "calls", "type": "Integer"}, 
				{"name": "priority", "type": "Integer"}, 
				{"name": "calls", "type": "Integer"}
			],
			"description": "Add a rule to be executed 'calls' times, at every 'interval' seconds, after an initial delay. Priority can be from 0 to 1000, with 0 being the lowest. Priority is used in conjunction with Rule_RemoveAll so that rules with high priority do not get removed."
		}, 
		{
			"name": "Rule_AddEGroupEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "fule", "type": "LuaFunction"}, 
				{"name": "egroup", "type": "EGroup"}, 
				{"name": "eventtype", "type": "Integer"}
			],
			"description": "Add a rule to be executed when the event of 'eventType' has happened on the 'EGroup' Event types are: GE_EntityKilled."
		}, 
		{
			"name": "Rule_AddEGroupEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}, 
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "eventtype", "type": "Integer"}
			],
			"description": "Add a rule to be executed when the event of 'eventType' has happened on entities in the 'egroup'."
		}, 
		{
			"name": "Rule_AddEntityEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}, 
				{"name": "entity", "type": "EntityID"}, 
				{"name": "eventtype", "type": "Integer"}
			],
			"description": "Add a rule to be executed when the event of 'eventType' has happened on the 'entity'."
		}, 
		{
			"name": "Rule_AddGlobalEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}, 
				{"name": "eventtype", "type": "Integer"}
			],
			"description": "Add a rule to be executed when the event of 'eventType' has happened, regardless of source."
		}, 
		{
			"name": "Rule_AddInterval",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}, 
				{"name": "interval", "type": "Real"}, 
				{"name": "priority", "type": "Integer"}
			],
			"description": "Add a rule to be executed at every 'interval' seconds. Priority can be from 0 to 1000, with 0 being the lowest. Priority is used in conjunction with Rule_RemoveAll so that rules with high priority do not get removed."
		}, 
		{
			"name": "Rule_AddIntervalEx",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}, 
				{"name": "interval", "type": "Real"}, 
				{"name": "calls", "type": "Integer"}, 
				{"name": "priority", "type": "Integer"}
			],
			"description": "Add a rule to be executed 'calls' times, at every 'interval' seconds. Priority can be from 0 to 1000, with 0 being the lowest. Priority is used in conjunction with Rule_RemoveAll so that rules with high priority do not get removed."
		}, 
		{
			"name": "Rule_AddOneShot",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}, 
				{"name": "delay", "type": "Real"}, 
				{"name": "priority", "type": "Integer"}
			],
			"description": "Add a rule to be executed once, after 'delay' seconds. Priority can be from 0 to 1000, with 0 being the lowest. Priority is used in conjunction with Rule_RemoveAll so that rules with high priority do not get removed."
		}, 
		{
			"name": "Rule_AddPlayerEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}, 
				{"name": "player", "type": "PlayerID"}, 
				{"name": "eventtype", "type": "Integer"}
			],
			"description": "Add a rule to be executed when the event of 'eventType' has happened on the 'player'."
		}, 
		{
			"name": "Rule_AddSGroupEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}, 
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "eventtype", "type": "Integer"}
			],
			"description": "Add a rule to be executed when the event of 'eventType' has happened on squads in the 'sgroup'."
		}, 
		{
			"name": "Rule_AddSquadEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}, 
				{"name": "squad", "type": "SquadID"}, 
				{"name": "eventtype", "type": "Integer"}
			],
			"description": "Add a rule to be executed when the event of 'eventType' has happened on the 'squad'."
		}, 
		{
			"name": "Rule_ChangeInterval",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}, 
				{"name": "interval", "type": "Real"}
			],
			"description": "Change 'interval' seconds of an existing rule."
		}, 
		{
			"name": "Rule_Exists",
			"returnType": "Boolean",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}
			],
			"description": "Test if a rule is currently active."
		}, 
		{
			"name": "Rule_Remove",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}
			],
			"description": "Remove a currently active rule (this does not remove any event rules)"
		}, 
		{
			"name": "Rule_RemoveAll",
			"returnType": "Void",
			"parameters": [
				{"name": "max_priority", "type": "Integer"}
			],
			"description": "Kills all rules below a certain priority. The default is to remove ALL rules."
		}, 
		{
			"name": "Rule_RemoveEGroupEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}, 
				{"name": "egroup", "type": "EGroupID"}
			],
			"description": "Remove an active event rule for entities in the 'egroup'."
		}, 
		{
			"name": "Rule_RemoveEntityEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}, 
				{"name": "entity", "type": "EntityID"}
			],
			"description": "Remove an active event rule for the 'entity'."
		}, 
		{
			"name": "Rule_RemoveGlobalEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}
			],
			"description": "Remove an active event rule that's been applied 'globally'."
		}, 
		{
			"name": "Rule_RemoveIfExist",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}
			],
			"description": "Remove a currently active rule if it exists(this does not remove any event rules)"
		}, 
		{
			"name": "Rule_RemoveMe",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "any"}
			],
			"description": "Remove a currently executing rule (only works inside a rule function)"
		}, 
		{
			"name": "Rule_RemovePlayerEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}, 
				{"name": "player", "type": "PlayerID"}
			],
			"description": "Remove an active event rule for the 'player'."
		}, 
		{
			"name": "Rule_RemoveSGroupEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}, 
				{"name": "sgroup", "type": "SGroupID"}
			],
			"description": "Remove an active event rule for squads in the 'sgroup'."
		}, 
		{
			"name": "Rule_RemoveSquadEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "rule", "type": "LuaFunction"}, 
				{"name": "squad", "type": "SquadID"}
			],
			"description": "Remove an active event rule for the 'squad'."
		}, 
		{
			"name": "SBP_Exists",
			"returnType": "bool",
			"parameters": [
				{"name": "pbgShortname", "type": "const char *"}
			],
			"description": "Returns true if a squad blueprint exists with the given name."
		}, 
		{
			"name": "Scar_AddInit",
			"returnType": "void",
			"parameters": [
				{"name": "f", "type": "LuaConfig::RefFunction"}
			],
			"description": "Register an init function with the scar system."
		}, 
		{
			"name": "Scar_InitExists",
			"returnType": "bool",
			"parameters": [
				{"name": "f", "type": "LuaConfig::RefFunction"}
			],
			"description": "Returns true if an init function exists."
		}, 
		{
			"name": "Scar_RemoveInit",
			"returnType": "void",
			"parameters": [
				{"name": "f", "type": "LuaConfig::RefFunction"}
			],
			"description": "Unregister an init function that was registered from Scar_AddInit."
		}, 
		{
			"name": "Setup_Player",
			"returnType": "PlayerID",
			"parameters": [
				{"name": "playerIndex", "type": "Integer"}, 
				{"name": "playerName", "type": "LocString"}, 
				{"name": "playerRace", "type": "String"}, 
				{"name": "team", "type": "Integer"}
			],
			"description": "Initializes the all of the players settings in one function and returns the playerID."
		}, 
		{
			"name": "SGroup_Add",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "SGroup *"}, 
				{"name": "squadron", "type": "Squad *"}
			],
			"description": "Adds an squadron to the end of a group if the group doesnt already have it."
		}, 
		{
			"name": "SGroup_AddAbility",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "ability", "type": "AbilityBlueprint"}
			],
			"description": "Adds an ability to all squads in an sgroup."
		}, 
		{
			"name": "SGroup_AddGroup",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "SGroup *"}, 
				{"name": "grouptoadd", "type": "SGroup *"}
			],
			"description": "Same as EGroup_AddGroup. Note: You cannot mix squad groups and entity groups."
		}, 
		{
			"name": "SGroup_AddGroups",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "groupList", "type": "Table"}
			],
			"description": "Add a list of multiple sgroups into an existing group."
		}, 
		{
			"name": "SGroup_AddLeaders",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}
			],
			"description": "Adds a leader to all squads in a group that can take a leader."
		}, 
		{
			"name": "SGroup_AddSlotItemToDropOnDeath",
			"returnType": "Void",
			"parameters": [
				{"name": "groupid", "type": "SGroupID"}, 
				{"name": "itemid", "type": "Int"}, 
				{"name": "drop_chance", "type": "Float"}, 
				{"name": "exclusive", "type": "Bool"}
			],
			"description": "Add to the list of slot items to drop when any one of the squads is wiped out."
		}, 
		{
			"name": "SGroup_CanCastAbilityOnEntity",
			"returnType": "Void",
			"parameters": [
				{"name": "caster", "type": "SGroupID"}, 
				{"name": "ability", "type": "AbilityBlueprint"}, 
				{"name": "target_entity", "type": "EntityID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Test whether ANY or ALL of a group can be ordered to do this ability on the target squad."
		}, 
		{
			"name": "SGroup_CanCastAbilityOnPosition",
			"returnType": "Void",
			"parameters": [
				{"name": "caster", "type": "SGroupID"}, 
				{"name": "ability", "type": "AbilityBlueprint"}, 
				{"name": "position", "type": "Position"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Test whether ANY or ALL of a group can be ordered to do this ability on the target position."
		}, 
		{
			"name": "SGroup_CanCastAbilityOnSquad",
			"returnType": "Void",
			"parameters": [
				{"name": "caster", "type": "SGroupID"}, 
				{"name": "ability", "type": "AbilityBlueprint"}, 
				{"name": "target_squad", "type": "SquadID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Test whether ANY or ALL of a group can be ordered to do this ability on the target entity."
		}, 
		{
			"name": "SGroup_CanInstantReinforceNow",
			"returnType": "Boolean",
			"parameters": [
				{"name": "group", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Return true if ANY or ALL of a group can reinforce now."
		}, 
		{
			"name": "SGroup_CanSeeSGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "targetsgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ALL or ANY squads in a group can see ALL or ANY squads in a target sgroup."
		}, 
		{
			"name": "SGroup_Clear",
			"returnType": "void",
			"parameters": [
				{"name": "sgroup", "type": "SGroup *"}
			],
			"description": "Removes all entities from a group."
		}, 
		{
			"name": "SGroup_ClearPostureSuggestion",
			"returnType": "void",
			"parameters": [
				{"name": "sgroup", "type": "SGroup *"}
			],
			"description": "Clears any previous posture suggestions made to a squad."
		}, 
		{
			"name": "SGroup_Compare",
			"returnType": "bool",
			"parameters": [
				{"name": "group1", "type": "SGroup *"}, 
				{"name": "group2", "type": "SGroup *"}
			],
			"description": "Returns true if the contents of the two groups are equal. Order of the entities does not matter."
		}, 
		{
			"name": "SGroup_CompleteEntityUpgrade",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "upgrade", "type": "UpgradeID"}
			],
			"description": "Applies an upgrade to all squad entities in an sgroup."
		}, 
		{
			"name": "SGroup_ContainsBlueprints",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "blueprints", "type": "BP/Table"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Check if a group contains ALL or ANY of the blueprints."
		}, 
		{
			"name": "SGroup_ContainsSGroup",
			"returnType": "bool",
			"parameters": [
				{"name": "group1", "type": "SGroup *"}, 
				{"name": "group2", "type": "SGroup *"}, 
				{"name": "all", "type": "bool"}
			],
			"description": "Returns true if SGroup1 contains ANY or ALL of SGroup2."
		}, 
		{
			"name": "SGroup_ContainsSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "group", "type": "SGroup *"}, 
				{"name": "SquadID", "type": "uint32_t"}
			],
			"description": "Returns true if SGroup contains a particular SquadID."
		}, 
		{
			"name": "SGroup_Count",
			"returnType": "int",
			"parameters": [
				{"name": "sgroup", "type": "SGroup *"}
			],
			"description": "Returns the total number of spawned and despawned squads in a group."
		}, 
		{
			"name": "SGroup_CountDeSpawned",
			"returnType": "int",
			"parameters": [
				{"name": "sgroup", "type": "SGroup *"}
			],
			"description": "Returns the number of despawned squads in a group."
		}, 
		{
			"name": "SGroup_CountSpawned",
			"returnType": "int",
			"parameters": [
				{"name": "sgroup", "type": "SGroup *"}
			],
			"description": "Returns the number of spawned squads in a group."
		}, 
		{
			"name": "SGroup_Create",
			"returnType": "SGroup *",
			"parameters": [
				{"name": "name", "type": "const char *"}
			],
			"description": "Returns a new squadron group with the given name."
		}, 
		{
			"name": "SGroup_CreateIfNotFound",
			"returnType": "SGroupID",
			"parameters": [
				{"name": "name", "type": "String"}
			],
			"description": "Find a squad group from name. Creates a new one with given name if it doesnt exist."
		}, 
		{
			"name": "SGroup_CreateKickerMessage",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID"}, 
				{"name": "player", "type": "PlayerID"}, 
				{"name": "textid", "type": "LocString"}
			],
			"description": "Create and display kicker message on the each squad in the sgroup to the player."
		}, 
		{
			"name": "SGroup_CreateTable",
			"returnType": "LuaTable",
			"parameters": [
				{"name": "format", "type": "String"}, 
				{"name": "size", "type": "Integer"}
			],
			"description": "Returns a table of sgroups NOT in the world builder."
		}, 
		{
			"name": "SGroup_DeSpawn",
			"returnType": "Void",
			"parameters": [
				{"name": "groupid", "type": "SGroupID"}
			],
			"description": "Despawn all spawned squads in a group."
		}, 
		{
			"name": "SGroup_Destroy",
			"returnType": "void",
			"parameters": [
				{"name": "egroup", "type": "SGroup *"}
			],
			"description": "Manually destroy a group that you dont need anymore."
		}, 
		{
			"name": "SGroup_DestroyAllInMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "marker", "type": "MarkerID"}
			],
			"description": "Destroys all items in a group that are in proximity to a given marker."
		}, 
		{
			"name": "SGroup_DestroyAllSquads",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}
			],
			"description": "Destroys all spawned and despawned squads in a group."
		}, 
		{
			"name": "SGroup_DisableCombatPlans",
			"returnType": "Void",
			"parameters": [
				{"name": "groupID", "type": "SGroupID"}
			],
			"description": "Disables all current combat plans for the squads in the sgroup."
		}, 
		{
			"name": "SGroup_Duplicate",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup1", "type": "SGroupID"}, 
				{"name": "sgroup2", "type": "SGroupID"}
			],
			"description": "Duplicates an SGroup."
		}, 
		{
			"name": "SGroup_EnableAttention",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "attentive", "type": "Boolean"}
			],
			"description": "Sets whether an entity pays attention to its surroundings."
		}, 
		{
			"name": "SGroup_EnableMinimapIndicator",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID"}, 
				{"name": "enable", "type": "Boolean"}
			],
			"description": "Enable or disable minimap indicator on all squads in the sgroup."
		}, 
		{
			"name": "SGroup_EnableSurprise",
			"returnType": "Void",
			"parameters": [
				{"name": "groupid", "type": "SGroupID"}, 
				{"name": "enable", "type": "Boolean"}
			],
			"description": "Enables or disables the surprise feature for an sgroup."
		}, 
		{
			"name": "SGroup_EnableUIDecorator",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID"}, 
				{"name": "enable", "type": "Boolean"}
			],
			"description": "Enable or disable decorators on all squads in the sgroup."
		}, 
		{
			"name": "SGroup_Exists",
			"returnType": "bool",
			"parameters": [
				{"name": "name", "type": "const char *"}
			],
			"description": "Returns true if the squad group with the given name exists."
		}, 
		{
			"name": "SGroup_FaceEachOther",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup1", "type": "SGroupID"}, 
				{"name": "sgroup2", "type": "SGroupID"}
			],
			"description": "Makes two SGroups face each other."
		}, 
		{
			"name": "SGroup_FaceMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "marker", "type": "MarkerID"}
			],
			"description": "Makes a SGroup face a marker."
		}, 
		{
			"name": "SGroup_FacePosition",
			"returnType": "void",
			"parameters": [
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "pos", "type": "ScarPosition"}
			],
			"description": "Works like Squad_FacePosition. All Squads will face the same direction, with the squad the closest to the center determining the direction."
		}, 
		{
			"name": "SGroup_Filter",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "blueprint", "type": "ID/Table"}, 
				{"name": "filtertype", "type": "Integer"}, 
				{"name": "splitSGroup", "type": "SGroupID"}
			],
			"description": "Filters an SGroup by blueprint."
		}, 
		{
			"name": "SGroup_FilterCount",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup1", "type": "SGroupID"}, 
				{"name": "groupSize", "type": "Int"}
			],
			"description": "Pass in a group and it will filter it down to the indicated number."
		}, 
		{
			"name": "SGroup_FilterThreat",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "tableSBPs", "type": "LuaTable"}, 
				{"name": "bEmpty", "type": "Boolean"}
			],
			"description": "Searches an SGroup and finds the first threat within the table (searching first to last) and removes all other SBPs."
		}, 
		{
			"name": "SGroup_ForEach",
			"returnType": "bool",
			"parameters": [
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "f", "type": "LuaBinding::StackVarFunction"}
			],
			"description": "Call a lua function for each item in a group. Function will recieve (groupid, itemindex, itemid) and should return true to break or false to continue."
		}, 
		{
			"name": "SGroup_ForEachAllOrAny",
			"returnType": "bool",
			"parameters": [
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "all", "type": "bool"}, 
				{"name": "f", "type": "LuaBinding::StackVarFunction"}
			],
			"description": "Call a lua function for each item in a group. Function will receive (groupid, itemindex, itemid) and should return a bool."
		}, 
		{
			"name": "SGroup_ForEachAllOrAnyEx",
			"returnType": "bool",
			"parameters": [
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "all", "type": "bool"}, 
				{"name": "f", "type": "LuaBinding::StackVarFunction"}, 
				{"name": "spawned", "type": "bool"}, 
				{"name": "despawned", "type": "bool"}
			],
			"description": "Same as SGroup_ForEachAllOrAny except you have a choice to iterate over spawned squads, despawned squads, or both."
		}, 
		{
			"name": "SGroup_ForEachEx",
			"returnType": "bool",
			"parameters": [
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "f", "type": "LuaBinding::StackVarFunction"}, 
				{"name": "spawned", "type": "bool"}, 
				{"name": "despawned", "type": "bool"}
			],
			"description": "Same as SGroup_ForEach except you have a choice to iterate over spawned squads, despawned squads, or both."
		}, 
		{
			"name": "SGroup_FromName",
			"returnType": "SGroup *",
			"parameters": [
				{"name": "name", "type": "const char *"}
			],
			"description": "Find an squadron group with a given name."
		}, 
		{
			"name": "SGroup_GetAvgHealth",
			"returnType": "Real",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}
			],
			"description": "Returns the average health of all units in a squad group."
		}, 
		{
			"name": "SGroup_GetAvgLoadout",
			"returnType": "Real",
			"parameters": [
				{"name": "sgroup", "type": "SGroup"}
			],
			"description": "Returns the average loadout of all squads in a group as a percent [0.0, 1.0]."
		}, 
		{
			"name": "SGroup_GetDeSpawnedSquadAt",
			"returnType": "Squad *",
			"parameters": [
				{"name": "group", "type": "SGroup *"}, 
				{"name": "index", "type": "unsigned int"}
			],
			"description": "Returns the despawned squad at a certain position in the group."
		}, 
		{
			"name": "SGroup_GetGarrisonedBuildingEntity",
			"returnType": "EntityID",
			"parameters": [
				{"name": "groupid", "type": "SGroupID"}
			],
			"description": "Get the entity id of the building that any squad of the sgroup is garrisoned in."
		}, 
		{
			"name": "SGroup_GetHoldEGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "EGroupHold", "type": "EGroup"}
			],
			"description": "Gets all the entities that an SGroup may occupy and adds them to the EGroupHold."
		}, 
		{
			"name": "SGroup_GetHoldSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "SGroupHold", "type": "SGroup"}
			],
			"description": "Gets all the squads that an SGroup may occupy and adds them to the SGroupHold."
		}, 
		{
			"name": "SGroup_GetInvulnerable",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Check invulnerablity state for ALL or ANY squads in a squad group."
		}, 
		{
			"name": "SGroup_GetLastAttacker",
			"returnType": "Void",
			"parameters": [
				{"name": "SGroupVictim", "type": "SGroup"}, 
				{"name": "SGroupAttacker", "type": "SGroup"}, 
				{"name": "seconds", "type": "Real"}
			],
			"description": "Gets the last attacker(s) for all the squads in an SGroup Gets the last attacker for all the squads in an SGroup and stores that in SGroupAttacker."
		}, 
		{
			"name": "SGroup_GetLoadedVehicleSquad",
			"returnType": "SquadID",
			"parameters": [
				{"name": "groupid", "type": "SGroupID"}
			],
			"description": "Get the squad id of the vehicle squad that any squad of the sgroup is loaded in."
		}, 
		{
			"name": "SGroup_GetName",
			"returnType": "const char *",
			"parameters": [
				{"name": "sgroup", "type": "SGroup *"}
			],
			"description": "Returns the name of a given squad group."
		}, 
		{
			"name": "SGroup_GetNumSlotItem",
			"returnType": "Int",
			"parameters": [
				{"name": "group", "type": "SGroupID"}, 
				{"name": "itemID", "type": "Int"}
			],
			"description": "Get the number of slot items with the same ID that the squads in the sgroup own."
		}, 
		{
			"name": "SGroup_GetOffsetPosition",
			"returnType": "Position",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "offset", "type": "Integer"}, 
				{"name": "value", "type": "Real"}
			],
			"description": "Returns a position (a certain distance away) relative to a squad's current position/orientation. see ScarUtil.scar for explanation of 'offset' parameter."
		}, 
		{
			"name": "SGroup_GetPosition",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "group", "type": "SGroup *"}
			],
			"description": "Returns the center position of a squad group."
		}, 
		{
			"name": "SGroup_GetRandomSpawnedSquad",
			"returnType": "SquadID",
			"parameters": [
				{"name": "sgroupid", "type": "SGroup"}
			],
			"description": "Get a random spawned squad from sgroup."
		}, 
		{
			"name": "SGroup_GetSequence",
			"returnType": "Table",
			"parameters": [
				{"name": "name", "type": "String"}
			],
			"description": "Builds a table of SGroupIDs that are named in a sequence. i.e. a name of \"sg_killer\" will find groups \"sg_killer1\", \"sg_killer2\" and so on, up until it looks for a group that isn't there."
		}, 
		{
			"name": "SGroup_GetSpawnedSquadAt",
			"returnType": "Squad *",
			"parameters": [
				{"name": "group", "type": "SGroup *"}, 
				{"name": "index", "type": "unsigned int"}
			],
			"description": "Returns the spawned squad at a certain position in the group."
		}, 
		{
			"name": "SGroup_GetSpread",
			"returnType": "Real",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}
			],
			"description": "Returns the distance from the centre of the group of the unit that furthest out."
		}, 
		{
			"name": "SGroup_GetSquadsHeld",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "sgroupRecipient", "type": "SGroupID"}
			],
			"description": "Returns an sgroup containing all squads held by any squad in an sgroup."
		}, 
		{
			"name": "SGroup_GetSuppression",
			"returnType": "Float",
			"parameters": [
				{"name": "groupid", "type": "SGroupID"}
			],
			"description": "Get the suppression level for the first squad in the sgroup."
		}, 
		{
			"name": "SGroup_GetVeterancyExperience",
			"returnType": "Float",
			"parameters": [
				{"name": "groupid", "type": "SGroupID"}
			],
			"description": "Get the veterancy experience value for the first squad in the sgroup."
		}, 
		{
			"name": "SGroup_GetVeterancyRank",
			"returnType": "Int",
			"parameters": [
				{"name": "groupid", "type": "SGroupID"}
			],
			"description": "Get the veterancy rank for the first squad in the sgroup."
		}, 
		{
			"name": "SGroup_GetWBTable",
			"returnType": "LuaTable",
			"parameters": [
				{"name": "format", "type": "String"}
			],
			"description": "Returns a table of sgroups from the world builder."
		}, 
		{
			"name": "SGroup_HasCritical",
			"returnType": "Boolean",
			"parameters": [
				{"name": "group", "type": "SGroupID"}, 
				{"name": "critical", "type": "CriticalID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ANY or ALL of the squads in the SGroup have the specified critical."
		}, 
		{
			"name": "SGroup_HasEntityUpgrade",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "upgrade", "type": "UpgradeID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ANY or ALL of the squad's entities have the specified upgrade."
		}, 
		{
			"name": "SGroup_HasLeader",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Check if ALL or ANY squads in a sgroup have a leader."
		}, 
		{
			"name": "SGroup_HasSquadBlueprint",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "blueprint", "type": "BP"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Check if ALL or ANY of the squads in a group have a specific blueprint."
		}, 
		{
			"name": "SGroup_HasTeamWeapon",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ANY or ALL of the squads in an SGroup are carrying some kind of team weapon."
		}, 
		{
			"name": "SGroup_HasUpgrade",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "upgrade", "type": "UpgradeID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns whether ANY or ALL squads in an SGroup have the specified upgrade."
		}, 
		{
			"name": "SGroup_Hide",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "hide", "type": "Bool"}
			],
			"description": "Hide or show all entities in all squads in an SGroup."
		}, 
		{
			"name": "SGroup_IncreaseVeterancyExperience",
			"returnType": "Void",
			"parameters": [
				{"name": "groupid", "type": "SGroupID"}, 
				{"name": "experience", "type": "Float"}, 
				{"name": "silent", "type": "Boolean"}, 
				{"name": "applyModifiers", "type": "Boolean"}
			],
			"description": "Increase squad veterancy experience for all squads in the sgroup. Can do silent promotion (no sound/UI). Can skip modifiers, giving you direct control of experience gained."
		}, 
		{
			"name": "SGroup_IncreaseVeterancyRank",
			"returnType": "Void",
			"parameters": [
				{"name": "groupid", "type": "SGroupID"}, 
				{"name": "numranks", "type": "Integer"}, 
				{"name": "silent", "type": "Boolean"}
			],
			"description": "Increase squad veterancy rank for all squads in the sgroup. By default, increases rank by 1. Can do silent promotion (no sound/UI. ex: mass rank insrease at mission start)"
		}, 
		{
			"name": "SGroup_Intersection",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "SGroup *"}, 
				{"name": "grouptointersect", "type": "SGroup *"}
			],
			"description": "Same as EGroup_Intersection. Note: You cannot mix squad groups and entity groups."
		}, 
		{
			"name": "SGroup_IsAlive",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}
			],
			"description": "Returns true if a named squad group is not empty and its average health is > 0.0."
		}, 
		{
			"name": "SGroup_IsAttackMoving",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ANY or ALL squads in an SGroup are attack moving."
		}, 
		{
			"name": "SGroup_IsCamouflaged",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ANY or ALL of the squads in an SGroup are camouflaged."
		}, 
		{
			"name": "SGroup_IsCapturing",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "ALL", "type": "Boolean"}
			],
			"description": "Checks if ANY or ALL squads in an SGroup are capturing."
		}, 
		{
			"name": "SGroup_IsConstructingBuilding",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroup"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ALL or ANY squads in a group are currently constructing a building."
		}, 
		{
			"name": "SGroup_IsDoingAbility",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroupid", "type": "SGroupID"}, 
				{"name": "ability", "type": "AbilityID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns if ANY or ALL members of an SGroup are doing an ability."
		}, 
		{
			"name": "SGroup_IsDoingAttack",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}, 
				{"name": "time", "type": "Float"}
			],
			"description": "Returns true if ALL or ANY squads are attacking within the time."
		}, 
		{
			"name": "SGroup_IsDugIn",
			"returnType": "Boolean",
			"parameters": [
				{"name": "group", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ANY or ALL of the squads in the SGroup is dug in (or in the process of digging in)"
		}, 
		{
			"name": "SGroup_IsEmpty",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}
			],
			"description": "Returns true if a named squad group is empty."
		}, 
		{
			"name": "SGroup_IsFemale",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ANY or ALL squads are female."
		}, 
		{
			"name": "SGroup_IsHoldingAny",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}
			],
			"description": "Returns whether any entity in an SGroup has a hold on anything."
		}, 
		{
			"name": "SGroup_IsIdle",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "ALL", "type": "Boolean"}
			],
			"description": "Checks if ANY or ALL squads in an SGroup are idle."
		}, 
		{
			"name": "SGroup_IsInCover",
			"returnType": "Real Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns the percentage of the SGroup members that are in cover. Alternatively, specify ANY or ALL as a second parameter to return true/false."
		}, 
		{
			"name": "SGroup_IsInfiltrated",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ALL or ANY squads in a group are infiltrated."
		}, 
		{
			"name": "SGroup_IsInHoldEntity",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "ALL", "type": "Boolean"}
			],
			"description": "Checks if ANY or ALL squads in an SGroup are garrisoned in an entity (building)"
		}, 
		{
			"name": "SGroup_IsInHoldSquad",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "ALL", "type": "Boolean"}
			],
			"description": "Checks if ANY or ALL squads in an SGroup are garrisoned in a squad (transport vehicle)"
		}, 
		{
			"name": "SGroup_IsMoving",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ANY or ALL squads in an SGroup are moving."
		}, 
		{
			"name": "SGroup_IsOnScreen",
			"returnType": "Bool",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "group", "type": "SGroupID"}, 
				{"name": "all", "type": "Bool"}, 
				{"name": "percent", "type": "Float"}
			],
			"description": "Returns true if ANY or ALL (use those keywords) of the squads in the group are present onscreen. You can pass in a percentage of the screen to check, so 0.8 would be a centered rectangle occupying 80% of the screen."
		}, 
		{
			"name": "SGroup_IsPinned",
			"returnType": "Boolean",
			"parameters": [
				{"name": "group", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ANY or ALL of a group is pinned."
		}, 
		{
			"name": "SGroup_IsReinforcing",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ALL or ANY squads in a group are currently calling for reinforcments."
		}, 
		{
			"name": "SGroup_IsRetreating",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ANY or ALL of the squads in an SGroup are currently retreating."
		}, 
		{
			"name": "SGroup_IsSettingDemolitions",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ANY or ALL squads are setting demolitions."
		}, 
		{
			"name": "SGroup_IsSuppressed",
			"returnType": "Boolean",
			"parameters": [
				{"name": "group", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true is ANY or ALL of a group is suppressed."
		}, 
		{
			"name": "SGroup_IsUnderAttack",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}, 
				{"name": "time", "type": "Float"}
			],
			"description": "Returns true if ALL or ANY squads are under attack within the time."
		}, 
		{
			"name": "SGroup_IsUnderAttackByPlayer",
			"returnType": "Bool",
			"parameters": [
				{"name": "group", "type": "SGroupID"}, 
				{"name": "attackerplayer", "type": "PlayerID"}, 
				{"name": "duration", "type": "Float"}
			],
			"description": "Check if the squads are attacked by the player."
		}, 
		{
			"name": "SGroup_IsUnderAttackFromDirection",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}, 
				{"name": "offset", "type": "Integer"}, 
				{"name": "time", "type": "Float"}
			],
			"description": "Returns true if ALL or ANY squads are under attack from a direction within the time. see ScarUtil.scar for types of directions. you can pass in a table of directions."
		}, 
		{
			"name": "SGroup_IsUpgrading",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "blueprint", "type": "UpgradeBlueprint"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ALL or ANY squads in a group are currently upgrading. You can pass in nil for upgradeid if it doesn't matter what is being upgraded."
		}, 
		{
			"name": "SGroup_IsUsingAbility",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "ALL", "type": "Boolean"}
			],
			"description": "Checks if ANY or ALL squads in an SGroup are using an ability."
		}, 
		{
			"name": "SGroup_Kill",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}
			],
			"description": "Kills all squads in an SGroup. This kills them 'naturally', as opposed to SGroup_DestroyAllSquads() which makes them blink out of existance."
		}, 
		{
			"name": "SGroup_Remove",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "SGroup *"}, 
				{"name": "squadron", "type": "Squad *"}
			],
			"description": "Removes an squadron from a group."
		}, 
		{
			"name": "SGroup_RemoveGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID"}, 
				{"name": "grouptoremove", "type": "SGroupID"}
			],
			"description": "Remove from the first SGroup all squads contained in the second SGroup. SGroup2 remains untouched."
		}, 
		{
			"name": "SGroup_RemoveUpgrade",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "upgrade", "type": "UpgradeBlueprint/Table"}
			],
			"description": "Removes upgrade(s) from an sgroup."
		}, 
		{
			"name": "SGroup_ReSpawn",
			"returnType": "Void",
			"parameters": [
				{"name": "groupid", "type": "SGroupID"}
			],
			"description": "Respawn all despawned squads in a group."
		}, 
		{
			"name": "SGroup_RestoreCombatPlans",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupID", "type": "SGroupID"}
			],
			"description": "Restore all current combat plans for the squads in the sgroup."
		}, 
		{
			"name": "SGroup_RewardActionPoints",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "actionpoint", "type": "Float"}
			],
			"description": "Give action points to the squad."
		}, 
		{
			"name": "SGroup_SetAnimatorState",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupid", "type": "SGroupID"}, 
				{"name": "stateMachineName", "type": "String"}, 
				{"name": "stateName", "type": "String"}
			],
			"description": "Set animation state of a state machine for an SGroup. Please only use this for simple animations."
		}, 
		{
			"name": "SGroup_SetAutoTargetting",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID"}, 
				{"name": "hardpoint", "type": "String"}, 
				{"name": "enable", "type": "Bool"}
			],
			"description": "Sets whether a weapon to auto-target things or not."
		}, 
		{
			"name": "SGroup_SetAvgHealth",
			"returnType": "Real",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "healthpercent", "type": "Real"}
			],
			"description": "Sets the health of each squad in a squad group to a given percent [0.0, 1.0]."
		}, 
		{
			"name": "SGroup_SetAvgMorale",
			"returnType": "Real",
			"parameters": [
				{"name": "sgroup", "type": "SGroup"}, 
				{"name": "moralepercent", "type": "Real"}
			],
			"description": "Sets the moral of each squad in a squad group to a given percent [0.0, 1.0]."
		}, 
		{
			"name": "SGroup_SetCrushable",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "crushable", "type": "Boolean"}
			],
			"description": "Overrides crushable behavior for an sgroup."
		}, 
		{
			"name": "SGroup_SetInvulnerable",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "enabled", "type": "Boolean/Real"}, 
				{"name": "reset_time", "type": "Float"}
			],
			"description": "Enable/Disable invulnerablity for an entire SGroup. Use true and false for simple on/off, or use a number between 0.0 and 1.0 for more precise control on how much damage a squad can take before it takes no more."
		}, 
		{
			"name": "SGroup_SetInvulnerableToCritical",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "enabled", "type": "Boolean/Real"}
			],
			"description": "Enable/Disable invulnerablity to criticals for an entire SGroup."
		}, 
		{
			"name": "SGroup_SetMoodMode",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID"}, 
				{"name": "mode", "type": "Integer"}
			],
			"description": "Set soldier mood mode. Mode could be MM_Auto, MM_ForceCalm or MM_ForceTense."
		}, 
		{
			"name": "SGroup_SetPlayerOwner",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "owner", "type": "PlayerID"}
			],
			"description": "Changes the player owner of spawned and despawned squads in an SGroup."
		}, 
		{
			"name": "SGroup_SetRecrewable",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "recrewable", "type": "Boolean"}
			],
			"description": "Sets all squads in as sgroup to be recrewable or not when abandoned."
		}, 
		{
			"name": "SGroup_SetSelectable",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupid", "type": "SGroup"}, 
				{"name": "selectable", "type": "bool"}
			],
			"description": "Set player selectable state of squads in the sgroup."
		}, 
		{
			"name": "SGroup_SetSharedProductionQueue",
			"returnType": "Void",
			"parameters": [
				{"name": "egroup", "type": "SGroupID"}, 
				{"name": "enable", "type": "Boolean"}
			],
			"description": "Enables shared team production on a building (teammates can build using THEIR resources)"
		}, 
		{
			"name": "SGroup_SetSuppression",
			"returnType": "Void",
			"parameters": [
				{"name": "groupid", "type": "SGroupID"}, 
				{"name": "suppression", "type": "Float"}
			],
			"description": "Set the suppression level for all squads in the sgroup."
		}, 
		{
			"name": "SGroup_SetTeamWeaponCapturable",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID"}, 
				{"name": "enable", "type": "Boolean"}
			],
			"description": "Set team weapon in the squads to be capturable or not."
		}, 
		{
			"name": "SGroup_SetVeterancyDisplayVisibility",
			"returnType": "Void",
			"parameters": [
				{"name": "groupid", "type": "SGroupID"}, 
				{"name": "visible", "type": "bool"}
			],
			"description": "Sets the visibility of in-game veterancy art for the squads in given SGroup."
		}, 
		{
			"name": "SGroup_SetWorldOwned",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}
			],
			"description": "Makes an sgroup neutral."
		}, 
		{
			"name": "SGroup_Single",
			"returnType": "SGroupID",
			"parameters": [
				{"name": "groupID", "type": "SGroupID"}, 
				{"name": "squad", "type": "squadID"}
			],
			"description": "Creates a squad group containing a single squad."
		}, 
		{
			"name": "SGroup_SnapFaceEachOther",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup1", "type": "SGroupID"}, 
				{"name": "sgroup2", "type": "SGroupID"}
			],
			"description": "Makes two SGroups face each other at no time."
		}, 
		{
			"name": "SGroup_SnapFacePosition",
			"returnType": "void",
			"parameters": [
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "pos", "type": "ScarPosition"}
			],
			"description": "Works like SGroup_FacePosition except with no interpolation. All Squads will face the same direction, with the squad the closest to the center determining the direction."
		}, 
		{
			"name": "SGroup_TotalMembersCount",
			"returnType": "Integer",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "dontCountTeamWeapons", "type": "Bool"}
			],
			"description": "Returns the total count of all members of all the squads in a given SGroup."
		}, 
		{
			"name": "SGroup_WarpToMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "marker", "type": "MarkerID"}
			],
			"description": "Warps all members of an SGroup immediately to a marker."
		}, 
		{
			"name": "SGroup_WarpToPos",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "pos", "type": "Position"}
			],
			"description": "Warps all members of an SGroup immediately to a new position."
		}, 
		{
			"name": "ShootTheSky_AddSyncWeapon",
			"returnType": "Void",
			"parameters": [
				{"name": "syncweapon", "type": "SyncWeaponID"}, 
				{"name": "player", "type": "PlayerID"}
			],
			"description": "Forces a sync weapon to shoot at the sky, so long as it's manned by a given player."
		}, 
		{
			"name": "ShootTheSky_RemoveAll",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "any"}
			],
			"description": "Stops all sync weapons from going through their \"shooting at the sky\" routine."
		}, 
		{
			"name": "ShootTheSky_RemoveSyncWeapon",
			"returnType": "Void",
			"parameters": [
				{"name": "syncweapon", "type": "SyncWeaponID"}
			],
			"description": "Removes a sync weapon from the \"shoot at the sky\" system. It can then target people again."
		}, 
		{
			"name": "Sound_PlayOnSquad",
			"returnType": "Integer",
			"parameters": [
				{"name": "soundpathname", "type": "String"}, 
				{"name": "sgroupid", "type": "SGroupID/Squad"}
			],
			"description": "Play sound on the first entity of the squad in sgroup."
		}, 
		{
			"name": "Squad_AddAbility",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "ability", "type": "ScarAbilityPBG"}
			],
			"description": "Allows the squad to use this ability."
		}, 
		{
			"name": "Squad_AddSlotItemToDropOnDeath",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "pbg", "type": "ScarSlotItemPBG"}, 
				{"name": "dropChance", "type": "float"}, 
				{"name": "exclusive", "type": "bool"}
			],
			"description": "Add to the list of slot items to drop when this squad is wiped out."
		}, 
		{
			"name": "Squad_CanCaptureStrategicPoint",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns true if squad can capture stategic point."
		}, 
		{
			"name": "Squad_CanCaptureTeamWeapon",
			"returnType": "bool",
			"parameters": [
				{"name": "pSquad", "type": "Squad *"}, 
				{"name": "pEntity", "type": "Entity *"}
			],
			"description": "True if the squad can capture the entity sync weapon."
		}, 
		{
			"name": "Squad_CanCastAbilityOnEGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "caster", "type": "SquadID"}, 
				{"name": "ability", "type": "AbilityBlueprint"}, 
				{"name": "target_egroup", "type": "EGroup"}
			],
			"description": "Test whether a squad can be ordered to do this ability on any member of the target EGroup."
		}, 
		{
			"name": "Squad_CanCastAbilityOnEntity",
			"returnType": "bool",
			"parameters": [
				{"name": "castingSquad", "type": "Squad *"}, 
				{"name": "abilityPBG", "type": "ScarAbilityPBG"}, 
				{"name": "targetEntity", "type": "Entity *"}
			],
			"description": "Test whether a squad can be ordered to do this ability on the target squad."
		}, 
		{
			"name": "Squad_CanCastAbilityOnPosition",
			"returnType": "bool",
			"parameters": [
				{"name": "castingSquad", "type": "Squad *"}, 
				{"name": "abilityPBG", "type": "ScarAbilityPBG"}, 
				{"name": "targetPos", "type": "ScarPosition"}
			],
			"description": "Test whether a squad can be ordered to do this ability on the target squad."
		}, 
		{
			"name": "Squad_CanCastAbilityOnSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "caster", "type": "SquadID"}, 
				{"name": "ability", "type": "AbilityBlueprint"}, 
				{"name": "target_sgroup", "type": "SGroup"}
			],
			"description": "Test whether a squad can be ordered to do this ability on any member of the target SGroup."
		}, 
		{
			"name": "Squad_CanCastAbilityOnSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "castingSquad", "type": "Squad *"}, 
				{"name": "abilityPBG", "type": "ScarAbilityPBG"}, 
				{"name": "targetSquad", "type": "Squad *"}
			],
			"description": "Test whether a squad can be ordered to do this ability on the target squad."
		}, 
		{
			"name": "Squad_CancelProductionQueueItem",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "index", "type": "uint32_t"}
			],
			"description": "Cancels an item in a production queue. Index 0 is the currently producing item."
		}, 
		{
			"name": "Squad_CanHold",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Checks whether a squad can hold any squad."
		}, 
		{
			"name": "Squad_CanInstantReinforceNow",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns true if the squad is available to be reinforced."
		}, 
		{
			"name": "Squad_CanLoadSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "loadthis", "type": "Squad *"}, 
				{"name": "bCheckSquadState", "type": "bool"}, 
				{"name": "bOverload", "type": "bool"}
			],
			"description": "Checks whether a squad can load another squad."
		}, 
		{
			"name": "Squad_CanPickupSlotItem",
			"returnType": "bool",
			"parameters": [
				{"name": "pSquad", "type": "Squad *"}, 
				{"name": "pEntity", "type": "Entity *"}
			],
			"description": "True if the squad can pickup the entity slot item."
		}, 
		{
			"name": "Squad_CanRecrew",
			"returnType": "bool",
			"parameters": [
				{"name": "pSquad", "type": "Squad *"}, 
				{"name": "pEntity", "type": "Entity *"}
			],
			"description": "True if the squad can recrew the entity."
		}, 
		{
			"name": "Squad_CanSeeEntity",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns true if the distance between a target entity and the source squad is less than it squad's sight distance. There is no LOS or FOW check."
		}, 
		{
			"name": "Squad_CanSeeSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "target", "type": "Squad *"}
			],
			"description": "Returns true if the distance between a target squad and the source squad is less than it squad's sight distance. There is no LOS or FOW check."
		}, 
		{
			"name": "Squad_ClearPostureSuggestion",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Clears any previous posture suggestions made to a squad."
		}, 
		{
			"name": "Squad_CompleteUpgrade",
			"returnType": "void",
			"parameters": [
				{"name": "pSquad", "type": "Squad *"}, 
				{"name": "upgradePBG", "type": "ScarUpgradePBG"}
			],
			"description": "Instantly adds an upgrade to a given squad."
		}, 
		{
			"name": "Squad_Count",
			"returnType": "int",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns the number of units currently in a squad (spawned AND despawned!!)"
		}, 
		{
			"name": "Squad_CreateAndSpawnToward",
			"returnType": "Squad *",
			"parameters": [
				{"name": "sbp", "type": "ScarSquadPBG"}, 
				{"name": "player", "type": "Player *"}, 
				{"name": "loadoutCount", "type": "size_t"}, 
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "toward", "type": "ScarPosition"}
			],
			"description": "Create a squad, spawn it and assign it to a player."
		}, 
		{
			"name": "Squad_DeSpawn",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Despawn the entire squad at its current position."
		}, 
		{
			"name": "Squad_Destroy",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Remove an squad from the world and destroy it."
		}, 
		{
			"name": "Squad_EnableProductionQueue",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "enable", "type": "bool"}
			],
			"description": "Sets whether a squad can produce anything (including upgrades)"
		}, 
		{
			"name": "Squad_EnableSurprise",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "enable", "type": "bool"}
			],
			"description": "Enables or disables the surprise feature on thie given squad."
		}, 
		{
			"name": "Squad_EntityAt",
			"returnType": "Entity *",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "index", "type": "uint32_t"}
			],
			"description": "ZERO-BASED get of entities out of squads."
		}, 
		{
			"name": "Squad_FacePosition",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "pos", "type": "ScarPosition"}
			],
			"description": "Set the rotation of all troopers in a squad to face the position."
		}, 
		{
			"name": "Squad_FaceSquad",
			"returnType": "void",
			"parameters": [
				{"name": "squad1", "type": "Squad *"}, 
				{"name": "squad2", "type": "Squad *"}
			],
			"description": "Get 2 squads to face each other. This function works on spawned squads only."
		}, 
		{
			"name": "Squad_FindCover",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "coverSearchRadius", "type": "float"}
			],
			"description": "Tries to find cover within a certain radius of a position. If no cover is found, it returns the position used for the search."
		}, 
		{
			"name": "Squad_FindCoverCompareCurrent",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "coverSearchRadius", "type": "float"}, 
				{"name": "maxPathDistanceFromGoal", "type": "float"}, 
				{"name": "compareToCurrentCover", "type": "bool"}
			],
			"description": "Tries to find cover within a certain radius of a position, traveling a max distance to get there, and possibly comparing against current position's cover. If no cover is found, it returns the position used for the search."
		}, 
		{
			"name": "Squad_FromWorldID",
			"returnType": "Squad *",
			"parameters": [
				{"name": "id", "type": "uint32_t"}
			],
			"description": "Get a squad from a mission editor ID."
		}, 
		{
			"name": "Squad_GetActiveCommand",
			"returnType": "SquadStateID",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns the active squad command."
		}, 
		{
			"name": "Squad_GetAttackPlan",
			"returnType": "const char *",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Get name of current Squad AI attack plan."
		}, 
		{
			"name": "Squad_GetAttackTargets",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "group", "type": "SGroup *"}
			],
			"description": "Find the squad member current or forced targets. If found, the targets squads are added to the sgroup. Entity targets like buildings are ignored."
		}, 
		{
			"name": "Squad_GetBlueprint",
			"returnType": "ScarSquadPBG",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns the name of the squad blueprint (from the attribute editor)"
		}, 
		{
			"name": "Squad_GetCoverLevel",
			"returnType": "int",
			"parameters": [
				{"name": "pSquad", "type": "Squad *"}
			],
			"description": "Returns a number representing how good squad cover is -1 for awful, 0 for none, 1 for light, 2 for heavy."
		}, 
		{
			"name": "Squad_GetDestination",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns the squad's destination, if it's moving. IMPORTANT: you must only call this function if Squad_HasDestination has returned true."
		}, 
		{
			"name": "Squad_GetGameID",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns an integer containing the unqiue squad ID for this squad."
		}, 
		{
			"name": "Squad_GetHeading",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns the average heading of the spawned units in the squad. The heading is currently a lua table with three entries (x, y, z)"
		}, 
		{
			"name": "Squad_GetHealth",
			"returnType": "float",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns the current health of a squad."
		}, 
		{
			"name": "Squad_GetHealthMax",
			"returnType": "float",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns the max health of the squad."
		}, 
		{
			"name": "Squad_GetHealthPercentage",
			"returnType": "float",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns how much of an original squad's health is left, accounting for deaths (ex: a squad of 3 riflemen would be at 50% health, since they started with 6 members) Note: This is the same percentage that the UI uses."
		}, 
		{
			"name": "Squad_GetHoldEntity",
			"returnType": "Entity *",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Get which building (entity) is the squad garrisoned."
		}, 
		{
			"name": "Squad_GetHoldSquad",
			"returnType": "Squad *",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Get which vehicle (squad) is the squad garrisoned."
		}, 
		{
			"name": "Squad_GetInvulnerable",
			"returnType": "Bool",
			"parameters": [
				{"name": "squad", "type": "SquadID"}
			],
			"description": "Check if the squad is invulnerable or not."
		}, 
		{
			"name": "Squad_GetInvulnerableEntityCount",
			"returnType": "int",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns the number of invulnerable member."
		}, 
		{
			"name": "Squad_GetInvulnerableMinCap",
			"returnType": "float",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns the highest invulnerable min cap percentage from members of the squad."
		}, 
		{
			"name": "Squad_GetLastAttacker",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "group", "type": "SGroup *"}
			],
			"description": "Find the last squad attacker on this squad. If found, the squad is added to the sgroup."
		}, 
		{
			"name": "Squad_GetLastAttackers",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "group", "type": "SGroup *"}, 
				{"name": "timeSeconds", "type": "float"}
			],
			"description": "Find the squad attackers on this squad from the last seconds specified. If found, the squads are added to the sgroup. Building attackers are ignored."
		}, 
		{
			"name": "Squad_GetLastEntityAttacker",
			"returnType": "void",
			"parameters": [
				{"name": "pSquad", "type": "Squad *"}, 
				{"name": "pEGroup", "type": "EGroup *"}
			],
			"description": "Find the last entity attacker on this squad. If found, the entity added to egroup."
		}, 
		{
			"name": "Squad_GetMax",
			"returnType": "int",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns the max number of units allowed in the squad."
		}, 
		{
			"name": "Squad_GetMinArmor",
			"returnType": "float",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns the current minimum armor of a squad."
		}, 
		{
			"name": "Squad_GetNumSlotItem",
			"returnType": "size_t",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "pbg", "type": "ScarSlotItemPBG"}
			],
			"description": "Get the number of slot items with the same ID that the squad has."
		}, 
		{
			"name": "Squad_GetOffsetPosition",
			"returnType": "Position",
			"parameters": [
				{"name": "squad", "type": "SquadID"}, 
				{"name": "offset", "type": "Integer"}, 
				{"name": "distance", "type": "Real"}
			],
			"description": "Returns a position relative to a squad's current position and orientation. see ScarUtil.scar for explanation of 'offset' parameter."
		}, 
		{
			"name": "Squad_GetPinnedPlan",
			"returnType": "const char *",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Get name of current Squad AI reaction plan."
		}, 
		{
			"name": "Squad_GetPlayerOwner",
			"returnType": "Player *",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns the Player owner of the given squad. Squad MUST NOT be owned by the world."
		}, 
		{
			"name": "Squad_GetPosition",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns the average position of the spawned units in the squad. The position is currently a lua table with three entries (x, y, z)"
		}, 
		{
			"name": "Squad_GetPositionDeSpawned",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns the average position of the despawned AND spawned units in the squad."
		}, 
		{
			"name": "Squad_GetProductionQueueItem",
			"returnType": "const PropertyBagGroup *",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "index", "type": "size_t"}
			],
			"description": "Returns the blueprint for a production queue item with index."
		}, 
		{
			"name": "Squad_GetProductionQueueItemType",
			"returnType": "int",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "index", "type": "size_t"}
			],
			"description": "Returns the production type (PITEM_Upgrade, PITEM_Spawn, PITEM_SquadUpgrade, PITEM_SquadReinforce, PITEM_PlayerUpgrade) for a production queue item with index."
		}, 
		{
			"name": "Squad_GetProductionQueueSize",
			"returnType": "size_t",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns the number of items in the squad's production queue."
		}, 
		{
			"name": "Squad_GetReactionPlan",
			"returnType": "const char *",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Get name of current Squad AI reaction plan."
		}, 
		{
			"name": "Squad_GetRetaliationPlan",
			"returnType": "const char *",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Get name of current Squad AI retaliation plan."
		}, 
		{
			"name": "Squad_GetSlotItemAt",
			"returnType": "ScarSlotItemPBG",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "index", "type": "size_t"}
			],
			"description": "Returns the ID of the slot item. Use Squad_GetSlotItemCount to determine how many slot items the squad has. The first index is 1."
		}, 
		{
			"name": "Squad_GetSlotItemCount",
			"returnType": "size_t",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns how many slot items this squad has."
		}, 
		{
			"name": "Squad_GetSlotItemsTable",
			"returnType": "LuaTable",
			"parameters": [
				{"name": "squadid", "type": "SquadID"}
			],
			"description": "Returns a table of SlotItem ID's that this squad currently owns."
		}, 
		{
			"name": "Squad_GetSquadsHeld",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "sgroup", "type": "SGroup *"}
			],
			"description": "Adds all squads held by 'squad' to an sgroup."
		}, 
		{
			"name": "Squad_GetSuppression",
			"returnType": "float",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Check current squad suppresion level. Return value from 0 to 1."
		}, 
		{
			"name": "Squad_GetVehicleMobileDriverSquad",
			"returnType": "Squad *",
			"parameters": [
				{"name": "pSquad", "type": "Squad *"}
			],
			"description": "Gets the mobile driver squad from a vehicle squad."
		}, 
		{
			"name": "Squad_GetVeterancyExperience",
			"returnType": "float",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Get current squad veterancy experience."
		}, 
		{
			"name": "Squad_GetVeterancyRank",
			"returnType": "size_t",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Get current squad veterancy rank."
		}, 
		{
			"name": "Squad_GiveSlotItem",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "pbg", "type": "ScarSlotItemPBG"}
			],
			"description": "Gives a slot item to the squad. Can fail due to not enough slots left."
		}, 
		{
			"name": "Squad_GiveSlotItemsFromTable",
			"returnType": "Void",
			"parameters": [
				{"name": "squadid", "type": "SquadID"}, 
				{"name": "itemTable", "type": "LuaTable"}
			],
			"description": "Gives all slot items in a table to the squad. The table should come from Squad_GetSlotItemsTable."
		}, 
		{
			"name": "Squad_HasActiveCommand",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns true if there's an active command currently for the squad."
		}, 
		{
			"name": "Squad_HasAnyCritical",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Return true if any entity in the squad has any critical applied to it."
		}, 
		{
			"name": "Squad_HasCritical",
			"returnType": "Bool",
			"parameters": [
				{"name": "squad", "type": "SquadID"}, 
				{"name": "critical", "type": "CriticalID"}
			],
			"description": "Check if a squad has a critical or not."
		}, 
		{
			"name": "Squad_HasDestination",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns whether this squad is moving and has a destination."
		}, 
		{
			"name": "Squad_HasProductionQueue",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns true if a squad has a production queue."
		}, 
		{
			"name": "Squad_HasSetupWeapon",
			"returnType": "bool",
			"parameters": [
				{"name": "pSquad", "type": "Squad *"}
			],
			"description": "Returns true if the given squad has a setup weapon."
		}, 
		{
			"name": "Squad_HasSlotItem",
			"returnType": "Bool",
			"parameters": [
				{"name": "squad", "type": "SquadID"}, 
				{"name": "slotItem", "type": "SlotItemID"}
			],
			"description": "Check if a squad has a specific slot item."
		}, 
		{
			"name": "Squad_HasSoldier",
			"returnType": "bool",
			"parameters": [
				{"name": "pSquad", "type": "Squad *"}
			],
			"description": "Returns true if the given squad has soldiers in it (includes team weapons)"
		}, 
		{
			"name": "Squad_HasTeamWeapon",
			"returnType": "bool",
			"parameters": [
				{"name": "pSquad", "type": "Squad *"}
			],
			"description": "Returns true if the given squad has a team weapon."
		}, 
		{
			"name": "Squad_HasUpgrade",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "pbg", "type": "ScarUpgradePBG"}
			],
			"description": "Return true if the squad has purchased the specified upgrade."
		}, 
		{
			"name": "Squad_HasVehicle",
			"returnType": "bool",
			"parameters": [
				{"name": "pSquad", "type": "Squad *"}
			],
			"description": "Returns true if the given squad has a vehicle in it (includes team weapons)"
		}, 
		{
			"name": "Squad_IncreaseVeterancyExperience",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "experience", "type": "float"}, 
				{"name": "silent", "type": "bool"}, 
				{"name": "applyModifiers", "type": "bool"}
			],
			"description": "Increase current squad veterancy experience."
		}, 
		{
			"name": "Squad_IncreaseVeterancyRank",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "numranks", "type": "int"}, 
				{"name": "silent", "type": "bool"}
			],
			"description": "Increase current squad veterancy rank."
		}, 
		{
			"name": "Squad_InstantSetupTeamWeapon",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Stops current squads activity and instant setup the team weapon if they have one."
		}, 
		{
			"name": "Squad_IsAttacking",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "time", "type": "float"}
			],
			"description": "Returns true if any unit in the squad is attacking within the time."
		}, 
		{
			"name": "Squad_IsCamouflaged",
			"returnType": "Boolean",
			"parameters": [
				{"name": "squad", "type": "SquadID"}
			],
			"description": "Returns whether ANY entity in the squad is camouflaged."
		}, 
		{
			"name": "Squad_IsDoingAbility",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "pbg", "type": "ScarAbilityPBG"}
			],
			"description": "True if squad is currently performing the given ability."
		}, 
		{
			"name": "Squad_IsFemale",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns whether the passed in squad is female."
		}, 
		{
			"name": "Squad_IsHoldingAny",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Check if the squad has a hold on anything (use this on vehicles)"
		}, 
		{
			"name": "Squad_IsInCover",
			"returnType": "Boolean",
			"parameters": [
				{"name": "squadId", "type": "SquadID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if ALL or ANY troopers in a squad are in cover."
		}, 
		{
			"name": "Squad_IsInHoldEntity",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Check if the squad is garrisoned in entity (building)"
		}, 
		{
			"name": "Squad_IsInHoldSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Check if the squad is loaded in squad (vehicle."
		}, 
		{
			"name": "Squad_IsMoving",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns whether any entity in the squad is moving."
		}, 
		{
			"name": "Squad_IsPinned",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "True if squad is currently pinned."
		}, 
		{
			"name": "Squad_IsPinnedOrSuppressed",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "True if squad is currently pinned or suppressed."
		}, 
		{
			"name": "Squad_IsReinforcing",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns true if the squad is currently reinforcing. This function will return false if the squad does not have a reinforce ext."
		}, 
		{
			"name": "Squad_IsRetreating",
			"returnType": "Boolean",
			"parameters": [
				{"name": "squadid", "type": "SquadID"}
			],
			"description": "Returns true if the squad is currently retreating."
		}, 
		{
			"name": "Squad_IsSuppressed",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "True if squad is currently suppressed."
		}, 
		{
			"name": "Squad_IsUnderAttack",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "time", "type": "float"}
			],
			"description": "Returns true if any unit in the squad is under attack within the time."
		}, 
		{
			"name": "Squad_IsUnderAttackByPlayer",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "pAttackerOwner", "type": "Player *"}, 
				{"name": "time", "type": "float"}
			],
			"description": "Returns true if squad is under attack by enemy from a particular player."
		}, 
		{
			"name": "Squad_IsUnderAttackFromDirection",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "offset", "type": "int"}, 
				{"name": "timeSeconds", "type": "float"}
			],
			"description": "Returns true if the squad was under attack from a certain direction (8 offset types, see ScarUtil.scar)"
		}, 
		{
			"name": "Squad_IsUpgrading",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "upgrade", "type": "ScarUpgradePBG"}
			],
			"description": "Returns true if the squad is currently upgrading something specific."
		}, 
		{
			"name": "Squad_IsUpgradingAny",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns true if the squad is currently upgrading anything."
		}, 
		{
			"name": "Squad_IsValid",
			"returnType": "bool",
			"parameters": [
				{"name": "id", "type": "uint32_t"}
			],
			"description": "Check if a squad with the given ID can be found in the world."
		}, 
		{
			"name": "Squad_Kill",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Kill whole squad. Sets health to 0, and triggers death effects."
		}, 
		{
			"name": "Squad_Population",
			"returnType": "float",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "type", "type": "CapType"}
			],
			"description": "get squad pop cost, use CT_Personnel, CT_Vehicle, CT_Medic for captype"
		}, 
		{
			"name": "Squad_RemoveAbility",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "ability", "type": "ScarAbilityPBG"}
			],
			"description": "Removes an ability that was previously added by Squad_AddAbility. You cannot remove static abilities (from AE: squad_ability_ext)"
		}, 
		{
			"name": "Squad_RemoveSlotItemAt",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "index", "type": "size_t"}, 
				{"name": "bInstantWeaponChange", "type": "bool"}
			],
			"description": "Removes a slot item from the squad."
		}, 
		{
			"name": "Squad_RemoveUpgrade",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "upgrade", "type": "ScarUpgradePBG"}
			],
			"description": "Removes an upgrade from a squad."
		}, 
		{
			"name": "Squad_RewardActionPoints",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "actionPoint", "type": "float"}
			],
			"description": "Give squad action points."
		}, 
		{
			"name": "Squad_SBPEntityAt",
			"returnType": "ScarEntityPBG",
			"parameters": [
				{"name": "sbp", "type": "ScarSquadPBG"}, 
				{"name": "index", "type": "uint32_t"}
			],
			"description": "ZERO-BASED get of entity blueprints out of squad blueprint."
		}, 
		{
			"name": "Squad_SBPGetMax",
			"returnType": "int",
			"parameters": [
				{"name": "sbp", "type": "ScarSquadPBG"}
			],
			"description": "Returns the max number of units allowed in the squad blueprint."
		}, 
		{
			"name": "Squad_SetAnimatorState",
			"returnType": "Void",
			"parameters": [
				{"name": "squadid", "type": "SquadID"}, 
				{"name": "stateMachineName", "type": "String"}, 
				{"name": "stateName", "type": "String"}
			],
			"description": "Set animation state of a state machine for a squad Please only use this for simple animations."
		}, 
		{
			"name": "Squad_SetAttackPlan",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "planName", "type": "const char *"}
			],
			"description": "Set overriding Squad AI attack plan."
		}, 
		{
			"name": "Squad_SetHealth",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "healthPercent", "type": "float"}
			],
			"description": "Set the health of all units in a squad. Health must be in range [0.0, 1.0]."
		}, 
		{
			"name": "Squad_SetInvulnerable",
			"returnType": "Void",
			"parameters": [
				{"name": "squad", "type": "SquadID"}, 
				{"name": "enable", "type": "Bool"}, 
				{"name": "reset_time", "type": "Float"}
			],
			"description": "Set invulnerability on the squad. Reset time is in seconds. If it it set, the invulnerability will expire after this time."
		}, 
		{
			"name": "Squad_SetInvulnerableEntityCount",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "invEntityCount", "type": "int"}, 
				{"name": "resetTime", "type": "float"}
			],
			"description": "Make a squad invulnerable to physical damage when number of members drop to or below specified count."
		}, 
		{
			"name": "Squad_SetInvulnerableMinCap",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "minHealthPercentage", "type": "float"}, 
				{"name": "resetTime", "type": "float"}
			],
			"description": "Make a squad invulnerable to physical damage."
		}, 
		{
			"name": "Squad_SetInvulnerableToCritical",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "invulnerable", "type": "bool"}
			],
			"description": "set invulnerability to critical effect for all entities in the entire squad. Invulnerable to critical also means that kills a entity will not have effect"
		}, 
		{
			"name": "Squad_SetMoodMode",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "mood", "type": "SquadCombatBehaviourExt::MoodMode"}
			],
			"description": "Set soldier mood mode."
		}, 
		{
			"name": "Squad_SetMoveType",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "movetypePBG", "type": "ScarMoveTypePBG"}
			],
			"description": "Sets the squad's move type."
		}, 
		{
			"name": "Squad_SetPinnedPlan",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "planName", "type": "const char *"}
			],
			"description": "Set overriding Squad AI pinned plan."
		}, 
		{
			"name": "Squad_SetPlayerOwner",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "owner", "type": "Player *"}
			],
			"description": "Changes the owner of the given squad."
		}, 
		{
			"name": "Squad_SetPosition",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "toward", "type": "ScarPosition"}
			],
			"description": "Moves the squad to an arbitrary new position."
		}, 
		{
			"name": "Squad_SetReactionPlan",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "planName", "type": "const char *"}
			],
			"description": "Set overriding Squad AI reaction plan."
		}, 
		{
			"name": "Squad_SetRecrewable",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "capturable", "type": "bool"}
			],
			"description": "Set entity inside the squad to be recrewable or not when it becomes abandoned."
		}, 
		{
			"name": "Squad_SetRetaliationPlan",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "planName", "type": "const char *"}
			],
			"description": "Set overriding Squad AI idle retaliation plan."
		}, 
		{
			"name": "Squad_SetSharedProductionQueue",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "shared", "type": "bool"}
			],
			"description": "Enables shared team production on a building (teammates can build using THEIR resources)"
		}, 
		{
			"name": "Squad_SetSuppression",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "percentage", "type": "float"}
			],
			"description": "Set current squad suppresion level. Suppression value value from 0 to 1."
		}, 
		{
			"name": "Squad_SetVeterancyDisplayVisibility",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "visible", "type": "bool"}
			],
			"description": "Turn on/off display of the unit portrait veterancy stars."
		}, 
		{
			"name": "Squad_SetWorldOwned",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Makes a squad neutral."
		}, 
		{
			"name": "Squad_Spawn",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "pos", "type": "ScarPosition"}
			],
			"description": "Spawn the entire squad at a given position."
		}, 
		{
			"name": "Squad_SpawnToward",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "toward", "type": "ScarPosition"}
			],
			"description": "Spawn the entire squad at a given position."
		}, 
		{
			"name": "Squad_Split",
			"returnType": "Squad *",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "num", "type": "unsigned int"}
			],
			"description": "Split the squad into 2. The new squad size is specified by the number passed in."
		}, 
		{
			"name": "Squad_StopAbility",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "ability", "type": "ScarAbilityPBG"}, 
				{"name": "bEarlyExit", "type": "bool"}
			],
			"description": "Abruptly stops an active ability."
		}, 
		{
			"name": "Squad_WarpToPos",
			"returnType": "Void",
			"parameters": [
				{"name": "squad", "type": "SquadID"}, 
				{"name": "pos", "type": "Position"}
			],
			"description": "Warps a squad immediately to a new position."
		}, 
		{
			"name": "SquadQuery_CanCauseSuppression",
			"returnType": "bool",
			"parameters": [
				{"name": "aiPlayer", "type": "AIPlayer *"}, 
				{"name": "pSquad", "type": "Squad *"}
			],
			"description": "Checks if this squad can cause suppression."
		}, 
		{
			"name": "SquadQuery_CanDecrew",
			"returnType": "bool",
			"parameters": [
				{"name": "pDriverSquad", "type": "Squad *"}, 
				{"name": "pDecrewTargetEntity", "type": "Entity *"}
			],
			"description": "Checks if this squad can decrew the entity."
		}, 
		{
			"name": "SquadQuery_GetAnySquadCombatTarget",
			"returnType": "Squad *",
			"parameters": [
				{"name": "pSquad", "type": "Squad *"}
			],
			"description": "Returns the current squad target for the given squad (null if no target, or target is non-squad entity)"
		}, 
		{
			"name": "Stats_BuildingsLost",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns how many buildings a player has lost."
		}, 
		{
			"name": "Stats_InfantryLost",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns how many infantry a player has lost."
		}, 
		{
			"name": "Stats_KillsTotal",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns a player's total kills."
		}, 
		{
			"name": "Stats_PlayerAt",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "index", "type": "size_t"}
			],
			"description": "Returns player id at given index."
		}, 
		{
			"name": "Stats_PlayerCount",
			"returnType": "size_t",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Returns how many players in the game."
		}, 
		{
			"name": "Stats_ResGathered",
			"returnType": "ResourceAmount",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns how many resources a player has gathered."
		}, 
		{
			"name": "Stats_ResSpent",
			"returnType": "ResourceAmount",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns how many resources a player has spent."
		}, 
		{
			"name": "Stats_SoldiersKilled",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns how many soldiers a player has killed."
		}, 
		{
			"name": "Stats_StructuresKilled",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns how many structures a player has killed."
		}, 
		{
			"name": "Stats_TeamTally",
			"returnType": "Integer",
			"parameters": [
				{"name": "teamindex", "type": "Integer"}, 
				{"name": "statfunction", "type": "Function"}
			],
			"description": "Takes a statistic function and totals up the results for all the players on a given team."
		}, 
		{
			"name": "Stats_TotalDuration",
			"returnType": "int",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Returns game time, in seconds."
		}, 
		{
			"name": "Stats_TotalSquadsLost",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns how many squads a playe has lost."
		}, 
		{
			"name": "Stats_UnitSoldierKills",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}, 
				{"name": "sbp", "type": "ScarSquadPBG"}
			],
			"description": "Returns how many soldiers an SBP have killed. ex: how many soldiers did player2's riflemen kill?"
		}, 
		{
			"name": "Stats_UnitStructureKills",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}, 
				{"name": "sbp", "type": "ScarSquadPBG"}
			],
			"description": "Returns how many structures an SBP have killed. ex: how many structures did player2's riflemen kill?"
		}, 
		{
			"name": "Stats_UnitTotalKills",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}, 
				{"name": "sbp", "type": "ScarSquadPBG"}
			],
			"description": "Returns how many entities an SBP have killed. ex: how many entities did player2's riflemen kill?"
		}, 
		{
			"name": "Stats_UnitVehicleKills",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}, 
				{"name": "sbp", "type": "ScarSquadPBG"}
			],
			"description": "Returns how many vehicles an SBP have killed. ex: how many vehicles did player2's riflemen kill?"
		}, 
		{
			"name": "Stats_VehiclesKilled",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns how many vehicles a playe has killed."
		}, 
		{
			"name": "Stats_VehiclesLost",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}
			],
			"description": "Returns how many vehicles a player has lost."
		}, 
		{
			"name": "Table_Contains",
			"returnType": "Boolean",
			"parameters": [
				{"name": "OriginalTable", "type": "LuaTable"}, 
				{"name": "item", "type": "Item"}
			],
			"description": "Checks if a table contains the specified item."
		}, 
		{
			"name": "Table_Copy",
			"returnType": "LuaTable",
			"parameters": [
				{"name": "OriginalTable", "type": "LuaTable"}
			],
			"description": "Copies the contents of the original table returns a new table with the contents of that table."
		}, 
		{
			"name": "Table_GetRandomItem",
			"returnType": "Item Table",
			"parameters": [
				{"name": "table", "type": "Table"}, 
				{"name": "numberofitems", "type": "Integer"}
			],
			"description": "Returns a random item from a table. You can return multiple items (without duplicates) by passing in an optional number parameter."
		}, 
		{
			"name": "Team_AddResource",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "resourceType", "type": "Integer"}, 
				{"name": "value", "type": "Real"}
			],
			"description": "Add resource to each member of a team, as opposed to just setting it. Possible resource types are RT_Manpower, RT_Munition, RT_Fuel, RT_Action."
		}, 
		{
			"name": "Team_AddSquadsToSGroup",
			"returnType": "SGroupID",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "squadgroupName", "type": "String"}
			],
			"description": "For the given team, get all of the squads gathered into a squadgroup of your naming."
		}, 
		{
			"name": "Team_AreSquadsNearMarker",
			"returnType": "Boolean",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "marker", "type": "MarkerID"}
			],
			"description": "Returns true if ANY of a teams squads are in proximity of a marker."
		}, 
		{
			"name": "Team_CanSee",
			"returnType": "Boolean",
			"parameters": [
				{"name": "teamid", "type": "TeamID"}, 
				{"name": "item", "type": "EGroupID/SGroupID/EntityID/SquadId/PositionID/MarkerID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if a team can see ALL or ANY items."
		}, 
		{
			"name": "Team_ClearArea",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "marker", "type": "MarkerID"}, 
				{"name": "invulnerable", "type": "Bool"}
			],
			"description": "Any of the team's units in the marker area move out of the area, and can be made invulnerable for a bit whilst they do it."
		}, 
		{
			"name": "Team_FindByRace",
			"returnType": "TeamID",
			"parameters": [
				{"name": "race", "type": "String"}, 
				{"name": "race2", "type": "String"}, 
				{"name": "...", "type": "any"}
			],
			"description": "Returns the TeamID for a given race. See ScarUtil.scar for constants to use."
		}, 
		{
			"name": "Team_ForEachAllOrAny",
			"returnType": "Boolean",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "all", "type": "Boolean"}, 
				{"name": "function", "type": "LuaFunction"}
			],
			"description": "Tests a condition on teams. Calls your function for each player. Parameters of your function: (TeamID, player index, PlayerID). Your function must return true or false to indicate whether the player meets the condition."
		}, 
		{
			"name": "Team_GetAll",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "egroup", "type": "EGroupID"}
			],
			"description": "Creates/Clears groups that contain all of a team's units and buildings. Defaults - sg_allsquads and eg_allentities."
		}, 
		{
			"name": "Team_GetAllEntitiesNearMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "position", "type": "MarkerID/Pos/SectorID"}, 
				{"name": "range", "type": "Real"}
			],
			"description": "Gather together all of a teams's entities that are in proximity to a marker, a position, or within a territory sector into an EGroup. The EGroup is cleared beforehand."
		}, 
		{
			"name": "Team_GetAllSquadsNearMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "position", "type": "MarkerID/Pos/SectorID"}, 
				{"name": "range", "type": "Real"}
			],
			"description": "Gather together all of a teams's squads that are in proximity to a marker, a position, or within a territory sector into an SGroup. The SGroup is cleared beforehand."
		}, 
		{
			"name": "Team_GetBuildingID",
			"returnType": "EntityID Table",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "entitytypes", "type": "BlueprintTable"}, 
				{"name": "bool", "type": "ANY"}
			],
			"description": "Returns the entityID of the first team owned building listed in the table."
		}, 
		{
			"name": "Team_GetBuildingsCount",
			"returnType": "Integer",
			"parameters": [
				{"name": "team", "type": "TeamID"}
			],
			"description": "Returns the total number of buildings owned by this team."
		}, 
		{
			"name": "Team_GetBuildingsCountExcept",
			"returnType": "Integer",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "exceptions", "type": "BlueprintTable"}
			],
			"description": "Returns the total number of buildings owned by this team (with exclusions)."
		}, 
		{
			"name": "Team_GetBuildingsCountOnly",
			"returnType": "Integer",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "ebplist", "type": "BlueprintTable"}
			],
			"description": "Returns the number of buildings owned by this team (inclusive)."
		}, 
		{
			"name": "Team_GetEnemyTeam",
			"returnType": "TeamID",
			"parameters": [
				{"name": "team", "type": "TeamID"}
			],
			"description": "Returns a team's enemy."
		}, 
		{
			"name": "Team_GetEntitiesFromType",
			"returnType": "EGroup",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "unitType", "type": "String"}
			],
			"description": "Returns an EGroup containing all of the teams entities of a specific unit_type (as defined by the type_ext on the entity)"
		}, 
		{
			"name": "Team_GetEntityConcentration",
			"returnType": "EGroup",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "popcapOnly", "type": "Boolean"}, 
				{"name": "includeBlueprints", "type": "Table"}, 
				{"name": "excludeBlueprints", "type": "Table"}, 
				{"name": "bLeastConcentrated", "type": "Boolean"}, 
				{"name": "onlyInThisMarker", "type": "MarkerID/Table"}
			],
			"description": "Finds the greatest (or least) concentration of entities owned by a team."
		}, 
		{
			"name": "Team_GetSquadConcentration",
			"returnType": "SGroup",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "popcapOnly", "type": "Boolean"}, 
				{"name": "includeBlueprints", "type": "Table"}, 
				{"name": "excludeBlueprints", "type": "Table"}, 
				{"name": "bLeastConcentrated", "type": "Boolean"}, 
				{"name": "onlyInThisMarker", "type": "MarkerID/Table"}
			],
			"description": "Finds the greatest (or least) concentration of squads owned by a team."
		}, 
		{
			"name": "Team_HasBuilding",
			"returnType": "boolean",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "entitytypes", "type": "BlueprintTable"}, 
				{"name": "bool", "type": "ANY"}
			],
			"description": "Returns true if this team owns any buildings listed in the table."
		}, 
		{
			"name": "Team_HasBuildingsExcept",
			"returnType": "boolean",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "exceptions", "type": "BlueprintTable"}, 
				{"name": "bool", "type": "ANY"}
			],
			"description": "Returns true if this team owns any buildings. (with exclusions)."
		}, 
		{
			"name": "Team_HasBuildingUnderConstruction",
			"returnType": "boolean",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "entitytypes", "type": "BlueprintTable"}, 
				{"name": "bool", "type": "ANY"}
			],
			"description": "Returns true if this team owns any buildings listed in the table currently under construction."
		}, 
		{
			"name": "Team_HasHuman",
			"returnType": "boolean",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "bool", "type": "ANY"}
			],
			"description": "Returns true if this team has any players that are human."
		}, 
		{
			"name": "Team_IsAlive",
			"returnType": "Boolean",
			"parameters": [
				{"name": "teamid", "type": "UnknownType"}
			],
			"description": "Returns whether a team is still alive or not (all member players must be 'alive')  TeamID team."
		}, 
		{
			"name": "Team_OwnsEGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "any", "type": "Boolean"}
			],
			"description": "Returns true if a given team owns ALL or ANY items in a group."
		}, 
		{
			"name": "Team_OwnsEntity",
			"returnType": "Boolean",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "entity", "type": "EntityID"}
			],
			"description": "Returns true if a given team owns an entity."
		}, 
		{
			"name": "Team_OwnsSGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns true if a given team owns ALL or ANY items in a group."
		}, 
		{
			"name": "Team_OwnsSquad",
			"returnType": "Boolean",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "squad", "type": "SquadID"}
			],
			"description": "Returns true if a given team owns a squad."
		}, 
		{
			"name": "Team_RestrictAddOnList",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "addonlist", "type": "Table"}
			],
			"description": "Restrict a list of addons."
		}, 
		{
			"name": "Team_RestrictBuildingList",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "blueprintlist", "type": "Table"}
			],
			"description": "Restrict a list of buildings."
		}, 
		{
			"name": "Team_RestrictResearchList",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "list", "type": "StringTable"}
			],
			"description": "Restrict a list of research items."
		}, 
		{
			"name": "Team_SetAbilityAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "bp", "type": "AbilityBlueprint/Table"}, 
				{"name": "availability", "type": "Integer"}
			],
			"description": "Sets the availability of an ability. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT."
		}, 
		{
			"name": "Team_SetCommandAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "command", "type": "Integer/Table"}, 
				{"name": "availability", "type": "Integer"}
			],
			"description": "Sets the availability of entity, squad and player commands. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT."
		}, 
		{
			"name": "Team_SetConstructionMenuAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "menuname", "type": "String/Table"}, 
				{"name": "availability", "type": "Integer"}
			],
			"description": "Sets the availability of a construction menu. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT."
		}, 
		{
			"name": "Team_SetEntityProductionAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "bp", "type": "EntityBlueprint/Table"}, 
				{"name": "availability", "type": "Integer"}
			],
			"description": "Sets the availability of an entity production item. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT."
		}, 
		{
			"name": "Team_SetMaxCapPopulation",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "captype", "type": "Integer"}, 
				{"name": "newcap", "type": "Integer"}
			],
			"description": "Sets the current personnel or vehicle max-cap for each player on a team. The captype is either CT_Personnel or CT_Vehicle (you can't adjust Medic caps just yet)."
		}, 
		{
			"name": "Team_SetMaxPopulation",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "captype", "type": "Integer"}, 
				{"name": "newcap", "type": "Integer"}
			],
			"description": "Sets the current personnel or vehicle cap for each player on a team. The captype is either CT_Personnel or CT_Vehicle (you can't adjust Medic caps just yet)."
		}, 
		{
			"name": "Team_SetSquadProductionAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "bp", "type": "SquadBlueprint/Table"}, 
				{"name": "availability", "type": "Integer"}
			],
			"description": "Sets the availability of a squad production item. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT."
		}, 
		{
			"name": "Team_SetTechTreeByYear",
			"returnType": "void",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "year", "type": "Integer"}
			],
			"description": "Sets up the tech tree for a whole team based off the year."
		}, 
		{
			"name": "Team_SetUpgradeAvailability",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "bp", "type": "UpgradeBlueprint/Table"}, 
				{"name": "availability", "type": "Integer"}
			],
			"description": "Sets the availability of an upgrade. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT."
		}, 
		{
			"name": "Team_SetUpgradeCost",
			"returnType": "Void",
			"parameters": [
				{"name": "team", "type": "TeamID"}, 
				{"name": "upgrade", "type": "UpgradeID"}, 
				{"name": "manpower", "type": "Real"}, 
				{"name": "fuel", "type": "Real"}, 
				{"name": "munition", "type": "Real"}, 
				{"name": "action", "type": "Real"}, 
				{"name": "command", "type": "Real"}
			],
			"description": "Sets the cost of an upgrade."
		}, 
		{
			"name": "TeamWeapon_AddGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "group", "type": "SGroupID/EGroupID"}, 
				{"name": "facingdirections", "type": "Table"}, 
				{"name": "currentfacing", "type": "Integer"}, 
				{"name": "threatarrow", "type": "Boolean"}, 
				{"name": "turnTime", "type": "Integer"}, 
				{"name": "totalResponses", "type": "Integer"}
			],
			"description": "Add a gun to the gun manager. The manager will take care of turning it around to attack units. Turntime is how often the weapon can turn (default 10 seconds), Total Responses is how many times he will adjust before stopping."
		}, 
		{
			"name": "TeamWeapon_RemoveDirections",
			"returnType": "Void",
			"parameters": [
				{"name": "gun", "type": "SGroupID/EGroupID/SyncWeaponID"}
			],
			"description": "Remove's the direction settings for a gun, turning it into a fire-at-anything type."
		}, 
		{
			"name": "TeamWeapon_RemoveGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "gun", "type": "SGroupID/EGroupID/SyncWeaponID"}
			],
			"description": "Remove a gun from the gun manager."
		}, 
		{
			"name": "ThreatArrow_Add",
			"returnType": "Void",
			"parameters": [
				{"name": "GroupID", "type": "Integer"}, 
				{"name": "Threat", "type": "entity/squad/egroup/sgroup/position/marker"}, 
				{"name": "icon", "type": "String"}
			],
			"description": "Adds a threat to an existing group."
		}, 
		{
			"name": "ThreatArrow_CreateGroup",
			"returnType": "Integer",
			"parameters": [
				{"name": "list:threats", "type": "variable argument"}
			],
			"description": "Creates a group of threats that are represented by a single arrow. Threats can be entities, squads, egroups, sgroups, positions or markers."
		}, 
		{
			"name": "ThreatArrow_DestroyAllGroups",
			"returnType": "Void",
			"parameters": [
			],
			"description": "Destroy all threat groups."
		}, 
		{
			"name": "ThreatArrow_DestroyGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "GroupID", "type": "Integer"}
			],
			"description": "Destroy a threat group."
		}, 
		{
			"name": "ThreatArrow_Remove",
			"returnType": "Void",
			"parameters": [
				{"name": "GroupID", "type": "Integer"}, 
				{"name": "Threat", "type": "entity/squad/egroup/sgroup/position/marker"}
			],
			"description": "Removes a threat from an existing group."
		}, 
		{
			"name": "Timer_Add",
			"returnType": "Void",
			"parameters": [
				{"name": "timerID", "type": "Integer"}, 
				{"name": "period", "type": "Real"}
			],
			"description": "Add the amount of time to the specified timer."
		}, 
		{
			"name": "Timer_Advance",
			"returnType": "Void",
			"parameters": [
				{"name": "timerID", "type": "Integer"}, 
				{"name": "period", "type": "Real"}
			],
			"description": "Advances the timer by the specified amount of time."
		}, 
		{
			"name": "Timer_Display",
			"returnType": "Void",
			"parameters": [
				{"name": "timerID", "type": "Integer"}
			],
			"description": "Display (in the console) the amount of time remaining in the specified timer."
		}, 
		{
			"name": "Timer_DisplayOnScreen",
			"returnType": "Void",
			"parameters": [
				{"name": "timerID", "type": "Integer"}
			],
			"description": "Displays a timer on the screen - You need to call this regularly (i.e. every second) to update the onscreen display. THIS IS A TEMPORARY FUNCTION - WELL GET PROPER UI SUPPORT LATER ON."
		}, 
		{
			"name": "Timer_End",
			"returnType": "Void",
			"parameters": [
				{"name": "timerID", "type": "Integer"}
			],
			"description": "Stop the specified timer."
		}, 
		{
			"name": "Timer_Exists",
			"returnType": "Boolean",
			"parameters": [
				{"name": "timerID", "type": "Integer"}
			],
			"description": "Returns whether the timer with this ID exists."
		}, 
		{
			"name": "Timer_GetElapsed",
			"returnType": "Real",
			"parameters": [
				{"name": "timerID", "type": "Integer"}
			],
			"description": "Returns how much time has elapsed since this timer has been started."
		}, 
		{
			"name": "Timer_GetMinutesAndSeconds",
			"returnType": "s",
			"parameters": [
				{"name": "getTimeFunction", "type": "Luafunction"}, 
				{"name": "TimerID", "type": "Integer"}
			],
			"description": "Returns TWO values: minutes and seconds. Provide it a function like Timer_GetRemaining or Timer_GetElapsed."
		}, 
		{
			"name": "Timer_GetRemaining",
			"returnType": "Real",
			"parameters": [
				{"name": "timerID", "type": "Integer"}
			],
			"description": "Get the remaining time for the specified timer."
		}, 
		{
			"name": "Timer_IsPaused",
			"returnType": "Boolean",
			"parameters": [
				{"name": "timerID", "type": "Integer"}
			],
			"description": "Check if the timer is paused."
		}, 
		{
			"name": "Timer_Pause",
			"returnType": "Void",
			"parameters": [
				{"name": "timerID", "type": "Integer"}
			],
			"description": "Pause the specified timer."
		}, 
		{
			"name": "Timer_Resume",
			"returnType": "Void",
			"parameters": [
				{"name": "timerID", "type": "Integer"}
			],
			"description": "Resume the specified timer."
		}, 
		{
			"name": "Timer_Start",
			"returnType": "Void",
			"parameters": [
				{"name": "timerID", "type": "Integer"}, 
				{"name": "period", "type": "Real"}
			],
			"description": "Start a timer with the specified id, taking the required period ( in seconds )"
		}, 
		{
			"name": "TimeRule_Add",
			"returnType": "void",
			"parameters": [
				{"name": "f", "type": "LuaConfig::RefFunction"}, 
				{"name": "priority", "type": "int"}
			],
			"description": "Add a rule to be executed every frame."
		}, 
		{
			"name": "TimeRule_AddInterval",
			"returnType": "void",
			"parameters": [
				{"name": "f", "type": "LuaConfig::RefFunction"}, 
				{"name": "interval", "type": "float"}, 
				{"name": "priority", "type": "int"}
			],
			"description": "Add a rule to be executed at every 'interval' seconds."
		}, 
		{
			"name": "TimeRule_AddIntervalEx",
			"returnType": "void",
			"parameters": [
				{"name": "f", "type": "LuaConfig::RefFunction"}, 
				{"name": "delay", "type": "float"}, 
				{"name": "interval", "type": "float"}, 
				{"name": "calls", "type": "int"}, 
				{"name": "priority", "type": "int"}
			],
			"description": "Add a rule to be executed 'calls' times, at every 'interval' seconds."
		}, 
		{
			"name": "TimeRule_AddOneShot",
			"returnType": "void",
			"parameters": [
				{"name": "f", "type": "LuaConfig::RefFunction"}, 
				{"name": "interval", "type": "float"}, 
				{"name": "priority", "type": "int"}
			],
			"description": "Add a rule to be executed once, after 'interval' seconds."
		}, 
		{
			"name": "TimeRule_ChangeInterval",
			"returnType": "void",
			"parameters": [
				{"name": "f", "type": "LuaConfig::RefFunction"}, 
				{"name": "interval", "type": "float"}
			],
			"description": "Change 'interval' seconds of an existing rule."
		}, 
		{
			"name": "TimeRule_Exists",
			"returnType": "bool",
			"parameters": [
				{"name": "f", "type": "LuaConfig::RefFunction"}
			],
			"description": "Test if a rule is currently active."
		}, 
		{
			"name": "TimeRule_Remove",
			"returnType": "void",
			"parameters": [
				{"name": "f", "type": "LuaConfig::RefFunction"}
			],
			"description": "Remove a currently active rule."
		}, 
		{
			"name": "TimeRule_RemoveAll",
			"returnType": "void",
			"parameters": [
				{"name": "maxpriority", "type": "int"}
			],
			"description": "Kills all rules."
		}, 
		{
			"name": "TimeRule_RemoveMe",
			"returnType": "void",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Remove a currently executing rule (only works inside a rule function)"
		}, 
		{
			"name": "TimeRule_Replace",
			"returnType": "void",
			"parameters": [
				{"name": "oldf", "type": "LuaConfig::RefFunction"}, 
				{"name": "newf", "type": "LuaConfig::RefFunction"}
			],
			"description": "the old reference function with a new one"
		}, 
		{
			"name": "ToW_SetStandardResources",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "overrideData", "type": "Table"}
			],
			"description": "Set a player to have standard starting resources, or use optional override data."
		}, 
		{
			"name": "ToW_SetUpTechTreeByYear",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "year", "type": "Int"}
			],
			"description": "Restricts a given player's tech tree to just the units that were available in a specific year."
		}, 
		{
			"name": "UI_AddHintAndFlashAbility",
			"returnType": "Void",
			"parameters": [
				{"name": "playerid", "type": "PlayerID"}, 
				{"name": "abilityID", "type": "AbilityID"}, 
				{"name": "text", "type": "LocString"}, 
				{"name": "length", "type": "Integer"}, 
				{"name": "blueprint_filter", "type": "Table/Blueprint"}
			],
			"description": "Creates and flashes an ability button on the taskbar if the unit is selected."
		}, 
		{
			"name": "UI_CreateEventCue",
			"returnType": "ID",
			"parameters": [
				{"name": "iconPath", "type": "String"}, 
				{"name": "soundPath", "type": "String"}, 
				{"name": "title", "type": "LocString"}, 
				{"name": "description", "type": "LocString"}, 
				{"name": "lifetime", "type": "Float"}, 
				{"name": "dismissOnClick", "type": "Boolean"}
			],
			"description": "Creates an event cue without a callback (you won't know when it's clicked)"
		}, 
		{
			"name": "UI_CreateMinimapBlip",
			"returnType": "blipID",
			"parameters": [
				{"name": "where", "type": "StackVar"}, 
				{"name": "lifetime", "type": "Real"}, 
				{"name": "blipType", "type": "Integer"}
			],
			"description": "Creates a blip on the minimap; return the ID of the blip."
		}, 
		{
			"name": "UI_CreateSGroupKickerMessage",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "sgroup", "type": "SGroup"}, 
				{"name": "message", "type": "LocString"}
			],
			"description": "Create a custom kicker message on the squad and display to the player."
		}, 
		{
			"name": "UI_DeleteMinimapBlip",
			"returnType": "Void",
			"parameters": [
				{"name": "blipID", "type": "Integer"}
			],
			"description": "Removes a blip already created on the minimap."
		}, 
		{
			"name": "UI_EnableEntityDecorator",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "enabled", "type": "bool"}
			],
			"description": "Turn on or off entity decorator. The default is decorator enabled."
		}, 
		{
			"name": "UI_EnableEntityMinimapIndicator",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "enabled", "type": "bool"}
			],
			"description": "Turn on or off entity minimap indicator. The default is enabled."
		}, 
		{
			"name": "UI_EnableEntitySelectionVisuals",
			"returnType": "void",
			"parameters": [
				{"name": "entity", "type": "Entity *"}, 
				{"name": "enabled", "type": "bool"}
			],
			"description": "Turn on or off entity selection visuals. The default is visuals enabled."
		}, 
		{
			"name": "UI_EnableSquadDecorator",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "enabled", "type": "bool"}
			],
			"description": "Turn on or off squad decorator. The default is decorator enabled."
		}, 
		{
			"name": "UI_EnableSquadMinimapIndicator",
			"returnType": "void",
			"parameters": [
				{"name": "squad", "type": "Squad *"}, 
				{"name": "enabled", "type": "bool"}
			],
			"description": "Turn on or off squad minimap indicator. The default is enabled."
		}, 
		{
			"name": "UI_GetAbilityIconName",
			"returnType": "const char *",
			"parameters": [
				{"name": "abilityBag", "type": "ScarAbilityPBG"}
			],
			"description": "Returns the icon name for a given ability."
		}, 
		{
			"name": "UI_HighlightSGroup",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "duration", "type": "Real"}
			],
			"description": "Highlights an SGroup in the UI for the given duration."
		}, 
		{
			"name": "UI_SetAllowLoadAndSave",
			"returnType": "void",
			"parameters": [
				{"name": "allowLoadAndSave", "type": "bool"}
			],
			"description": "Enables or disable load and save features at the pause menu."
		}, 
		{
			"name": "UI_SetSGroupSpecialLevel",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroup"}, 
				{"name": "level", "type": "Int"}
			],
			"description": "Sets a level decorator that's defined in all of the squads squad_ui_ext in the target SGroup."
		}, 
		{
			"name": "Util_AddMouseoverSquadToSGroup",
			"returnType": "SGroupID",
			"parameters": [
				{"name": "clearGroup", "type": "Boolean"}
			],
			"description": "If there's a squad under the mouse cursor, this adds it to a unique SGroup. Return value is the SGroup it was added to, or nil if there was no squad under the mouse cursor. Pass in true for 'clearGroup' to clear the sgroup before adding the squad."
		}, 
		{
			"name": "Util_ApplyModifier",
			"returnType": "ModID",
			"parameters": [
				{"name": "groupid", "type": "SGroupID/EGroupID/Player"}, 
				{"name": "modifier", "type": "String"}, 
				{"name": "scalefactor", "type": "Real"}, 
				{"name": "mathtype", "type": "Real"}, 
				{"name": "applytype", "type": "Real"}, 
				{"name": "exclusive", "type": "Bool"}, 
				{"name": "targetname", "type": "String"}
			],
			"description": "Applies any modifier to the target SGroup, EGroup, or Player."
		}, 
		{
			"name": "Util_AutoAmbient",
			"returnType": "Void",
			"parameters": [
				{"name": "intelEventTable", "type": "Table"}
			],
			"description": "Auto-generate an Ambient Event. These are Low priority, and will hopefully interrupt nothing."
		}, 
		{
			"name": "Util_AutoIntel",
			"returnType": "Void",
			"parameters": [
				{"name": "intelEventTable", "type": "Table"}
			],
			"description": "Auto-generate an Intel Event. These are medium priority, and will interrupt ambient, but not an NIS."
		}, 
		{
			"name": "Util_AutoNISlet",
			"returnType": "Void",
			"parameters": [
				{"name": "nisletType", "type": "Integer"}, 
				{"name": "intelEventTable", "type": "Table"}, 
				{"name": "bFOWvisible", "type": "boolean"}
			],
			"description": "Auto-generate an NISlet Event, a simple NIS meant to convey mission location. These are high priority, and will interrupt ambient and Intel Events."
		}, 
		{
			"name": "Util_Autosave",
			"returnType": "void",
			"parameters": [
				{"name": "checkpoint", "type": "LocString"}, 
				{"name": "delay", "type": "Float"}, 
				{"name": "noFade", "type": "Boolean"}
			],
			"description": "Automatically save the game for the player. The savegame name is built using the abbreviated mission name + checkpoint."
		}, 
		{
			"name": "Util_ClearWrecksFromMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "position", "type": "MarkerID/Pos/SectorID"}, 
				{"name": "range", "type": "Real"}, 
				{"name": "wrecksList", "type": "Table"}
			],
			"description": "Clears vehicle wrecks from a given area."
		}, 
		{
			"name": "Util_DespawnAll",
			"returnType": "Void",
			"parameters": [
				{"name": "despawn", "type": "Boolean"}, 
				{"name": "playerNum", "type": "Boolean allPlayers or Int"}, 
				{"name": "egroups", "type": "Boolean"}
			],
			"description": "ReSpawns or DeSpawns sgroups (and egroups) for all players or the indicated player."
		}, 
		{
			"name": "Util_DifVar",
			"returnType": "Variable",
			"parameters": [
				{"name": "difficultyVariables", "type": "Table"}, 
				{"name": "difficulty", "type": "Integer"}
			],
			"description": "Takes in a table and chooses the right variable for the difficulty setting. 1-4 elements. Acquires current difficulty by default."
		}, 
		{
			"name": "Util_ElementCanSee",
			"returnType": "Boolean",
			"parameters": [
				{"name": "teamID", "type": "PlayerID/TeamID playerID/"}, 
				{"name": "element", "type": "SGroupID/EGroupID/EntityID/SquadID/MarkerID/Position"}, 
				{"name": "ALL", "type": "any"}
			],
			"description": "Returns true if a Player/Team can see any or all of an SGroup/Squad/EGroup/Entity/Position/Marker."
		}, 
		{
			"name": "Util_EntityLimit",
			"returnType": "Boolean",
			"parameters": [
				{"name": "entityLimit", "type": "Integer"}
			],
			"description": "Checks the entity count for the world and returns true or false depending on the result. A specific value can be passed in to override the default amount."
		}, 
		{
			"name": "Util_FallBackToGarrisonBuilding",
			"returnType": "EntityID",
			"parameters": [
				{"name": "sgroupid", "type": "SGroupID"}, 
				{"name": "radius", "type": "Int"}
			],
			"description": "Try to garrison a loadable building within radius that is closer to the first squad of the sgroup than enemy."
		}, 
		{
			"name": "Util_FindHiddenItem",
			"returnType": "Position EGroup Entity SGroup Squad",
			"parameters": [
				{"name": "items", "type": "Position/EGroup/Entity/SGroup/Squad"}
			],
			"description": "Finds a hidden position based on what the local player can and can't see."
		}, 
		{
			"name": "Util_FindHiddenSpawn",
			"returnType": "Position",
			"parameters": [
				{"name": "origin", "type": "Position"}, 
				{"name": "destination", "type": "Position"}
			],
			"description": "Finds a hidden position within the FOW between two given points."
		}, 
		{
			"name": "Util_ForceRetreatAll",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroup", "type": "SGroup"}, 
				{"name": "marker", "type": "Marker"}, 
				{"name": "Marker", "type": "any"}, 
				{"name": "deleteAtMarker", "type": "any"}, 
				{"name": "aiEncounterDisable", "type": "Bool/AIEncounter"}
			],
			"description": "Forces all squads given to retreat, regardless of whether they are on team weapons or not. Disables aiEncounters input (true disables all encounters)."
		}, 
		{
			"name": "Util_GarrisonNearbyBuilding",
			"returnType": "EntityID",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "pos", "type": "Position"}, 
				{"name": "radius", "type": "Real"}, 
				{"name": "occupied", "type": "Boolean"}, 
				{"name": "filter", "type": "SGroup/Table"}
			],
			"description": "Finds a nearby building to garrison. can ignore occupied [friendly] buildings. return ID of entity it found, or nil if not found."
		}, 
		{
			"name": "Util_GarrisonNearbyVehicle",
			"returnType": "SquadID",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "pos", "type": "Position"}, 
				{"name": "radius", "type": "Real"}, 
				{"name": "occupied", "type": "Boolean"}, 
				{"name": "filter", "type": "SGroup/Table"}
			],
			"description": "Finds a nearby vehicle to garrison. can ignore occupied [friendly] vehicles. return ID of vehicle it found, or nil if not found,."
		}, 
		{
			"name": "Util_GetClosestMarker",
			"returnType": "MarkerID",
			"parameters": [
				{"name": "var", "type": "Variable"}, 
				{"name": "markers", "type": "Table"}
			],
			"description": "Returns the closest MarkerID to the entity/marker/pos/egroup/sgroup/squad from the table of markers provided."
		}, 
		{
			"name": "Util_GetEntitiesByBP",
			"returnType": "Void",
			"parameters": [
				{"name": "sourcegroup", "type": "EGroupID"}, 
				{"name": "destgroup", "type": "EGroupID"}, 
				{"name": "ebp", "type": "EntityBlueprint"}
			],
			"description": "Find all the entities with a given blueprint in sourcegroup and add them to destgroup."
		}, 
		{
			"name": "Util_GetHealth",
			"returnType": "Percentage",
			"parameters": [
				{"name": "var", "type": "Squad/Entity/Sgroup/Egroup"}
			],
			"description": "Determines the health percentage of a given object."
		}, 
		{
			"name": "Util_GetMouseoverSGroup",
			"returnType": "Void",
			"parameters": [
			],
			"description": "Returns a unique SGroup used to hold mouseover squads obtained from Util_AddMouseoverSquadToSGroup."
		}, 
		{
			"name": "Util_GetPosition",
			"returnType": "Position",
			"parameters": [
				{"name": "var", "type": "Variable"}
			],
			"description": "Returns a position from entity/marker/pos/egroup/sgroup/squad."
		}, 
		{
			"name": "Util_GetPositionAwayFromPlayer",
			"returnType": "Position",
			"parameters": [
				{"name": "pos", "type": "MarkerID/Pos/EGroupID/SGroupID"}, 
				{"name": "player", "type": "PlayerID"}, 
				{"name": "searchRadius", "type": "Integer"}, 
				{"name": "distance", "type": "Integer"}
			],
			"description": "Returns a random position within an area that is not near a player."
		}, 
		{
			"name": "Util_GetPositionFromAtoB",
			"returnType": "Position",
			"parameters": [
				{"name": "a", "type": "MarkerID/Pos"}, 
				{"name": "b", "type": "MarkerID/Pos"}, 
				{"name": "distance", "type": "Real"}
			],
			"description": "Returns a position that is distance metres from point A, headed in the direction of point B."
		}, 
		{
			"name": "Util_GetRandomHiddenPosition",
			"returnType": "Position EGroup Entity SGroup Squad",
			"parameters": [
				{"name": "items", "type": "Position/EGroup/Entity/SGroup/Squad"}
			],
			"description": "Finds a hidden position based on what the local player can and can't see."
		}, 
		{
			"name": "Util_GetRandomPosition",
			"returnType": "Pos",
			"parameters": [
				{"name": "ScarPos", "type": "MarkerID/"}, 
				{"name": "range", "type": "Real"}, 
				{"name": "hidden", "type": "Boolean"}
			],
			"description": "Returns a random position either within the marker's proximity or with a pos and range provided. Range is ignored for rectangular markers."
		}, 
		{
			"name": "Util_GetSquadsByBP",
			"returnType": "Void",
			"parameters": [
				{"name": "sourcegroup", "type": "SGroupID"}, 
				{"name": "destgroup", "type": "SGroupID"}, 
				{"name": "sbp", "type": "SquadBlueprint"}
			],
			"description": "Find all the squads with a given blueprint in sourcegroup and add them to destgroup."
		}, 
		{
			"name": "Util_GetTrailingNumber",
			"returnType": "Number",
			"parameters": [
				{"name": "val", "type": "String"}
			],
			"description": "Returns trailing numbers from a string, if it exists, nil otherwise. E.G. \"marker23\" would return 23."
		}, 
		{
			"name": "Util_Grab",
			"returnType": "Sgroup Egroup",
			"parameters": [
				{"name": "subselect", "type": "Boolean"}
			],
			"description": "Grabs the selected squads/entities and returns them in a group. Only works with -dev."
		}, 
		{
			"name": "Util_HasPosition",
			"returnType": "Boolean",
			"parameters": [
				{"name": "var", "type": "Variable"}
			],
			"description": "Returns true if given entity/marker/pos/egroup/sgroup/squad has a position; if false, Util_GetPosition will fail."
		}, 
		{
			"name": "Util_HidePlayerForNIS",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "hide", "type": "Bool"}
			],
			"description": "Hides all of a player's squads and/or buildings."
		}, 
		{
			"name": "Util_IsSequenceSkipped",
			"returnType": "bool",
			"parameters": [
			],
			"description": "Returns whether the currently running sequence has been skipped."
		}, 
		{
			"name": "Util_Kill",
			"returnType": "Void",
			"parameters": [
				{"name": "var", "type": "Player/Squad/Entity/Sgroup/Egroup"}
			],
			"description": "Kills a given object."
		}, 
		{
			"name": "Util_LogSyncWpn",
			"returnType": "Void",
			"parameters": [
				{"name": "syncweapon", "type": "SGroupID"}, 
				{"name": "kill", "type": "Boolean"}
			],
			"description": "Tracks a syncweapon ID and destroys it (by default) or makes it uncapturable (if kill is set to false)"
		}, 
		{
			"name": "Util_MarkerFX",
			"returnType": "void",
			"parameters": [
				{"name": "markername", "type": "String"}, 
				{"name": "eventfile", "type": "String"}
			],
			"description": "Play an events file at a given markers location."
		}, 
		{
			"name": "Util_MissionTitle",
			"returnType": "Void",
			"parameters": [
				{"name": "title", "type": "LocString"}, 
				{"name": "time_fade_in", "type": "Int"}, 
				{"name": "lifetime", "type": "Int"}, 
				{"name": "time_fade_out", "type": "Int"}
			],
			"description": "Play the mission title fade."
		}, 
		{
			"name": "Util_MuteAmbientSound",
			"returnType": "Void",
			"parameters": [
				{"name": "enable", "type": "Boolean"}, 
				{"name": "fade", "type": "Real"}
			],
			"description": "Enabling this function will mute the ambient sound (NOT all sound)."
		}, 
		{
			"name": "Util_NewHUDFeatureEvent",
			"returnType": "void",
			"parameters": [
				{"name": "newHUDFeature", "type": "HUDFeatureType"}, 
				{"name": "featureText", "type": "LocString"}, 
				{"name": "featureIcon", "type": "String"}, 
				{"name": "duration", "type": "Real"}
			],
			"description": "Calls UI_NewHUDFeature() as an IntelEvent. Will get queued as any other event. See UI_NewHUDFeature() for parameter details."
		}, 
		{
			"name": "Util_PlayMovie",
			"returnType": "Void",
			"parameters": [
				{"name": "name", "type": "String"}, 
				{"name": "fadeOut", "type": "Integer"}, 
				{"name": "fadeIn", "type": "Integer"}, 
				{"name": "onComplete", "type": "LuaFunction"}, 
				{"name": "delay", "type": "Integer"}, 
				{"name": "onCompleteAfterMovie", "type": "Boolean"}
			],
			"description": "Play a movie."
		}, 
		{
			"name": "Util_PlayMusic",
			"returnType": "Void",
			"parameters": [
				{"name": "name", "type": "String"}, 
				{"name": "fade", "type": "Real"}, 
				{"name": "delay", "type": "Real"}
			],
			"description": "Plays music from the Data:Sound folder, and stores the music track so it can be resumed after a save/load  The new music will phase out the old one. There can only be one music playing at anytime besides the transition fade is the time to fade in the music; delay is the time in seconds to wait until the new music is started. Example: Sound_PlayMusic( \"Music/GreatMusic\", 0.0, 0.0 )"
		}, 
		{
			"name": "Util_PrintObject",
			"returnType": "Void",
			"parameters": [
				{"name": "obj", "type": "Object"}, 
				{"name": "max_depth", "type": "Int"}, 
				{"name": "data_type", "type": "String"}, 
				{"name": "print_func", "type": "Function"}
			],
			"description": "Prints out the entire contents of an Object."
		}, 
		{
			"name": "Util_ReinforceEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "sgroupName", "type": "SGroupID"}, 
				{"name": "custumTitle", "type": "LocID"}, 
				{"name": "customDescript", "type": "LocID"}
			],
			"description": "Creates an Event Cue for an SGroup and repeats it until the SGroup is killed or selected."
		}, 
		{
			"name": "Util_ReloadScript",
			"returnType": "Void",
			"parameters": [
			],
			"description": "Reloads the running scar script. Current running rules would also be updated to the redefined functioin."
		}, 
		{
			"name": "Util_RestoreMusic",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "any"}
			],
			"description": "Resumes playing the music track that was last triggered i.e. after a save/load."
		}, 
		{
			"name": "Util_SetPlayerCanSkipSequence",
			"returnType": "Void",
			"parameters": [
				{"name": "event", "type": "LuaFunction"}, 
				{"name": "skippedCallback", "type": "LuaFunction"}, 
				{"name": "noFadeIn", "type": "bool"}, 
				{"name": "fadeInTime", "type": "int"}
			],
			"description": "Sets it so that a player can skip a scripted sequence. When the skip key is pressed, calls back the given function as a post-sequence setup. noFadeIn stops the system from fading back into gameplay when finished. Call Util_SetPlayerUnableToSkipSequence() when the sequence is finished to disable."
		}, 
		{
			"name": "Util_SetPlayerUnableToSkipSequence",
			"returnType": "Void",
			"parameters": [
				{"name": "event", "type": "LuaFunction"}, 
				{"name": "skippedCallback", "type": "LuaFunction"}, 
				{"name": "noFadeIn", "type": "bool"}
			],
			"description": "Disables Util_SetPlayerCanSkipSequence."
		}, 
		{
			"name": "Util_SortPositionsByClosest",
			"returnType": "Table",
			"parameters": [
				{"name": "origin", "type": "SGroupID/EGroupID/EntityID/SquadID/MarkerID/Position"}, 
				{"name": "positions", "type": "Table"}, 
				{"name": "reverse", "type": "any"}
			],
			"description": "Returns a table of positions sorted from closest to furthest (or furthes to closest if reverse is true) from the origin."
		}, 
		{
			"name": "Util_StartAmbient",
			"returnType": "Void",
			"parameters": [
				{"name": "func", "type": "LuaFunction"}
			],
			"description": "Play a Speech Ambient. These are the lowest priority, and will be bumped by Intel Events or NIS's."
		}, 
		{
			"name": "Util_StartIntel",
			"returnType": "Void",
			"parameters": [
				{"name": "func", "type": "LuaFunction"}
			],
			"description": "Play an Intel Event. These are medium priority, and will interrupt a ambient, but not an NIS."
		}, 
		{
			"name": "Util_StartNislet",
			"returnType": "Void",
			"parameters": [
				{"name": "event", "type": "LuaFunction"}, 
				{"name": "skippedCallback", "type": "LuaFunction"}, 
				{"name": "noFadeIn", "type": "bool"}, 
				{"name": "fadeInTime", "type": "int"}
			],
			"description": "Play Nislet Event. Starts a Nislet event, and calls back a function for post-nislet setup if the Nislet is skipped. noFadeIn stops the system from fading back into gameplay when the player skips."
		}, 
		{
			"name": "Util_StartQuickIntel",
			"returnType": "Void",
			"parameters": [
				{"name": "actor", "type": "String"}, 
				{"name": "speech", "type": "LocString"}
			],
			"description": "Play a quick, one-line Intel event. These are medium priority, and will interrupt ambient, but not an NIS."
		}, 
		{
			"name": "Util_TableContains",
			"returnType": "Boolean",
			"parameters": [
				{"name": "targetTable", "type": "Table"}, 
				{"name": "obj", "type": "Object"}
			],
			"description": "Checks the first layer of a table and looks for a specified Object, returns true if found."
		}, 
		{
			"name": "Util_ToggleAllowIntelEvents",
			"returnType": "void",
			"parameters": [
			],
			"description": "Debug function used to toggle whether or not IntelEvents are played. Only works with -dev parameter."
		}, 
		{
			"name": "Util_TriggerEvent",
			"returnType": "Void",
			"parameters": [
				{"name": "playerid", "type": "PlayerID"}, 
				{"name": "position", "type": "Marker/EGroup/SGroup/ScarPos"}, 
				{"name": "range", "type": "Int"}, 
				{"name": "func", "type": "LuaFunction"}, 
				{"name": "non_combat", "type": "Boolean"}, 
				{"name": "onscreen_only", "type": "Boolean"}, 
				{"name": "onscreen_duration", "type": "Int"}
			],
			"description": "Library function to trigger NIS event under a certain sets of conditions. NOTE: if checking against a marker DO NOT specify a range. The range of the marker set in the WorldBuilder will be used."
		}, 
		{
			"name": "Util_UnitCounts",
			"returnType": "Lua",
			"parameters": [
				{"name": "player", "type": "Boolean world OR playerID"}
			],
			"description": "Returns a table containing either the total or a specific player's squad count, entity count, and vehicle count."
		}, 
		{
			"name": "WaveManager_CheckWaveIsValid",
			"returnType": "Table",
			"parameters": [
				{"name": "waveManagerTable", "type": "Integer/Table waveManagerTableID/"}, 
				{"name": "waveDataTableID", "type": "Integer"}
			],
			"description": "Returns whether a specified wave table index is valid."
		}, 
		{
			"name": "WaveManager_ClearWaveManager",
			"returnType": "Void",
			"parameters": [
				{"name": "Void", "type": "any"}
			],
			"description": "WARNING! Clears the ENTIRE WaveManager table."
		}, 
		{
			"name": "WaveManager_FinishWave",
			"returnType": "Void",
			"parameters": [
				{"name": "waveManagerTableID", "type": "Integer"}
			],
			"description": "Forces the current wave to end."
		}, 
		{
			"name": "WaveManager_GetActiveEncountersCount",
			"returnType": "Integer",
			"parameters": [
				{"name": "waveManagerTableID", "type": "Integer"}
			],
			"description": "Returns the Total Active Encounters."
		}, 
		{
			"name": "WaveManager_GetAutomation",
			"returnType": "Boolean",
			"parameters": [
				{"name": "waveManagerTableID", "type": "Integer"}
			],
			"description": "Returns whether a Wave Manager Table is automated or not."
		}, 
		{
			"name": "WaveManager_GetCommandSGroup",
			"returnType": "SGroup",
			"parameters": [
				{"name": "waveManagerTableID", "type": "Integer"}
			],
			"description": "Gets a Wave Manager Command SGroup."
		}, 
		{
			"name": "WaveManager_GetCompletionData",
			"returnType": "Table",
			"parameters": [
				{"name": "waveManagerTableID", "type": "Integer"}, 
				{"name": "waveDataTableID", "type": "Integer"}
			],
			"description": "Gets a Wave Manager Completion Data Table."
		}, 
		{
			"name": "WaveManager_GetEventsTable",
			"returnType": "Table",
			"parameters": [
				{"name": "waveManagerTableID", "type": "Integer"}
			],
			"description": "Gets a Wave Manager Event Table."
		}, 
		{
			"name": "WaveManager_GetManagerTable",
			"returnType": "Table",
			"parameters": [
				{"name": "waveManagerTableID", "type": "Integer"}
			],
			"description": "Returns a Wave Manager Table based on the ID."
		}, 
		{
			"name": "WaveManager_GetTotalWaves",
			"returnType": "Integer",
			"parameters": [
				{"name": "waveManagerTableID", "type": "Integer"}
			],
			"description": "Returns the Total Waves."
		}, 
		{
			"name": "WaveManager_GetVehicleSGroup",
			"returnType": "SGroup",
			"parameters": [
				{"name": "waveManagerTableID", "type": "Integer"}
			],
			"description": "Gets a Wave Manager Vehicle SGroup."
		}, 
		{
			"name": "WaveManager_GetWave",
			"returnType": "Integer",
			"parameters": [
				{"name": "waveManagerTableID", "type": "Integer"}
			],
			"description": "Returns the current Wave."
		}, 
		{
			"name": "WaveManager_GetWaveDataTable",
			"returnType": "Table",
			"parameters": [
				{"name": "waveManagerTable", "type": "Integer/Table waveManagerTableID/"}, 
				{"name": "waveDataTableID", "type": "Integer"}
			],
			"description": "Returns a Wave Data Table based off a Manager."
		}, 
		{
			"name": "WaveManager_LastWave",
			"returnType": "Void",
			"parameters": [
				{"name": "waveManagerTableID", "type": "Integer"}, 
				{"name": "finishCurrentWave", "type": "Boolean"}
			],
			"description": "Return to the Previous Wave."
		}, 
		{
			"name": "WaveManager_NextWave",
			"returnType": "Void",
			"parameters": [
				{"name": "waveManagerTableID", "type": "Integer"}, 
				{"name": "finishCurrentWave", "type": "Boolean"}
			],
			"description": "Advance to the Next Wave."
		}, 
		{
			"name": "WaveManager_RemoveWaveManager",
			"returnType": "Void",
			"parameters": [
				{"name": "waveManagerTableID", "type": "Integer"}
			],
			"description": "Removes a Wave Manager Table from the Wave Manager."
		}, 
		{
			"name": "WaveManager_ResetGoals",
			"returnType": "Void",
			"parameters": [
				{"name": "waveManagerTableID", "type": "Integer"}
			],
			"description": "Restarts all goals for the Wave Manager Data Table ."
		}, 
		{
			"name": "WaveManager_SelectSpawns",
			"returnType": "Void",
			"parameters": [
				{"name": "waveManagerTableID", "type": "Integer"}
			],
			"description": "Tells a Wave Manager Table to select spawns."
		}, 
		{
			"name": "WaveManager_SetAutomation",
			"returnType": "Void",
			"parameters": [
				{"name": "waveManagerTableID", "type": "Integer"}, 
				{"name": "automated", "type": "Boolean"}
			],
			"description": "Sets a Wave Manager Table to be automated or not."
		}, 
		{
			"name": "WaveManager_SetCoreWaveManagerData",
			"returnType": "Void",
			"parameters": [
				{"name": "waveManagerTableID", "type": "Integer"}, 
				{"name": "newWaveManagerTable", "type": "Table"}
			],
			"description": "Used to update any portion of the required entries for a Wave Manager Table."
		}, 
		{
			"name": "WaveManager_SetupNewManagerTable",
			"returnType": "Integer",
			"parameters": [
				{"name": "waveManagerTable", "type": "Table"}, 
				{"name": "automated", "type": "Boolean"}
			],
			"description": "Create a new Wave Manager Table and insert it into the manager. Can set the Manager to be automated (Must still be activated)"
		}, 
		{
			"name": "WaveManager_SetWave",
			"returnType": "Void",
			"parameters": [
				{"name": "waveManagerTableID", "type": "Integer"}, 
				{"name": "newWave", "type": "Integer"}, 
				{"name": "finishCurrentWave", "type": "Boolean"}
			],
			"description": "Jump to a specific Wave."
		}, 
		{
			"name": "WaveManager_SpawnWave",
			"returnType": "Void",
			"parameters": [
				{"name": "waveManagerTableID", "type": "Integer"}
			],
			"description": "Tells a Wave Manager Table to spawn the current wave."
		}, 
		{
			"name": "WaveManager_Start",
			"returnType": "Void",
			"parameters": [
				{"name": "waveManagerTableID", "type": "Integer"}
			],
			"description": "Starts the WaveManager if it's automation is enabled."
		}, 
		{
			"name": "WaveManager_UpdateMainGoalData",
			"returnType": "Void",
			"parameters": [
				{"name": "waveManagerTableID", "type": "Integer"}, 
				{"name": "newGoalData", "type": "Table"}, 
				{"name": "waveDataTableID", "type": "Integer"}
			],
			"description": "Sets a Wave Manager Main Goal Data ."
		}, 
		{
			"name": "Weather_SetType",
			"returnType": "void",
			"parameters": [
				{"name": "weatherLevelName", "type": "const char *"}
			],
			"description": "changes the weather state of all objects (options: sunny, lightrain, mediumrain, heavyrain)"
		}, 
		{
			"name": "WinWarning_PublishLoseReminder",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}, 
				{"name": "warningLevel", "type": "long"}
			],
			"description": "Triggers a UI event cue and an audio cue that the player is about to lose the game."
		}, 
		{
			"name": "WinWarning_ScoreDisplayIconAdd",
			"returnType": "void",
			"parameters": [
				{"name": "icon", "type": "const char *"}, 
				{"name": "red", "type": "int"}, 
				{"name": "green", "type": "int"}, 
				{"name": "blue", "type": "int"}, 
				{"name": "alpha", "type": "int"}, 
				{"name": "tooltipName", "type": "LocString"}, 
				{"name": "tooltipHelp", "type": "LocString"}, 
				{"name": "tooltipIcon", "type": "const char *"}
			],
			"description": "Clears the icons for iconographic score cards."
		}, 
		{
			"name": "WinWarning_ScoreDisplayIconsClear",
			"returnType": "void",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Clears the icons for iconographic score cards."
		}, 
		{
			"name": "WinWarning_SetCritical",
			"returnType": "void",
			"parameters": [
				{"name": "team1Critical", "type": "bool"}, 
				{"name": "team2Critical", "type": "bool"}
			],
			"description": "Flash the victory point scores."
		}, 
		{
			"name": "WinWarning_SetMaxTickers",
			"returnType": "void",
			"parameters": [
				{"name": "team1MaxTickers", "type": "int"}, 
				{"name": "team2MaxTickers", "type": "int"}
			],
			"description": "Sets the max victory point scores for the game."
		}, 
		{
			"name": "WinWarning_SetTickers",
			"returnType": "void",
			"parameters": [
				{"name": "team1Tickers", "type": "int"}, 
				{"name": "team2Tickers", "type": "int"}
			],
			"description": "Sets the victory point scores for the game."
		}, 
		{
			"name": "WinWarning_SetToolTip",
			"returnType": "void",
			"parameters": [
				{"name": "teamIndex", "type": "int"}, 
				{"name": "name", "type": "LocString"}, 
				{"name": "help", "type": "LocString"}, 
				{"name": "icon", "type": "const char *"}
			],
			"description": "Sets the tooltip for the victory point score card."
		}, 
		{
			"name": "WinWarning_ShowLoseWarning",
			"returnType": "uint32_t",
			"parameters": [
				{"name": "text", "type": "LocString"}, 
				{"name": "fadeIn", "type": "float"}, 
				{"name": "duration", "type": "float"}, 
				{"name": "fadeOut", "type": "float"}
			],
			"description": ""
		}, 
		{
			"name": "World_AddPilferLockArea",
			"returnType": "void",
			"parameters": [
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "radius", "type": "float"}
			],
			"description": "Add an area where pilferable weapons won't disappear due to timeout."
		}, 
		{
			"name": "World_CleanUpTheDead",
			"returnType": "Void",
			"parameters": [
				{"name": "player", "type": "PlayerID"}
			],
			"description": "Kill off a specific player's dead bodies (enter ALL to clean them all up)"
		}, 
		{
			"name": "World_ClearCasualties",
			"returnType": "void",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "up casualties from the world"
		}, 
		{
			"name": "World_DamageIce",
			"returnType": "void",
			"parameters": [
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "innerRadius", "type": "float"}, 
				{"name": "outerRadius", "type": "float"}, 
				{"name": "innerDamage", "type": "float"}, 
				{"name": "outerDamage", "type": "float"}
			],
			"description": "Damage a circle of ice with a gradient."
		}, 
		{
			"name": "World_DestroyWallsNearMarker",
			"returnType": "void",
			"parameters": [
				{"name": "marker", "type": "ScarMarker"}
			],
			"description": "Destroys walls (entities with a wall_ext) near a marker."
		}, 
		{
			"name": "World_DistanceEGroupToPoint",
			"returnType": "float",
			"parameters": [
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "p1", "type": "ScarPosition"}, 
				{"name": "closest", "type": "bool"}
			],
			"description": "Get the distance between a squad group and a point."
		}, 
		{
			"name": "World_DistancePointToPoint",
			"returnType": "float",
			"parameters": [
				{"name": "p1", "type": "ScarPosition"}, 
				{"name": "p2", "type": "ScarPosition"}
			],
			"description": "Get the distance between two points."
		}, 
		{
			"name": "World_DistanceSGroupToPoint",
			"returnType": "float",
			"parameters": [
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "p1", "type": "ScarPosition"}, 
				{"name": "closest", "type": "bool"}
			],
			"description": "Get the distance between a squad group and a point."
		}, 
		{
			"name": "World_DistanceSquaredPointToPoint",
			"returnType": "float",
			"parameters": [
				{"name": "p1", "type": "ScarPosition"}, 
				{"name": "p2", "type": "ScarPosition"}
			],
			"description": "Get the distance squared between two points."
		}, 
		{
			"name": "World_EnableReplacementObjectForEmptyPlayers",
			"returnType": "void",
			"parameters": [
				{"name": "enable", "type": "bool"}
			],
			"description": "*** You must call this from OnGameSetup, otherwise it's too late *** Determines whether empty players get converted to null resource points."
		}, 
		{
			"name": "World_EnableSharedLineOfSight",
			"returnType": "void",
			"parameters": [
				{"name": "p0", "type": "ModPlayer *"}, 
				{"name": "p1", "type": "ModPlayer *"}, 
				{"name": "enable", "type": "bool"}
			],
			"description": "Enables or disables shared line of sight between these two players."
		}, 
		{
			"name": "World_EndSP",
			"returnType": "void",
			"parameters": [
				{"name": "win", "type": "bool"}
			],
			"description": "Wins/loses a single team mission for the local teams."
		}, 
		{
			"name": "World_GetClosest",
			"returnType": "Variable",
			"parameters": [
				{"name": "var", "type": "Variable"}, 
				{"name": "items", "type": "LuaTable"}
			],
			"description": "Returns the closest object from the table of marker/pos/egroup/sgroup to the closest marker/pos/egroup/sgroup specified."
		}, 
		{
			"name": "World_GetCurrentInteractionStage",
			"returnType": "int",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Returns the current interaction stage (areas painted at this number or lower are currently interactable)"
		}, 
		{
			"name": "World_GetEntitiesNearMarker",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "marker", "type": "ScarMarker"}, 
				{"name": "ownerType", "type": "OwnerType"}
			],
			"description": "Find and add entities near the marker to the egroup."
		}, 
		{
			"name": "World_GetEntitiesNearPoint",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "radius", "type": "float"}, 
				{"name": "ownerType", "type": "OwnerType"}
			],
			"description": "Find and add entities near the point to the egroup."
		}, 
		{
			"name": "World_GetEntitiesWithinTerritorySector",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "sectorID", "type": "size_t"}, 
				{"name": "ownerType", "type": "OwnerType"}
			],
			"description": "Find and add entities within the territory sector to the egroup."
		}, 
		{
			"name": "World_GetEntity",
			"returnType": "Entity *",
			"parameters": [
				{"name": "index", "type": "int"}
			],
			"description": "Returns the UniqueID at given index, use with World_GetNumEntities() to iterate through all the entities in the world."
		}, 
		{
			"name": "World_GetFurthest",
			"returnType": "Variable",
			"parameters": [
				{"name": "var", "type": "Variable"}, 
				{"name": "items", "type": "LuaTable"}
			],
			"description": "Returns the furthest object from the table of marker/pos/egroup/sgroup to the furthest marker/pos/egroup/sgroup specified."
		}, 
		{
			"name": "World_GetGameTime",
			"returnType": "float",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Return the total game time in seconds."
		}, 
		{
			"name": "World_GetHeightAt",
			"returnType": "float",
			"parameters": [
				{"name": "x", "type": "float"}, 
				{"name": "y", "type": "float"}
			],
			"description": "returns the height of ground at 2D pos x,y"
		}, 
		{
			"name": "World_GetHiddenPositionOnPath",
			"returnType": "Position",
			"parameters": [
				{"name": "player", "type": "PlayerID"}, 
				{"name": "origin", "type": "MarkerID/Pos"}, 
				{"name": "destination", "type": "MarkerID/Pos"}, 
				{"name": "checktype", "type": "Integer"}
			],
			"description": "Find a position on a path hidden from view, as close to the destination as possible whilst still satisfying your hidden checktype. Checktype can be either CHECK_IN_FOW, CHECK_OFFCAMERA or CHECK_BOTH."
		}, 
		{
			"name": "World_GetLength",
			"returnType": "float",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Returns the total playable length of the game world (z coordinate)"
		}, 
		{
			"name": "World_GetNearestInteractablePoint",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "position", "type": "ScarPosition"}
			],
			"description": "returns the nearest intractable position to the supplied position"
		}, 
		{
			"name": "World_GetNeutralEntitiesNearMarker",
			"returnType": "int",
			"parameters": [
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "marker", "type": "ScarMarker"}
			],
			"description": "Find and add neutral entities near the marker to the egroup."
		}, 
		{
			"name": "World_GetNeutralEntitiesNearPoint",
			"returnType": "int",
			"parameters": [
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "radius", "type": "float"}
			],
			"description": "Find and add neutral entities near the point to the egroup."
		}, 
		{
			"name": "World_GetNeutralEntitiesWithinTerritorySector",
			"returnType": "int",
			"parameters": [
				{"name": "egroup", "type": "EGroup *"}, 
				{"name": "sectorID", "type": "size_t"}
			],
			"description": "Find and add neutral entities within the territory sector to the egroup."
		}, 
		{
			"name": "World_GetNumEntities",
			"returnType": "int",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Returns the number of spawned entities in the entire world (use sparingly and never at runtime)"
		}, 
		{
			"name": "World_GetNumEntitiesNearPoint",
			"returnType": "int",
			"parameters": [
				{"name": "ebp", "type": "ScarEntityPBG"}, 
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "radius", "type": "float"}
			],
			"description": "Return the number of entities of the same ebp in the sphere volume."
		}, 
		{
			"name": "World_GetNumStrategicPoints",
			"returnType": "int",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Returns the number of strategic points on this map (does not count strat. objectives)"
		}, 
		{
			"name": "World_GetNumVictoryPoints",
			"returnType": "int",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Returns the number of strategic objectives on this map."
		}, 
		{
			"name": "World_GetOffsetPosition",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "position", "type": "ScarPosition"}, 
				{"name": "heading", "type": "ScarPosition"}, 
				{"name": "offset", "type": "int"}, 
				{"name": "distance", "type": "float"}
			],
			"description": "Returns a position that is offset a certain distance from the position/heading passed in. see ScarUtil.scar for explanation of 'offset' parameter."
		}, 
		{
			"name": "World_GetPlayerAt",
			"returnType": "Player *",
			"parameters": [
				{"name": "index", "type": "uint32_t"}
			],
			"description": "Returns the player at a given index, numbers start at one"
		}, 
		{
			"name": "World_GetPlayerCount",
			"returnType": "int",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Return the total number of players in the world."
		}, 
		{
			"name": "World_GetPlayerIndex",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "Player *"}
			],
			"description": "Returns the player index given the Player*"
		}, 
		{
			"name": "World_GetPossibleSquadsBlueprint",
			"returnType": "ScarSquadPBG",
			"parameters": [
				{"name": "racePBG", "type": "ScarRacePBG"}, 
				{"name": "index", "type": "int"}
			],
			"description": "Returns the blueprint of a chosen squad for a race."
		}, 
		{
			"name": "World_GetPossibleSquadsCount",
			"returnType": "int",
			"parameters": [
				{"name": "racePBG", "type": "ScarRacePBG"}
			],
			"description": "Returns the number of types of squads a race can build."
		}, 
		{
			"name": "World_GetRaceBlueprint",
			"returnType": "ScarRacePBG",
			"parameters": [
				{"name": "racename", "type": "const char *"}
			],
			"description": "Returns the race index of a race, given its name (from the ME)."
		}, 
		{
			"name": "World_GetRand",
			"returnType": "int",
			"parameters": [
				{"name": "min", "type": "int"}, 
				{"name": "max", "type": "int"}
			],
			"description": "Returns a random integer with range [min, max]."
		}, 
		{
			"name": "World_GetSpawnablePosition",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "around", "type": "ScarPosition"}, 
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Given any position in the world, this function will return position safe for spawning a given entity."
		}, 
		{
			"name": "World_GetSquadsNearMarker",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "marker", "type": "ScarMarker"}, 
				{"name": "ownerType", "type": "OwnerType"}
			],
			"description": "Find and add squads near the marker to the sgroup."
		}, 
		{
			"name": "World_GetSquadsNearPoint",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "radius", "type": "float"}, 
				{"name": "ownerType", "type": "OwnerType"}
			],
			"description": "Find and add squads near the point to the sgroup."
		}, 
		{
			"name": "World_GetSquadsWithinTerritorySector",
			"returnType": "int",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sgroup", "type": "SGroup *"}, 
				{"name": "sectorID", "type": "size_t"}, 
				{"name": "ownerType", "type": "OwnerType"}
			],
			"description": "Find and add squads within territory sector identified by sector ID."
		}, 
		{
			"name": "World_GetStrategyPoints",
			"returnType": "void",
			"parameters": [
				{"name": "group", "type": "EGroup *"}, 
				{"name": "bIncludeVP", "type": "bool"}
			],
			"description": "Appends all the strategic resource points to an egroup."
		}, 
		{
			"name": "World_GetTeamTerritoryGaps",
			"returnType": "bool",
			"parameters": [
				{"name": "sectorid1", "type": "int"}, 
				{"name": "sectorid2", "type": "int"}, 
				{"name": "results", "type": "LuaBinding::StackVarTable"}
			],
			"description": "Returns one or more sector IDs that would connect two unconnected pieces of territory. return value is through a table (since there can be more than one way to connect territory) - each entry in this table is a table of sector IDs."
		}, 
		{
			"name": "World_GetTeamVictoryTicker",
			"returnType": "int",
			"parameters": [
				{"name": "teamID", "type": "int"}
			],
			"description": "Returns the number of tickets that this team has."
		}, 
		{
			"name": "World_GetTerritorySectorID",
			"returnType": "size_t",
			"parameters": [
				{"name": "pos", "type": "ScarPosition"}
			],
			"description": "Return the sector ID from the position."
		}, 
		{
			"name": "World_GetTerritorySectorPosition",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "sectorID", "type": "int"}
			],
			"description": "Returns the position of a sector based on the capture entity (ex: the fuel point's position)"
		}, 
		{
			"name": "World_GetWidth",
			"returnType": "float",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Returns the total playable width of the game world (x coordinate)"
		}, 
		{
			"name": "World_IncreaseInteractionStage",
			"returnType": "void",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Increases current interaction stage by 1."
		}, 
		{
			"name": "World_IsGameOver",
			"returnType": "bool",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "to document"
		}, 
		{
			"name": "World_IsInSupply",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "const ModPlayer *"}, 
				{"name": "pos", "type": "ScarPosition"}
			],
			"description": "Returns true if position is in-supply for the given player."
		}, 
		{
			"name": "World_IsPointInPlayerTerritory",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "position", "type": "ScarPosition"}
			],
			"description": "Returns true if position if part of the entity territory."
		}, 
		{
			"name": "World_IsReplay",
			"returnType": "bool",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Returns TRUE if the game is currently in a replay state."
		}, 
		{
			"name": "World_IsTerritorySectorOwnedByPlayer",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "sectorID", "type": "size_t"}
			],
			"description": "Find if player has ownership to this territory sector."
		}, 
		{
			"name": "World_IsWinterMap",
			"returnType": "Boolean",
			"parameters": [
			],
			"description": "Returns whether the current map is set in winter. Checks if 'g_isWinterMap' is set to true."
		}, 
		{
			"name": "World_KillAllNeutralEntitesNearMarker",
			"returnType": "Void",
			"parameters": [
				{"name": "marker", "type": "MarkerID"}
			],
			"description": "Kills ALL world entities near a marker."
		}, 
		{
			"name": "World_OwnsEGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "egroup", "type": "EGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns whether ANY or ALL of the entities in the group are owned by the world (i.e. neutral)"
		}, 
		{
			"name": "World_OwnsEntity",
			"returnType": "bool",
			"parameters": [
				{"name": "entity", "type": "Entity *"}
			],
			"description": "Returns true if the squad is owned by the world."
		}, 
		{
			"name": "World_OwnsSGroup",
			"returnType": "Boolean",
			"parameters": [
				{"name": "sgroup", "type": "SGroupID"}, 
				{"name": "all", "type": "Boolean"}
			],
			"description": "Returns whether ANY or ALL of the squads in the group are owned by the world (i.e. neutral)"
		}, 
		{
			"name": "World_OwnsSquad",
			"returnType": "bool",
			"parameters": [
				{"name": "squad", "type": "Squad *"}
			],
			"description": "Returns true if the squad is owned by the world."
		}, 
		{
			"name": "World_PointPointProx",
			"returnType": "bool",
			"parameters": [
				{"name": "p1", "type": "ScarPosition"}, 
				{"name": "p2", "type": "ScarPosition"}, 
				{"name": "prox", "type": "float"}
			],
			"description": "Returns true if two world positions are in proximity to each other."
		}, 
		{
			"name": "World_Pos",
			"returnType": "ScarPosition",
			"parameters": [
				{"name": "x", "type": "float"}, 
				{"name": "y", "type": "float"}, 
				{"name": "z", "type": "float"}
			],
			"description": "Creates a new Position object."
		}, 
		{
			"name": "World_RemoveAllResourcePoints",
			"returnType": "void",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "Removes all resource and strategic points but not entities with a supply ext NOTE: this could eventually be written as - RemoveAllOfType( type ) which would be more flexible."
		}, 
		{
			"name": "World_RemovePilferLockArea",
			"returnType": "void",
			"parameters": [
				{"name": "pos", "type": "ScarPosition"}, 
				{"name": "radius", "type": "float"}
			],
			"description": "Remove a locked pilfering area, must pass the same pos and radius as when the lock area was created."
		}, 
		{
			"name": "World_SetDesignerSupply",
			"returnType": "void",
			"parameters": [
				{"name": "point", "type": "ScarPosition"}, 
				{"name": "bSupply", "type": "bool"}
			],
			"description": "Sets a particular sector in the world as a supply provider (or not)"
		}, 
		{
			"name": "World_SetGameOver",
			"returnType": "void",
			"parameters": [
				{"name": "", "type": "any"}
			],
			"description": "to document"
		}, 
		{
			"name": "World_SetIceHealingRate",
			"returnType": "void",
			"parameters": [
				{"name": "percentPerSecond", "type": "float"}
			],
			"description": "Set what percent ice heals per second (0.05 means 5% per second)"
		}, 
		{
			"name": "World_SetPlayerLose",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}
			],
			"description": "Sets the player to a lose state, with a reason for losing, and kills the player."
		}, 
		{
			"name": "World_SetPlayerWin",
			"returnType": "void",
			"parameters": [
				{"name": "player", "type": "ModPlayer *"}
			],
			"description": "Sets the player and all the members allied to player to a win state, with a reason for winning. Also sets all other players to a lose state, and kills them (if they're not already dead)"
		}, 
		{
			"name": "World_SetSnowHealingRate",
			"returnType": "void",
			"parameters": [
				{"name": "percentPerSecond", "type": "float"}
			],
			"description": "Set what percent snow heals per second (0.05 means 5% per second)"
		}, 
		{
			"name": "World_SetTeamWin",
			"returnType": "void",
			"parameters": [
				{"name": "winningTeam", "type": "int"}
			],
			"description": "Sets every player on a team to a win state, with a reason for winning. Also sets all other players to a lose state, and kills them (if they're not already dead)"
		}, 
		{
			"name": "World_SpawnDemolitionCharge",
			"returnType": "bool",
			"parameters": [
				{"name": "player", "type": "Player *"}, 
				{"name": "pos", "type": "ScarPosition"}
			],
			"description": "spawn a demolitions charge at a position, 'player' is the one that owns the demolitions and can detonate them."
		}, 
		{
			"name": "World_TeamTerritoryPointsConnected",
			"returnType": "bool",
			"parameters": [
				{"name": "team_index", "type": "int"}, 
				{"name": "p1", "type": "ScarPosition"}, 
				{"name": "p2", "type": "ScarPosition"}
			],
			"description": "Returns true if the two points are in the same territory region, and owned by the specified territory team, Returns false otherwise."
		}, 
		{
			"name": "XP1_AddCompanyStrength",
			"returnType": "Void",
			"parameters": [
				{"name": "strength", "type": "Int"}, 
				{"name": "announce", "type": "Bool"}
			],
			"description": "Add to the current Company's strength."
		}, 
		{
			"name": "XP1_CommanderPortrait",
			"returnType": "ActorID",
			"parameters": [
			],
			"description": "Returns the actor ID for the company that is currently active."
		}, 
		{
			"name": "XP1_CompanyDif",
			"returnType": "Variable",
			"parameters": [
				{"name": "companyVariables", "type": "Table"}
			],
			"description": "Takes in a table and chooses the right variable for the current chosen company setting. CD_AIRBORNE, CD_MECHANIZED, CD_SUPPORT, CD_RANGER."
		}, 
		{
			"name": "XP1_ConstructCompanySpeechTable",
			"returnType": "Table",
			"parameters": [
				{"name": "intelEventName", "type": "String"}
			],
			"description": "Util function for constructing the data-table needed by XP1_PlayCompanySpeechLine. It requires a STRICT naming convention of intelEvent functions: <intelEventName>_<companyNAME>. Eg. EVENTS.MissionIntro_AIRBORNE."
		}, 
		{
			"name": "XP1_EncounterCreate",
			"returnType": "Encounter",
			"parameters": [
				{"name": "data", "type": "EncounterData"}, 
				{"name": "spawnNow", "type": "Bool"}, 
				{"name": "spawnStaggered", "type": "Bool"}
			],
			"description": "Wrapper function for creating an encounter. Randomly adds veterancy to enemy units based on XP1 campaign metamap node strength for the mission. If spawnNow is true, spawns specified units immediately."
		}, 
		{
			"name": "XP1_GetActualCompanyStrength",
			"returnType": "Int",
			"parameters": [
			],
			"description": "Return the current Company's Actual strength."
		}, 
		{
			"name": "XP1_GetCommanderDataTable",
			"returnType": "Void",
			"parameters": [
				{"name": "CommanderDivision", "type": "int"}
			],
			"description": "Returns the indicated commander's data table. If nil is passed, will return the current active commander."
		}, 
		{
			"name": "XP1_GetCompanyIcon",
			"returnType": "string",
			"parameters": [
			],
			"description": "Gets the current Company's Icon."
		}, 
		{
			"name": "XP1_GetCompanyLocName",
			"returnType": "Int",
			"parameters": [
			],
			"description": "Gets the current Company's Localized name."
		}, 
		{
			"name": "XP1_GetCompanyStrength",
			"returnType": "Int",
			"parameters": [
			],
			"description": "Return the current Company's strength [0-100]."
		}, 
		{
			"name": "XP1_GetDivision",
			"returnType": "String",
			"parameters": [
			],
			"description": "Gets the current Company (CD_AIRBORNE/CD_MECHANIZED/CD_SUPPORT)."
		}, 
		{
			"name": "XP1_GetDivisionName",
			"returnType": "String",
			"parameters": [
			],
			"description": "Gets the current Company's name."
		}, 
		{
			"name": "XP1_GetMetaSubPhase",
			"returnType": "Int",
			"parameters": [
			],
			"description": "Returns the current metamap subphase (SUBPHASE_EARLY, SUBPHASE_MID, SUBPHASE_LATE)"
		}, 
		{
			"name": "XP1_GetMissionSuccessLevel",
			"returnType": "Int",
			"parameters": [
			],
			"description": "Return the current MissionSuccessLevel [0-100]."
		}, 
		{
			"name": "XP1_GetNodeStrength",
			"returnType": "Int[1, 5]",
			"parameters": [
			],
			"description": "Returns the current node strength."
		}, 
		{
			"name": "XP1_GetNodeStrengthVeterancy",
			"returnType": "Integer",
			"parameters": [
				{"name": "Void", "type": "any"}
			],
			"description": "Randomly return a veterancy rank based on mission node strength, between 0-5."
		}, 
		{
			"name": "XP1_IncrementMissionSuccessLevel",
			"returnType": "Void",
			"parameters": [
				{"name": "amount", "type": "int"}
			],
			"description": "Adjusts the current mission success level by the amount provided (Mission Success Level is an int clamped between 0 and 3)"
		}, 
		{
			"name": "XP1_IsCompanyAvailable",
			"returnType": "Void",
			"parameters": [
				{"name": "isCompanyActive", "type": "bool"}
			],
			"description": "Returns true if there is a company active. Used mainly to check if it's safe to alter stored data."
		}, 
		{
			"name": "XP1_NodeDif",
			"returnType": "Variable",
			"parameters": [
				{"name": "nodeDifficultyVariables", "type": "Table"}
			],
			"description": "Takes in a table and chooses the right variable for the current node strength setting. 1-5 elements."
		}, 
		{
			"name": "XP1_PlayCompanySpeechLine",
			"returnType": "String",
			"parameters": [
				{"name": "commanderLines", "type": "Table"}
			],
			"description": "Plays a line of speech dependant on your current active company."
		}, 
		{
			"name": "XP1_RemoveCompanyStrength",
			"returnType": "Int",
			"parameters": [
				{"name": "newAmount", "type": "UnknownType"}, 
				{"name": "announce", "type": "UnknownType"}
			],
			"description": "Reduce the current Company's strength [0-100]."
		}, 
		{
			"name": "XP1_SetActiveCommander",
			"returnType": "Void",
			"parameters": [
				{"name": "CommanderDivision", "type": "int"}, 
				{"name": "showUIDetails", "type": "bool"}
			],
			"description": "Sets the current commander (CD_AIRBORNE, CD_MECHANIZED, CD_SUPPORT). If nil is passed in, will re-set to the primary commander. Note this should be done behind a fade to black or something."
		}, 
		{
			"name": "XP1_SetActualCompanyStrength",
			"returnType": "Void",
			"parameters": [
				{"name": "strength", "type": "Int"}
			],
			"description": "Set the current Company's Actual strength."
		}, 
		{
			"name": "XP1_SetCompanyStrength",
			"returnType": "Void",
			"parameters": [
				{"name": "strength", "type": "Int"}
			],
			"description": "Set the current Company's strength [0-100]."
		}, 
		{
			"name": "XP1_SetMissionSuccessLevel",
			"returnType": "Void",
			"parameters": [
				{"name": "newValue", "type": "int"}
			],
			"description": "Sets the current mission success level to the amount provided (Mission Success Level is an int clamped between 0 and 100)"
		}, 
		{
			"name": "XP1_ShowResults",
			"returnType": "Void",
			"parameters": [
				{"name": "win", "type": "Bool"}
			],
			"description": "Generates the output file read by XP1."
		}, 
		{
			"name": "XP1_StopCompanyStatTracking",
			"returnType": "Void",
			"parameters": [
			],
			"description": "Stop tracking all real-time changes in Company Strength and Experience."
		}, 
		{
			"name": "UI_GetViewportWidth",
			"returnType": "Float",
			"parameters": [
				{"name": "Void", "type": "any"}
			],
			"description": ""
		}, 
		{
			"name": "UI_GetViewportHeight",
			"returnType": "Float",
			"parameters": [
				{"name": "Void", "type": "any"}
			],
			"description": ""
		}, 
		{
			"name": "UI_ButtonAdd",
			"returnType": "Void",
			"parameters": [
				{"name": "path", "type": "const char*"}, 
				{"name": "name", "type": "const char*"}, 
				{"name": "x", "type": "float"}, 
				{"name": "y", "type": "float"}, 
				{"name": "width", "type": "float"}, 
				{"name": "height", "type": "float"}, 
				{"name": "callback", "type": "const char*"}, 
				{"name": "enabled", "type": "bool"}, 
				{"name": "icon", "type": "const char*"}, 
				{"name": "style", "type": "ButtonIconStyle"}, 
				{"name": "tag", "type": "const char*"}, 
				{"name": "text", "type": "LocString"}
			],
			"description": ""
		}, 
		{
			"name": "UI_ButtonSetCallback",
			"returnType": "Void",
			"parameters": [
				{"name": "path", "type": "const char*"}, 
				{"name": "callback", "type": "const char*"}
			],
			"description": ""
		}, 
		{
			"name": "UI_ButtonSetEnabled",
			"returnType": "Void",
			"parameters": [
				{"name": "path", "type": "const char*"}, 
				{"name": "enabled", "type": "bool"}
			],
			"description": ""
		}, 
		{
			"name": "UI_ButtonSetIcon",
			"returnType": "Void",
			"parameters": [
				{"name": "path", "type": "const char*"}, 
				{"name": "icon", "type": "const char*"}
			],
			"description": ""
		}, 
		{
			"name": "UI_ButtonSetTag",
			"returnType": "Void",
			"parameters": [
				{"name": "path", "type": "const char*"}, 
				{"name": "tag", "type": "const char*"}
			],
			"description": ""
		}, 
		{
			"name": "UI_ButtonSetText",
			"returnType": "Void",
			"parameters": [
				{"name": "path", "type": "const char*"}, 
				{"name": "text", "type": "LocString"}
			],
			"description": ""
		}, 
		{
			"name": "UI_LabelAdd",
			"returnType": "Void",
			"parameters": [
				{"name": "path", "type": "const char*"}, 
				{"name": "name", "type": "const char*"}, 
				{"name": "x", "type": "float"}, 
				{"name": "y", "type": "float"}, 
				{"name": "width", "type": "float"}, 
				{"name": "height", "type": "float"}, 
				{"name": "alignHorizontal", "type": "LabelAlignHorizontal"}, 
				{"name": "alignVertical", "type": "LabelAlignVertical"}, 
				{"name": "bold", "type": "bool"}, 
				{"name": "italic", "type": "bool"}, 
				{"name": "size", "type": "float"}, 
				{"name": "text", "type": "LocString"}
			],
			"description": ""
		}, 
		{
			"name": "UI_LabelSetText",
			"returnType": "Void",
			"parameters": [
				{"name": "path", "type": "const char*"}, 
				{"name": "text", "type": "LocString"}
			],
			"description": ""
		}, 
		{
			"name": "UI_IconAdd",
			"returnType": "Void",
			"parameters": [
				{"name": "path", "type": "const char*"}, 
				{"name": "name", "type": "const char*"}, 
				{"name": "x", "type": "float"}, 
				{"name": "y", "type": "float"}, 
				{"name": "width", "type": "float"}, 
				{"name": "height", "type": "float"}, 
				{"name": "icon", "type": "const char*"}
			],
			"description": ""
		}, 
		{
			"name": "UI_IconSetIcon",
			"returnType": "Void",
			"parameters": [
				{"name": "path", "type": "const char*"}, 
				{"name": "icon", "type": "const char*"}
			],
			"description": ""
		}, 
		{
			"name": "UI_PanelAdd",
			"returnType": "Void",
			"parameters": [
				{"name": "path", "type": "const char*"}, 
				{"name": "name", "type": "const char*"}, 
				{"name": "x", "type": "float"}, 
				{"name": "y", "type": "float"}
			],
			"description": ""
		}, 
		{
			"name": "UI_StatusIndicatorAdd",
			"returnType": "Void",
			"parameters": [
				{"name": "path", "type": "const char*"}, 
				{"name": "name", "type": "const char*"}, 
				{"name": "x", "type": "float"}, 
				{"name": "y", "type": "float"}, 
				{"name": "width", "type": "float"}, 
				{"name": "height", "type": "float"}, 
				{"name": "value", "type": "float"}
			],
			"description": ""
		}, 
		{
			"name": "UI_StatusIndicatorSetValue",
			"returnType": "Void",
			"parameters": [
				{"name": "path", "type": "const char*"}, 
				{"name": "value", "type": "float"}
			],
			"description": ""
		}, 
		{
			"name": "UI_ControlSetColour",
			"returnType": "Void",
			"parameters": [
				{"name": "path", "type": "const char*"}, 
				{"name": "red", "type": "int"}, 
				{"name": "green", "type": "int"}, 
				{"name": "blue", "type": "int"}, 
				{"name": "alpha", "type": "int"}
			],
			"description": ""
		}, 
		{
			"name": "UI_ControlSetPosition",
			"returnType": "Void",
			"parameters": [
				{"name": "path", "type": "const char*"}, 
				{"name": "x", "type": "float"}, 
				{"name": "y", "type": "float"}
			],
			"description": ""
		}, 
		{
			"name": "UI_ControlSetRect",
			"returnType": "Void",
			"parameters": [
				{"name": "path", "type": "const char*"}, 
				{"name": "x", "type": "float"}, 
				{"name": "y", "type": "float"}, 
				{"name": "width", "type": "float"}, 
				{"name": "height", "type": "float"}
			],
			"description": ""
		}, 
		{
			"name": "UI_ControlRemove",
			"returnType": "Void",
			"parameters": [
				{"name": "path", "type": "const char*"}
			],
			"description": ""
		}, 
		{
			"name": "UI_ControlClear",
			"returnType": "Void",
			"parameters": [
				{"name": "path", "type": "const char*"}
			],
			"description": ""
		}
	],
	"enums": [
		{"name": "BS_Defend", "type": "AIBuildStyle"}, 
		{"name": "BS_Secure", "type": "AIBuildStyle"}, 
		{"name": "BS_NearAnchor", "type": "AIBuildStyle"}, 
		{"name": "BS_Mines", "type": "AIBuildStyle"}, 
		{"name": "BS_OuterAnchor", "type": "AIBuildStyle"}, 
		{"name": "COMBAT_Default", "type": "AICombatType"}, 
		{"name": "COMBAT_Defend", "type": "AICombatType"}, 
		{"name": "COMBAT_Attack", "type": "AICombatType"}, 
		{"name": "MTARGET_Attack", "type": "AIMilitaryTargetType"}, 
		{"name": "MTARGET_Defend", "type": "AIMilitaryTargetType"}, 
		{"name": "AITacticTargetPreference_HighDamage", "type": "AITacticTargetPreference"}, 
		{"name": "AITacticTargetPreference_LowHealth", "type": "AITacticTargetPreference"}, 
		{"name": "AITacticTargetPreference_None", "type": "AITacticTargetPreference"}, 
		{"name": "AITacticTargetPreference_Support", "type": "AITacticTargetPreference"}, 
		{"name": "AITacticTargetPreference_Near", "type": "AITacticTargetPreference"}, 
		{"name": "AITacticTargetPreference_NearAndBest", "type": "AITacticTargetPreference"}, 
		{"name": "AITacticTargetPreference_Best", "type": "AITacticTargetPreference"}, 
		{"name": "TACTIC_Ability", "type": "AITacticType"}, 
		{"name": "TACTIC_Pickup", "type": "AITacticType"}, 
		{"name": "TACTIC_ForceAttack", "type": "AITacticType"}, 
		{"name": "TACTIC_Hold", "type": "AITacticType"}, 
		{"name": "TACTIC_Recrew", "type": "AITacticType"}, 
		{"name": "TACTIC_VehicleDecrew", "type": "AITacticType"}, 
		{"name": "TACTIC_Avoid", "type": "AITacticType"}, 
		{"name": "TACTIC_WarmUp", "type": "AITacticType"}, 
		{"name": "TACTIC_MinRange", "type": "AITacticType"}, 
		{"name": "TACTIC_CapturePoint", "type": "AITacticType"}, 
		{"name": "TACTIC_ProvideReinforcementPoint", "type": "AITacticType"}, 
		{"name": "TACTIC_RushAtTarget", "type": "AITacticType"}, 
		{"name": "TACTIC_CaptureTeamWeapon", "type": "AITacticType"}, 
		{"name": "TACTIC_Vehicle", "type": "AITacticType"}, 
		{"name": "TACTIC_Cover", "type": "AITacticType"}, 
		{"name": "TACTIC_FinishHealing", "type": "AITacticType"}, 
		{"name": "TASK_Leader", "type": "AITaskType"}, 
		{"name": "TASK_Production", "type": "AITaskType"}, 
		{"name": "TASK_Construction", "type": "AITaskType"}, 
		{"name": "TASK_Ability", "type": "AITaskType"}, 
		{"name": "TASK_PlayerAbility", "type": "AITaskType"}, 
		{"name": "TASK_Combat", "type": "AITaskType"}, 
		{"name": "TASK_Capture", "type": "AITaskType"}, 
		{"name": "TASK_ImmobileCombat", "type": "AITaskType"}, 
		{"name": "AII_RemoteAITakeover", "type": "AIType"}, 
		{"name": "AII_None", "type": "AIType"}, 
		{"name": "AII_RemoteHumanTakeover", "type": "AIType"}, 
		{"name": "AII_Normal", "type": "AIType"}, 
		{"name": "AII_LocalHumanTakeover", "type": "AIType"}, 
		{"name": "ITEM_REMOVED", "type": "Availability"}, 
		{"name": "ITEM_DEFAULT", "type": "Availability"}, 
		{"name": "ITEM_LOCKED", "type": "Availability"}, 
		{"name": "ITEM_UNLOCKED", "type": "Availability"}, 
		{"name": "BT_AttackHere", "type": "BlipType"}, 
		{"name": "BT_ObjectiveBonus", "type": "BlipType"}, 
		{"name": "BT_SectorArtillery", "type": "BlipType"}, 
		{"name": "BT_Reveal", "type": "BlipType"}, 
		{"name": "BT_Combat", "type": "BlipType"}, 
		{"name": "BT_General", "type": "BlipType"}, 
		{"name": "BT_CaptureHere", "type": "BlipType"}, 
		{"name": "BT_ObjectivePrimary", "type": "BlipType"}, 
		{"name": "BT_DefendHere", "type": "BlipType"}, 
		{"name": "BT_ObjectiveSecondary", "type": "BlipType"}, 
		{"name": "BT_RallyPoint", "type": "BlipType"}, 
		{"name": "BFS_NotOnFire", "type": "BuildingFireState"}, 
		{"name": "BFS_Smoking", "type": "BuildingFireState"}, 
		{"name": "BFS_Burning", "type": "BuildingFireState"}, 
		{"name": "TV_DeclinationEnabled", "type": "CameraTuningValue"}, 
		{"name": "TV_DistMaxDead", "type": "CameraTuningValue"}, 
		{"name": "TV_DistRateMouse", "type": "CameraTuningValue"}, 
		{"name": "TV_NISletDistMin", "type": "CameraTuningValue"}, 
		{"name": "TV_SlideOrbitRate", "type": "CameraTuningValue"}, 
		{"name": "TV_PanScaleKeyboardDefZ", "type": "CameraTuningValue"}, 
		{"name": "TV_PanScaleMouseDefZ", "type": "CameraTuningValue"}, 
		{"name": "TV_SlideDeclThreshold", "type": "CameraTuningValue"}, 
		{"name": "TV_SlideOrbitThreshold", "type": "CameraTuningValue"}, 
		{"name": "TV_NISletDistMinGround", "type": "CameraTuningValue"}, 
		{"name": "TV_ClipNear", "type": "CameraTuningValue"}, 
		{"name": "TV_DeclBelow", "type": "CameraTuningValue"}, 
		{"name": "TV_EntityMinViewAngle", "type": "CameraTuningValue"}, 
		{"name": "TV_NISletDistGroundMin", "type": "CameraTuningValue"}, 
		{"name": "TV_SlideTargetBase", "type": "CameraTuningValue"}, 
		{"name": "TV_PanMaxSpeedScalar", "type": "CameraTuningValue"}, 
		{"name": "TV_PanStartSpeedScalar", "type": "CameraTuningValue"}, 
		{"name": "TV_NISletDeclAbove", "type": "CameraTuningValue"}, 
		{"name": "TV_NISletDistMax", "type": "CameraTuningValue"}, 
		{"name": "TV_ZoomLocked", "type": "CameraTuningValue"}, 
		{"name": "TV_CameraMode", "type": "CameraTuningValue"}, 
		{"name": "TV_NearPlaneShifter", "type": "CameraTuningValue"}, 
		{"name": "TV_DefaultAngle", "type": "CameraTuningValue"}, 
		{"name": "TV_PanScaleKeyboardMinZ", "type": "CameraTuningValue"}, 
		{"name": "TV_PanScaleMouseMinZ", "type": "CameraTuningValue"}, 
		{"name": "TV_DeclBelowClose", "type": "CameraTuningValue"}, 
		{"name": "TV_TrackElastic", "type": "CameraTuningValue"}, 
		{"name": "TV_DistExpWheel", "type": "CameraTuningValue"}, 
		{"name": "TV_DistExpMouse", "type": "CameraTuningValue"}, 
		{"name": "TV_DistRateWheelZoomOut", "type": "CameraTuningValue"}, 
		{"name": "TV_DistMinGround", "type": "CameraTuningValue"}, 
		{"name": "TV_DistGroundTargetHeight", "type": "CameraTuningValue"}, 
		{"name": "TV_DistGroundMin", "type": "CameraTuningValue"}, 
		{"name": "TV_DistScale", "type": "CameraTuningValue"}, 
		{"name": "TV_DistMinDead", "type": "CameraTuningValue"}, 
		{"name": "TV_DistMax", "type": "CameraTuningValue"}, 
		{"name": "TV_SlideDeclBase", "type": "CameraTuningValue"}, 
		{"name": "TV_SlideOrbitBase", "type": "CameraTuningValue"}, 
		{"name": "TV_SlideDistThreshold", "type": "CameraTuningValue"}, 
		{"name": "TV_SlideDistBase", "type": "CameraTuningValue"}, 
		{"name": "TV_SlideTargetThreshold", "type": "CameraTuningValue"}, 
		{"name": "TV_SlideTargetRate", "type": "CameraTuningValue"}, 
		{"name": "TV_DistMin", "type": "CameraTuningValue"}, 
		{"name": "TV_PanScaleScreenDefZ", "type": "CameraTuningValue"}, 
		{"name": "TV_DeclAbove", "type": "CameraTuningValue"}, 
		{"name": "TV_ClipFar", "type": "CameraTuningValue"}, 
		{"name": "TV_PanScaleScreenMinZ", "type": "CameraTuningValue"}, 
		{"name": "TV_DistRateWheelZoomIn", "type": "CameraTuningValue"}, 
		{"name": "TV_SlideDistRate", "type": "CameraTuningValue"}, 
		{"name": "TV_TrackBoundScale", "type": "CameraTuningValue"}, 
		{"name": "TV_DefaultDeclination", "type": "CameraTuningValue"}, 
		{"name": "TV_PanAccelerate", "type": "CameraTuningValue"}, 
		{"name": "TV_DeclRateMouse", "type": "CameraTuningValue"}, 
		{"name": "TV_DistExp", "type": "CameraTuningValue"}, 
		{"name": "TV_DefaultHeight", "type": "CameraTuningValue"}, 
		{"name": "TV_SlideDeclRate", "type": "CameraTuningValue"}, 
		{"name": "TV_RotationEnabled", "type": "CameraTuningValue"}, 
		{"name": "TV_OrbitRateMouse", "type": "CameraTuningValue"}, 
		{"name": "TV_FieldOfView", "type": "CameraTuningValue"}, 
		{"name": "TV_NISletDeclBelow", "type": "CameraTuningValue"}, 
		{"name": "CANPRODUCE_PrerequisitesProducer", "type": "CanProduceResult"}, 
		{"name": "CANPRODUCE_Error", "type": "CanProduceResult"}, 
		{"name": "CANPRODUCE_ProductionQueueFull", "type": "CanProduceResult"}, 
		{"name": "CANPRODUCE_ProductionItemFull", "type": "CanProduceResult"}, 
		{"name": "CANPRODUCE_Disabled", "type": "CanProduceResult"}, 
		{"name": "CANPRODUCE_PrerequisitesItem", "type": "CanProduceResult"}, 
		{"name": "CANPRODUCE_Ok", "type": "CanProduceResult"}, 
		{"name": "CANPRODUCE_OutOfReinforceRadius", "type": "CanProduceResult"}, 
		{"name": "CANPRODUCE_OutOfTerritory", "type": "CanProduceResult"}, 
		{"name": "CANPRODUCE_UpgradeItemFull", "type": "CanProduceResult"}, 
		{"name": "CANPRODUCE_PopulationCapFull", "type": "CanProduceResult"}, 
		{"name": "CANPRODUCE_NoResources", "type": "CanProduceResult"}, 
		{"name": "CANPRODUCE_NoItem", "type": "CanProduceResult"}, 
		{"name": "CT_Medic", "type": "CapType"}, 
		{"name": "CT_Vehicle", "type": "CapType"}, 
		{"name": "CT_Personnel", "type": "CapType"}, 
		{"name": "CHECK_OFFCAMERA", "type": "CheckHiddenType"}, 
		{"name": "CHECK_BOTH", "type": "CheckHiddenType"}, 
		{"name": "CHECK_IN_FOW", "type": "CheckHiddenType"}, 
		{"name": "CT_VehicleEngineRed", "type": "CapType"}, 
		{"name": "CT_VehicleOpticsDamaged", "type": "CapType"}, 
		{"name": "CT_VehicleExhaustDamaged", "type": "CapType"}, 
		{"name": "CT_VehicleDriverInjured", "type": "CapType"}, 
		{"name": "CT_VehicleEngineYellow", "type": "CapType"}, 
		{"name": "CT_VehicleBack", "type": "CapType"}, 
		{"name": "CT_VehicleLeft", "type": "CapType"}, 
		{"name": "CT_VehicleRight", "type": "CapType"}, 
		{"name": "CT_VehicleGunnerInjured", "type": "CapType"}, 
		{"name": "CT_VehicleEngineGreen", "type": "CapType"}, 
		{"name": "CT_VehicleLoseTreadsOrWheels", "type": "CapType"}, 
		{"name": "CT_VehicleOutOfControl", "type": "CapType"}, 
		{"name": "CT_VehicleCrewShocked", "type": "CapType"}, 
		{"name": "CT_VehicleFront", "type": "CapType"}, 
		{"name": "CT_VehicleKillCommander", "type": "CapType"}, 
		{"name": "CT_VehicleEngineBurning", "type": "CapType"}, 
		{"name": "CT_VehicleSecondaryWeapon", "type": "CapType"}, 
		{"name": "CT_VehiclePrimaryWeapon", "type": "CapType"}, 
		{"name": "Crush_Heavy", "type": "CrushMode"}, 
		{"name": "Crush_Off", "type": "CrushMode"}, 
		{"name": "Crush_Medium", "type": "CrushMode"}, 
		{"name": "Crush_Light", "type": "CrushMode"}, 
		{"name": "DEATHREASON_SUBMERGE", "type": "Unknown type"}, 
		{"name": "DEATHREASON_FREEZE", "type": "Unknown type"}, 
		{"name": "DEATHREASON_NORMAL", "type": "Unknown type"}, 
		{"name": "DEATHREASON_DEATH_AS_DRIVER", "type": "Unknown type"}, 
		{"name": "DB_Button3", "type": "DialogButton"}, 
		{"name": "DB_Button1", "type": "DialogButton"}, 
		{"name": "DB_Close", "type": "DialogButton"}, 
		{"name": "DB_Button2", "type": "DialogButton"}, 
		{"name": "DC_Iconographic", "type": "Unknown type"}, 
		{"name": "DC_Default", "type": "Unknown type"}, 
		{"name": "CMD_InstantBuildSquad", "type": "EntityCommandType"}, 
		{"name": "CMD_InstantDeath", "type": "EntityCommandType"}, 
		{"name": "CMD_AttackStop", "type": "EntityCommandType"}, 
		{"name": "CMD_BuildStructure", "type": "EntityCommandType"}, 
		{"name": "CMD_CancelProduction", "type": "EntityCommandType"}, 
		{"name": "CMD_RescueCasualty", "type": "EntityCommandType"}, 
		{"name": "CMD_SetHoldHeading", "type": "EntityCommandType"}, 
		{"name": "CMD_DefuseMine", "type": "EntityCommandType"}, 
		{"name": "CMD_AttackMove", "type": "EntityCommandType"}, 
		{"name": "CMD_Fidget", "type": "EntityCommandType"}, 
		{"name": "CMD_Stop", "type": "EntityCommandType"}, 
		{"name": "CMD_PlaceCharge", "type": "EntityCommandType"}, 
		{"name": "CMD_Destroy", "type": "EntityCommandType"}, 
		{"name": "CMD_Load", "type": "EntityCommandType"}, 
		{"name": "CMD_Ability", "type": "EntityCommandType"}, 
		{"name": "CMD_Unload", "type": "EntityCommandType"}, 
		{"name": "CMD_DefaultAction", "type": "EntityCommandType"}, 
		{"name": "CMD_Move", "type": "EntityCommandType"}, 
		{"name": "CMD_InstantUpgrade", "type": "EntityCommandType"}, 
		{"name": "CMD_UnloadSquads", "type": "EntityCommandType"}, 
		{"name": "CMD_BuildSquad", "type": "EntityCommandType"}, 
		{"name": "CMD_Attack", "type": "EntityCommandType"}, 
		{"name": "CMD_Capture", "type": "EntityCommandType"}, 
		{"name": "CMD_AttackForced", "type": "EntityCommandType"}, 
		{"name": "CMD_Death", "type": "EntityCommandType"}, 
		{"name": "CMD_Face", "type": "EntityCommandType"}, 
		{"name": "CMD_Vault", "type": "EntityCommandType"}, 
		{"name": "CMD_AttackFromHold", "type": "EntityCommandType"}, 
		{"name": "CMD_Halt", "type": "EntityCommandType"}, 
		{"name": "CMD_RallyPoint", "type": "EntityCommandType"}, 
		{"name": "CMD_ChooseResource", "type": "EntityCommandType"}, 
		{"name": "CMD_Casualty", "type": "EntityCommandType"}, 
		{"name": "CMD_Upgrade", "type": "EntityCommandType"}, 
		{"name": "CMD_Evacuate", "type": "EntityCommandType"}, 
		{"name": "CMD_BuildEntity", "type": "EntityCommandType"}, 
		{"name": "CMD_Paradrop", "type": "EntityCommandType"}, 
		{"name": "CMD_Projectile", "type": "EntityCommandType"}, 
		{"name": "STATEID_Capture", "type": "EntityStateID"}, 
		{"name": "STATEID_DefuseMine", "type": "EntityStateID"}, 
		{"name": "STATEID_Idle", "type": "EntityStateID"}, 
		{"name": "STATEID_Evacuate", "type": "EntityStateID"}, 
		{"name": "STATEID_StructureBuilding", "type": "EntityStateID"}, 
		{"name": "STATEID_RepairEngineer", "type": "EntityStateID"}, 
		{"name": "STATEID_Dead", "type": "EntityStateID"}, 
		{"name": "STATEID_Move", "type": "EntityStateID"}, 
		{"name": "GE_MineDefused", "type": "GameEventType"}, 
		{"name": "GE_PlayerWin", "type": "GameEventType"}, 
		{"name": "GE_FieldSupportChange", "type": "GameEventType"}, 
		{"name": "GE_ProjectileFired", "type": "GameEventType"}, 
		{"name": "GE_AIPlayer_Migrated", "type": "GameEventType"}, 
		{"name": "GE_EntityKilled", "type": "GameEventType"}, 
		{"name": "GE_SquadCommandIssued", "type": "GameEventType"}, 
		{"name": "GE_SquadRetreat", "type": "GameEventType"}, 
		{"name": "GE_ImportantUnitSighted", "type": "GameEventType"}, 
		{"name": "GE_SquadElementWaitOrder", "type": "GameEventType"}, 
		{"name": "GE_MoveFailed", "type": "GameEventType"}, 
		{"name": "GE_DriverDecrewed", "type": "GameEventType"}, 
		{"name": "GE_PlayerLagComplaint", "type": "GameEventType"}, 
		{"name": "GE_CasualtySquadSpawned", "type": "GameEventType"}, 
		{"name": "GE_CriticalRepaired", "type": "GameEventType"}, 
		{"name": "GE_AttentionChange", "type": "GameEventType"}, 
		{"name": "GE_TerritoryEntered", "type": "GameEventType"}, 
		{"name": "GE_PlayerCommandIssued", "type": "GameEventType"}, 
		{"name": "GE_DefaultCommandIssued", "type": "GameEventType"}, 
		{"name": "GE_FlankKilled", "type": "GameEventType"}, 
		{"name": "GE_DamageArea", "type": "GameEventType"}, 
		{"name": "GE_ConstructionComplete", "type": "GameEventType"}, 
		{"name": "GE_ItemAvailabilityChanged", "type": "GameEventType"}, 
		{"name": "GE_NonGlobalCamoDetected", "type": "GameEventType"}, 
		{"name": "GE_EntityParadropStart", "type": "GameEventType"}, 
		{"name": "GE_PlayerObjectiveDeleted", "type": "GameEventType"}, 
		{"name": "GE_SquadRetreatMsgReceived", "type": "GameEventType"}, 
		{"name": "GE_SquadPinned", "type": "GameEventType"}, 
		{"name": "GE_SquadCalledIn", "type": "GameEventType"}, 
		{"name": "GE_PlayerKicked", "type": "GameEventType"}, 
		{"name": "GE_SquadFreezing", "type": "GameEventType"}, 
		{"name": "GE_BuildItemComplete", "type": "GameEventType"}, 
		{"name": "GE_SpeechAction", "type": "GameEventType"}, 
		{"name": "GE_SquadBuildCommandIssued", "type": "GameEventType"}, 
		{"name": "GE_AITakeOver", "type": "GameEventType"}, 
		{"name": "GE_GarrisonSquad", "type": "GameEventType"}, 
		{"name": "GE_BoobyTrapTriggered", "type": "GameEventType"}, 
		{"name": "GE_ConstructionStart", "type": "GameEventType"}, 
		{"name": "GE_PlayerNameChanged", "type": "GameEventType"}, 
		{"name": "GE_PlayerKilled", "type": "GameEventType"}, 
		{"name": "GE_EntityAbandoned", "type": "GameEventType"}, 
		{"name": "GE_EntityCommandIssued", "type": "GameEventType"}, 
		{"name": "GE_SquadCold", "type": "GameEventType"}, 
		{"name": "GE_StrategicPointChanged", "type": "GameEventType"}, 
		{"name": "GE_SquadReplaced", "type": "GameEventType"}, 
		{"name": "GE_PlayerDonation", "type": "GameEventType"}, 
		{"name": "GE_SquadVeterancyRank", "type": "GameEventType"}, 
		{"name": "GE_AbilityExecuted", "type": "GameEventType"}, 
		{"name": "GE_UpgradeCancelled", "type": "GameEventType"}, 
		{"name": "GE_PlayerDropped", "type": "GameEventType"}, 
		{"name": "GE_WeaponFire", "type": "GameEventType"}, 
		{"name": "GE_PlayerBeingAttacked", "type": "GameEventType"}, 
		{"name": "GE_PlannedStructureCancelled", "type": "GameEventType"}, 
		{"name": "GE_UpgradeComplete", "type": "GameEventType"}, 
		{"name": "GE_AbilityRecharged", "type": "GameEventType"}, 
		{"name": "GE_EntityCrushed", "type": "GameEventType"}, 
		{"name": "GE_CompleteIntelBulletinTask", "type": "GameEventType"}, 
		{"name": "GE_PlayerSkipNIS", "type": "GameEventType"}, 
		{"name": "GE_AIPlayer_ObjectiveNotification", "type": "GameEventType"}, 
		{"name": "GE_ResourceDepleted", "type": "GameEventType"}, 
		{"name": "GE_UpgradeRemoved", "type": "GameEventType"}, 
		{"name": "GE_EnemyTerritoryEntered", "type": "GameEventType"}, 
		{"name": "GE_PlayerPingOfShame", "type": "GameEventType"}, 
		{"name": "GE_ProjectileLanded", "type": "GameEventType"}, 
		{"name": "GE_PlayerObjectiveChanged", "type": "GameEventType"}, 
		{"name": "GE_CustomUIEvent", "type": "GameEventType"}, 
		{"name": "GE_SquadItemPickup", "type": "GameEventType"}, 
		{"name": "GE_PlayerCommanderSelected", "type": "GameEventType"}, 
		{"name": "GE_SuperAbility", "type": "GameEventType"}, 
		{"name": "GE_SectorOutOfLink", "type": "GameEventType"}, 
		{"name": "GE_ArtilleryFired", "type": "GameEventType"}, 
		{"name": "GE_SquadKilled", "type": "GameEventType"}, 
		{"name": "GE_GameOver", "type": "GameEventType"}, 
		{"name": "GE_LOSMove", "type": "GameEventType"}, 
		{"name": "GE_Garrison", "type": "GameEventType"}, 
		{"name": "GE_SquadMerge", "type": "GameEventType"}, 
		{"name": "GE_PlayerSurrendered", "type": "GameEventType"}, 
		{"name": "GE_PathFound", "type": "GameEventType"}, 
		{"name": "GE_PlayerResourcesAwarded", "type": "GameEventType"}, 
		{"name": "GE_Ping", "type": "GameEventType"}, 
		{"name": "GE_InfoPointActivated", "type": "GameEventType"}, 
		{"name": "GE_ConstructionFenceComplete", "type": "GameEventType"}, 
		{"name": "GE_PlayerLose", "type": "GameEventType"}, 
		{"name": "GE_EntityParadropComplete", "type": "GameEventType"}, 
		{"name": "GE_OccupiedBuildingChangedOwner", "type": "GameEventType"}, 
		{"name": "GE_ConstructionPlanComplete", "type": "GameEventType"}, 
		{"name": "GE_AbilityComplete", "type": "GameEventType"}, 
		{"name": "GE_ReinforcementCreated", "type": "GameEventType"}, 
		{"name": "GE_ConstructionFieldComplete", "type": "GameEventType"}, 
		{"name": "GE_PlayerObjectiveCreated", "type": "GameEventType"}, 
		{"name": "GE_PlayerHostMigrated", "type": "GameEventType"}, 
		{"name": "GE_AccessoryWeaponFired", "type": "GameEventType"}, 
		{"name": "GE_SquadProductionQueue", "type": "GameEventType"}, 
		{"name": "GE_SpawnActionComplete", "type": "GameEventType"}, 
		{"name": "GE_CriticalDamage", "type": "GameEventType"}, 
		{"name": "GE_SquadSplit", "type": "GameEventType"}, 
		{"name": "GE_SectorLinkProviderChanged", "type": "GameEventType"}, 
		{"name": "GE_SquadElementMoveOrder", "type": "GameEventType"}, 
		{"name": "GE_PlayerCheat", "type": "GameEventType"}, 
		{"name": "GE_GameStart", "type": "GameEventType"}, 
		{"name": "GE_UpgradeStart", "type": "GameEventType"}, 
		{"name": "GE_EntityRecrewed", "type": "GameEventType"}, 
		{"name": "GE_DriverRecrewed", "type": "GameEventType"}, 
		{"name": "GE_PlayerPingOfShameLocal", "type": "GameEventType"}, 
		{"name": "GE_PlannedStructurePlaced", "type": "GameEventType"}, 
		{"name": "GE_SquadIdle", "type": "GameEventType"}, 
		{"name": "GE_RebuiltEntityCreated", "type": "GameEventType"}, 
		{"name": "GE_BuildItemStart", "type": "GameEventType"}, 
		{"name": "GE_SquadParadropComplete", "type": "GameEventType"}, 
		{"name": "GE_CasualtyStatus", "type": "GameEventType"}, 
		{"name": "GE_PlayerPhaseUp", "type": "GameEventType"}, 
		{"name": "GE_SquadSuppressedStateChange", "type": "GameEventType"}, 
		{"name": "HPAT_MovementLooping", "type": "HintPointActionType"}, 
		{"name": "HPAT_Bonus", "type": "HintPointActionType"}, 
		{"name": "HPAT_Vaulting", "type": "HintPointActionType"}, 
		{"name": "HPAT_Detonation", "type": "HintPointActionType"}, 
		{"name": "HPAT_CoverRed", "type": "HintPointActionType"}, 
		{"name": "HPAT_CoverYellow", "type": "HintPointActionType"}, 
		{"name": "HPAT_Artillery", "type": "HintPointActionType"}, 
		{"name": "HPAT_FormationSetup", "type": "HintPointActionType"}, 
		{"name": "HPAT_Attack", "type": "HintPointActionType"}, 
		{"name": "HPAT_Movement", "type": "HintPointActionType"}, 
		{"name": "HPAT_Critical", "type": "HintPointActionType"}, 
		{"name": "HPAT_Objective", "type": "HintPointActionType"}, 
		{"name": "HPAT_Hint", "type": "HintPointActionType"}, 
		{"name": "HPAT_AttackLooping", "type": "HintPointActionType"}, 
		{"name": "HPAT_DeepSnow", "type": "HintPointActionType"}, 
		{"name": "HPAT_CoverGreen", "type": "HintPointActionType"}, 
		{"name": "HPAT_RallyPoint", "type": "HintPointActionType"}, 
		{"name": "HUDF_None", "type": "HUDFeatureType"}, 
		{"name": "HUDF_AbilityCard", "type": "HUDFeatureType"}, 
		{"name": "HUDF_Upgrades", "type": "HUDFeatureType"}, 
		{"name": "HUDF_CommandCard", "type": "HUDFeatureType"}, 
		{"name": "HUDF_MiniMap", "type": "HUDFeatureType"}, 
		{"name": "LOOP_NORMAL", "type": "LoopType"}, 
		{"name": "LOOP_TOGGLE_DIRECTION", "type": "LoopType"}, 
		{"name": "LOOP_NONE", "type": "LoopType"}, 
		{"name": "MAP_Confirmed", "type": "ModalAbilityPhase"}, 
		{"name": "MAP_Placing", "type": "ModalAbilityPhase"}, 
		{"name": "MAP_Facing", "type": "ModalAbilityPhase"}, 
		{"name": "MAT_Weapon", "type": "ModifierApplicationType"}, 
		{"name": "MAT_Upgrade", "type": "ModifierApplicationType"}, 
		{"name": "MAT_EntityType", "type": "ModifierApplicationType"}, 
		{"name": "MAT_WeaponType", "type": "ModifierApplicationType"}, 
		{"name": "MAT_Ability", "type": "ModifierApplicationType"}, 
		{"name": "MAT_SquadType", "type": "ModifierApplicationType"}, 
		{"name": "MAT_Player", "type": "ModifierApplicationType"}, 
		{"name": "MAT_Squad", "type": "ModifierApplicationType"}, 
		{"name": "MAT_Entity", "type": "ModifierApplicationType"}, 
		{"name": "MUT_MultiplicationAddition", "type": "ModifierUsageType"}, 
		{"name": "MUT_Multiplication", "type": "ModifierUsageType"}, 
		{"name": "MUT_MultiplyAdd", "type": "ModifierUsageType"}, 
		{"name": "MUT_Addition", "type": "ModifierUsageType"}, 
		{"name": "MUT_Enable", "type": "ModifierUsageType"}, 
		{"name": "PBG_Weapon", "type": "ModPropertyBagGroupTypes"}, 
		{"name": "PBG_MoveType", "type": "ModPropertyBagGroupTypes"}, 
		{"name": "PBG_SlotItem", "type": "ModPropertyBagGroupTypes"}, 
		{"name": "PBG_UITacticalMap", "type": "ModPropertyBagGroupTypes"}, 
		{"name": "PBG_HitMaterial", "type": "ModPropertyBagGroupTypes"}, 
		{"name": "PBG_PassType", "type": "ModPropertyBagGroupTypes"}, 
		{"name": "PBG_Race", "type": "ModPropertyBagGroupTypes"}, 
		{"name": "PBG_UISelection", "type": "ModPropertyBagGroupTypes"}, 
		{"name": "PBG_CamouflageStance", "type": "ModPropertyBagGroupTypes"}, 
		{"name": "PBG_Material", "type": "ModPropertyBagGroupTypes"}, 
		{"name": "PBG_Tuning", "type": "ModPropertyBagGroupTypes"}, 
		{"name": "PBG_Ability", "type": "ModPropertyBagGroupTypes"}, 
		{"name": "PBG_Upgrade", "type": "ModPropertyBagGroupTypes"}, 
		{"name": "PBG_Critical", "type": "ModPropertyBagGroupTypes"}, 
		{"name": "PBG_Posture", "type": "ModPropertyBagGroupTypes"}, 
		{"name": "PBG_UITerritory", "type": "ModPropertyBagGroupTypes"}, 
		{"name": "MM_ForceTense", "type": "MoodMode"}, 
		{"name": "MM_ForceCalm", "type": "MoodMode"}, 
		{"name": "MM_Auto", "type": "MoodMode"}, 
		{"name": "FN_OnShow", "type": "ObjectiveFunction"}, 
		{"name": "FN_OnActivate", "type": "ObjectiveFunction"}, 
		{"name": "FN_OnCounterDisplay", "type": "ObjectiveFunction"}, 
		{"name": "FN_LuaTableQuery", "type": "ObjectiveFunction"}, 
		{"name": "FN_OnSelect", "type": "ObjectiveFunction"}, 
		{"name": "OS_Complete", "type": "ObjectiveState"}, 
		{"name": "OS_Incomplete", "type": "ObjectiveState"}, 
		{"name": "OS_Off", "type": "ObjectiveState"}, 
		{"name": "OS_Failed", "type": "ObjectiveState"}, 
		{"name": "OT_Secondary", "type": "ObjectiveType"}, 
		{"name": "OT_Primary", "type": "ObjectiveType"}, 
		{"name": "OT_Information", "type": "ObjectiveType"}, 
		{"name": "OT_Bonus", "type": "ObjectiveType"}, 
		{"name": "OT_Ally", "type": "ObjectiveType"}, 
		{"name": "OT_Enemy", "type": "ObjectiveType"}, 
		{"name": "OT_Player", "type": "ObjectiveType"}, 
		{"name": "OT_Neutral", "type": "ObjectiveType"}, 
		{"name": "PCMD_MunitionDonation", "type": "PlayerCommandType"}, 
		{"name": "PCMD_SlotItemRemove", "type": "PlayerCommandType"}, 
		{"name": "PCMD_CriticalHit", "type": "PlayerCommandType"}, 
		{"name": "PCMD_CheatBuildTime", "type": "PlayerCommandType"}, 
		{"name": "PCMD_Ability", "type": "PlayerCommandType"}, 
		{"name": "PCMD_ConstructStructure", "type": "PlayerCommandType"}, 
		{"name": "PCMD_SetCommander", "type": "PlayerCommandType"}, 
		{"name": "PCMD_FuelDonation", "type": "PlayerCommandType"}, 
		{"name": "PCMD_CheatRevealAll", "type": "PlayerCommandType"}, 
		{"name": "PCMD_ManpowerDonation", "type": "PlayerCommandType"}, 
		{"name": "PCMD_UpgradeRemove", "type": "PlayerCommandType"}, 
		{"name": "PCMD_ConstructField", "type": "PlayerCommandType"}, 
		{"name": "PCMD_CancelProduction", "type": "PlayerCommandType"}, 
		{"name": "PCMD_CheatKillSelf", "type": "PlayerCommandType"}, 
		{"name": "PCMD_ConstructFence", "type": "PlayerCommandType"}, 
		{"name": "PCMD_Surrender", "type": "PlayerCommandType"}, 
		{"name": "PCMD_DetonateCharges", "type": "PlayerCommandType"}, 
		{"name": "PCMD_CheatResources", "type": "PlayerCommandType"}, 
		{"name": "PCMD_Upgrade", "type": "PlayerCommandType"}, 
		{"name": "PCMD_AIPlayer", "type": "PlayerCommandType"}, 
		{"name": "PCMD_AIPlayer_ObjectiveNotification", "type": "PlayerCommandType"}, 
		{"name": "PCMD_InstantUpgrade", "type": "PlayerCommandType"}, 
		{"name": "PITEM_Spawn", "type": "ProductionItemType"}, 
		{"name": "PITEM_SquadUpgrade", "type": "ProductionItemType"}, 
		{"name": "PITEM_SquadReinforce", "type": "ProductionItemType"}, 
		{"name": "PITEM_Upgrade", "type": "ProductionItemType"}, 
		{"name": "PT_Rectangle", "type": "ProximityType"}, 
		{"name": "PT_Circle", "type": "ProximityType"}, 
		{"name": "R_NEUTRAL", "type": "Relationship"}, 
		{"name": "R_ENEMY", "type": "Relationship"}, 
		{"name": "R_UNDEFINED", "type": "Relationship"}, 
		{"name": "R_ALLY", "type": "Relationship"}, 
		{"name": "RT_SovietOrder227", "type": "ResourceType"}, 
		{"name": "RT_Command", "type": "ResourceType"}, 
		{"name": "RT_SovietProgression", "type": "ResourceType"}, 
		{"name": "RT_Popcap", "type": "ResourceType"}, 
		{"name": "RT_Manpower", "type": "ResourceType"}, 
		{"name": "RT_Action", "type": "ResourceType"}, 
		{"name": "RT_Munition", "type": "ResourceType"}, 
		{"name": "RT_Fuel", "type": "ResourceType"}, 
		{"name": "RUIITEM_Population", "type": "ResourceUIItem"}, 
		{"name": "RUIITEM_ResourceBar", "type": "ResourceUIItem"}, 
		{"name": "RUIITEM_Munitions", "type": "ResourceUIItem"}, 
		{"name": "RUIITEM_Manpower", "type": "ResourceUIItem"}, 
		{"name": "RUIITEM_Fuel", "type": "ResourceUIItem"}, 
		{"name": "ST_MARKER", "type": "ScarType"}, 
		{"name": "ST_SGROUP", "type": "ScarType"}, 
		{"name": "ST_PBG", "type": "ScarType"}, 
		{"name": "ST_SCARPOS", "type": "ScarType"}, 
		{"name": "ST_AIPLAYER", "type": "ScarType"}, 
		{"name": "ST_TABLE", "type": "ScarType"}, 
		{"name": "ST_EGROUP", "type": "ScarType"}, 
		{"name": "ST_AISQUAD", "type": "ScarType"}, 
		{"name": "ST_ENTITY", "type": "ScarType"}, 
		{"name": "ST_FUNCTION", "type": "ScarType"}, 
		{"name": "ST_SQUAD", "type": "ScarType"}, 
		{"name": "ST_PLAYER", "type": "ScarType"}, 
		{"name": "ST_BOOLEAN", "type": "ScarType"}, 
		{"name": "ST_NIL", "type": "ScarType"}, 
		{"name": "ST_UNKNOWN", "type": "ScarType"}, 
		{"name": "ST_STRING", "type": "ScarType"}, 
		{"name": "ST_NUMBER", "type": "ScarType"}, 
		{"name": "ST_CONSTPLAYER", "type": "ScarType"}, 
		{"name": "PBG_TurnPlan", "type": "ModPropertyBagGroupTypes"}, 
		{"name": "PBG_EntityProperties", "type": "ModPropertyBagGroupTypes"}, 
		{"name": "PBG_SquadFormation", "type": "ModPropertyBagGroupTypes"}, 
		{"name": "PBG_SquadProperties", "type": "ModPropertyBagGroupTypes"}, 
		{"name": "PBG_Formation", "type": "ModPropertyBagGroupTypes"}, 
		{"name": "DEBUG_SELECTOR", "type": "SpeechDebugMode"}, 
		{"name": "DEBUG_COMBATZONES", "type": "SpeechDebugMode"}, 
		{"name": "SCMD_Load", "type": "SquadCommandType"}, 
		{"name": "SCMD_Attack", "type": "SquadCommandType"}, 
		{"name": "SCMD_Upgrade", "type": "SquadCommandType"}, 
		{"name": "SCMD_StationaryAttack", "type": "SquadCommandType"}, 
		{"name": "SCMD_SlotItemRemove", "type": "SquadCommandType"}, 
		{"name": "SCMD_Pilfer", "type": "SquadCommandType"}, 
		{"name": "SCMD_Ability", "type": "SquadCommandType"}, 
		{"name": "SCMD_Move", "type": "SquadCommandType"}, 
		{"name": "SCMD_BuildStructure", "type": "SquadCommandType"}, 
		{"name": "SCMD_Merge", "type": "SquadCommandType"}, 
		{"name": "SCMD_UnloadSquads", "type": "SquadCommandType"}, 
		{"name": "SCMD_Retreat", "type": "SquadCommandType"}, 
		{"name": "SCMD_PlaceCharge", "type": "SquadCommandType"}, 
		{"name": "SCMD_DefaultAction", "type": "SquadCommandType"}, 
		{"name": "SCMD_Stop", "type": "SquadCommandType"}, 
		{"name": "SCMD_SetCamouflageStance", "type": "SquadCommandType"}, 
		{"name": "SCMD_AttackMove", "type": "SquadCommandType"}, 
		{"name": "SCMD_RevertFieldSupport", "type": "SquadCommandType"}, 
		{"name": "SCMD_CancelProduction", "type": "SquadCommandType"}, 
		{"name": "SCMD_Capture", "type": "SquadCommandType"}, 
		{"name": "SCMD_InstantSetupTeamWeapon", "type": "SquadCommandType"}, 
		{"name": "SCMD_Surprise", "type": "SquadCommandType"}, 
		{"name": "SCMD_ReinforceUnit", "type": "SquadCommandType"}, 
		{"name": "SCMD_CaptureTeamWeapon", "type": "SquadCommandType"}, 
		{"name": "SCMD_Patrol", "type": "SquadCommandType"}, 
		{"name": "SCMD_Recrew", "type": "SquadCommandType"}, 
		{"name": "SCMD_DoPlan", "type": "SquadCommandType"}, 
		{"name": "SCMD_PickUpSlotItem", "type": "SquadCommandType"}, 
		{"name": "SCMD_InstantReinforceUnit", "type": "SquadCommandType"}, 
		{"name": "SCMD_Face", "type": "SquadCommandType"}, 
		{"name": "SCMD_InstantLoad", "type": "SquadCommandType"}, 
		{"name": "SCMD_RallyPoint", "type": "SquadCommandType"}, 
		{"name": "SCMD_SetMoveType", "type": "SquadCommandType"}, 
		{"name": "SCMD_AbandonTeamWeapon", "type": "SquadCommandType"}, 
		{"name": "SCMD_Unload", "type": "SquadCommandType"}, 
		{"name": "SCMD_DefuseMine", "type": "SquadCommandType"}, 
		{"name": "SCMD_BuildSquad", "type": "SquadCommandType"}, 
		{"name": "SCMD_DefuseCharge", "type": "SquadCommandType"}, 
		{"name": "SCMD_InstantUpgrade", "type": "SquadCommandType"}, 
		{"name": "SCMD_Destroy", "type": "SquadCommandType"}, 
		{"name": "SCMD_RescueCasualty", "type": "SquadCommandType"}, 
		{"name": "SQUADSTATEID_Capture", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_CaptureTeamWeapon", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_Move", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_Retreat", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_Plan", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_AttackMove", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_Load", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_Defuse", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_DefuseMine", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_Patrol", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_CombatStance", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_RevertFieldSupport", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_Idle", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_Unload", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_HoldUnload", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_WeaponTransition", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_PickUpSlotItem", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_Ability", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_Construction", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_Recrew", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_PlaceCharges", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_Stop", "type": "SquadStateID"}, 
		{"name": "SQUADSTATEID_Combat", "type": "SquadStateID"}, 
		{"name": "UIE_UpgradeComplete", "type": "UIEventType"}, 
		{"name": "UIE_EnemyReveal", "type": "UIEventType"}, 
		{"name": "UIE_InfoPointActivated", "type": "UIEventType"}, 
		{"name": "UIE_VehicleComplete", "type": "UIEventType"}, 
		{"name": "UIE_AbilityExectued", "type": "UIEventType"}, 
		{"name": "UIE_CommanderAbilityUnlocked", "type": "UIEventType"}, 
		{"name": "UIE_CommandPointGained", "type": "UIEventType"}, 
		{"name": "UIE_SquadFreezing", "type": "UIEventType"}, 
		{"name": "UIE_SquadCold", "type": "UIEventType"}, 
		{"name": "UIE_CasualtySquadSpawned", "type": "UIEventType"}, 
		{"name": "UIE_SquadVeterancy", "type": "UIEventType"}, 
		{"name": "UIE_VehicleReplaced", "type": "UIEventType"}, 
		{"name": "UIE_InfantryReplaced", "type": "UIEventType"}, 
		{"name": "UIE_Sniped", "type": "UIEventType"}, 
		{"name": "UIE_BoobyTrap", "type": "UIEventType"}, 
		{"name": "UIE_MineDetected", "type": "UIEventType"}, 
		{"name": "UIE_StrategicPointCaptured", "type": "UIEventType"}, 
		{"name": "UIE_StrategicPointReverting", "type": "UIEventType"}, 
		{"name": "UIE_EnemyTerritoryEntered", "type": "UIEventType"}, 
		{"name": "UIE_TerritoryEntered", "type": "UIEventType"}, 
		{"name": "UIE_AllyAttacked", "type": "UIEventType"}, 
		{"name": "UIE_PlayerAttacked", "type": "UIEventType"}, 
		{"name": "UIE_VehicleAttacked", "type": "UIEventType"}, 
		{"name": "UIE_ConstructionComplete", "type": "UIEventType"}, 
		{"name": "UIE_StrategicPointSecured", "type": "UIEventType"}, 
		{"name": "UIE_ResourceDepleted", "type": "UIEventType"}, 
		{"name": "UIE_SquadPinned", "type": "UIEventType"}, 
		{"name": "UIE_InfantryAttacked", "type": "UIEventType"}, 
		{"name": "UIE_InfantryComplete", "type": "UIEventType"}, 
		{"name": "UIE_PhaseUp", "type": "UIEventType"}, 
		{"name": "UIE_Default", "type": "UIEventType"}, 
		{"name": "UI_Cinematic", "type": "UIMode"}, 
		{"name": "UI_Fullscreen", "type": "UIMode"}, 
		{"name": "UI_Normal", "type": "UIMode"}, 
		{"name": "UOT_Player", "type": "UpgradeOwnerType"}, 
		{"name": "UOT_Self", "type": "UpgradeOwnerType"}, 
		{"name": "UOT_None", "type": "UpgradeOwnerType"}, 
		{"name": "BIS_Icon", "type": "ButtonIconStyle"}, 
		{"name": "BIS_IconState", "type": "ButtonIconStyle"}, 
		{"name": "LAH_Justify", "type": "LabelAlignHorizontal"}, 
		{"name": "LAH_Left", "type": "LabelAlignHorizontal"}, 
		{"name": "LAH_Center", "type": "LabelAlignHorizontal"}, 
		{"name": "LAH_Right", "type": "LabelAlignHorizontal"}, 
		{"name": "LAV_None", "type": "LabelAlignVertical"}, 
		{"name": "LAV_Top", "type": "LabelAlignVertical"}, 
		{"name": "LAV_Center", "type": "LabelAlignVertical"}, 
		{"name": "LAV_Bottom", "type": "LabelAlignVertical"}
	]
}